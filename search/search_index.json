{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Write you plugins in Python or C++ and enhance the Bedrock Dedicated Servers in minutes - add custom features and functionality, design innovative and bespoke player experiences.</p>"},{"location":"#ready-to-start","title":"\ud83d\ude80 Ready to Start?","text":"<ul> <li> <p>Install Endstone server</p> <p>Follow the comprehensive guide to install and configure your Endstone server.</p> <p> Getting Started</p> </li> <li> <p>Write your first plugin</p> <p>Our step-by-step tutorial takes you from zero to hero as you create your first plugin.</p> <p> Tutorials</p> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v049-unreleased","title":"v0.4.9 (Unreleased)","text":"<p>Compare with 0.4.8.1</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Support for Minecraft v1.21.1.</li> <li><code>ActorDeathEvent</code> and <code>PlayerDeathEvent</code> triggers when an actor or a player dies.</li> <li><code>Player::giveExp</code> and <code>Player::giveExpLevels</code> functionality for adding experience points/levels added.</li> <li><code>Player::getAllowFlight</code> and <code>Player::setAllowFlight</code> to check or grant the ability for players not in creative mode   to fly.</li> <li><code>Player::setFlying</code> to toggle a player's flying status.</li> <li>An overload of <code>sendMessage</code> to allow sending of translatable messages with parameters that will be localized on the   client side.</li> <li><code>Player::getExpProgress</code> and <code>Player::setExpProgress</code> to get or set a player's progress towards the next level.</li> <li><code>Player::getExpLevel</code> and <code>Player::setExpLevel</code> to get or set a player's current experience level.</li> <li><code>Player::getTotalExp</code> to get the total amount of experiences a player has collected.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li><code>Permissible.op</code> property in the python binding is renamed to <code>Permissible.is_op</code>.</li> <li>Crash dumps will now print system and version info in addition to stacktraces.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Suppressed warning message about empty UDP packets from the output.</li> </ul>"},{"location":"changelog/#0481-2024-06-15","title":"0.4.8.1 - 2024-06-15","text":"<p>Compare with 0.4.7</p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Support Minecraft v1.21 (Tricky Trials)</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li><code>Player::getPing</code> now returns correct value instead of -1 on Linux.</li> <li><code>Player::isFlying</code> now works correctly in all conditions.</li> <li>Calling python binding of <code>Server::getPlayer</code> with uuid no longer crashes.</li> <li>Fixed a regression in vanilla command permissions.</li> <li>Permission attachment now works as expected.</li> </ul>"},{"location":"changelog/#047-2024-06-13","title":"0.4.7 - 2024-06-13","text":"<p>Compare with 0.4.6</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>Player::performCommand</code> allows a player to execute a given command. During the command execution, the player is   temporarily granted the operator permission.</li> <li><code>Level::getDimension</code> and <code>Level::getDimensions</code> for getting dimensions within a specific level.</li> <li><code>Actor::getDimension</code> for getting the dimension that an actor resides in.</li> <li><code>Player::getGameMode</code> and <code>Player::setGameMode</code> for getting and setting a player's game mode.</li> <li>Plugin configuration for Python plugins.</li> <li>Added more struct info by @Duckos-Mods   in #11.</li> <li>World seed will no longer be sent to the client when <code>client-side-chunk-generation-enabled</code> is disabled   in <code>server.properties</code>.</li> <li>Command permissions are now checked before its parsing.</li> <li><code>Server::dispatchCommand</code> allows one to dispatch a command on the server.</li> <li><code>Server::getMaxPlayers</code> and <code>Server::setMaxPlayers</code> for getting and setting the maximum amount of players allowed to   be logged in.</li> <li><code>Server::getPlayer</code> now also accepts a string argument to get a player by name instead of UUID.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Changed logging level look-up from using a hashmap to using a switch by @Duckos-Mods   in #12</li> <li>Endstone no longer requires the presence of debug symbols at runtime.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li><code>Actor::getVelocity</code> now returns the correct velocity when the actor rides a vehicle.</li> <li>Python plugin loader now works correctly with Python 3.9.</li> </ul>"},{"location":"changelog/#046-2024-05-15","title":"0.4.6 - 2024-05-15","text":"<p>Compare with 0.4.5</p>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Improved the detection of Python executable.</li> </ul>"},{"location":"changelog/#045-2024-05-14","title":"0.4.5 - 2024-05-14","text":"<p>Compare with 0.4.3</p>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Bootstrap now protects specific files from overwriting during update.</li> <li>Python plugin loader now loads all <code>*.whl</code> plugins under the <code>plguins</code> folder and their dependencies during server   start up.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Scheduler now works on Linux.</li> </ul>"},{"location":"changelog/#043-2024-05-13","title":"0.4.3 - 2024-05-13","text":"<p>Compare with 0.4.2</p>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li><code>Server::getOnlinePlayers</code> for getting all online players.</li> <li><code>Player::kick</code> for kicking a specific player with a custom message.</li> <li><code>Player::getPing</code> for getting the average latency of a connected player.</li> <li><code>Actor::getLocation</code> and <code>Actor::getVelocity</code> for getting the location and velocity of an actor respectively.</li> <li><code>Actor::getLevel</code> for getting the <code>Level</code> that an actor resides in.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li><code>Level</code> is no longer created for each <code>Dimension</code> in a Minecraft world. Instead, one <code>Level</code> now manages multiple   <code>Dimension</code>s.</li> <li><code>Player::getAddress</code> now returns a <code>SocketAddress</code> instead of <code>std::string</code>. <code>Player::getPort</code> was removed,   use <code>SocketAddress::getPort</code> instead.</li> <li>Executable <code>endstone</code> now accepts <code>--server-folder</code> instead of <code>--install-folder</code>, and <code>--no-confirm</code> instead   of <code>--install</code>.</li> <li>Endstone server will now ask the user whether to update the Bedrock Dedicated Server if an older version is found.</li> </ul>"},{"location":"changelog/#042-2024-04-30","title":"0.4.2 - 2024-04-30","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li><code>Level::getDimension</code> for getting the dimension of a specific level.</li> <li><code>Player::getAddress</code> and <code>Player::getPort</code> for getting the socket address and port of a specific player, respectively.</li> <li>Logs are now written to <code>logs/latest.log</code> with rotations.</li> <li>Basic scheduler implementation, currently supporting only synchronized task execution.</li> <li><code>PlayerLoginEvent</code> is called when a player attempts to log in.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Support for Minecraft v1.20.81 (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Server no longer crashes when the weather is changed on Linux.</li> </ul>"},{"location":"changelog/#041-2024-04-24","title":"0.4.1 - 2024-04-24","text":"<p>Compare with 0.4.0</p> <p>This release focuses on supporting game version v1.20.80, which adds several new features. Additionally, we add a few useful functions to <code>Player</code> and <code>Server</code>.</p>"},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Commands executed by players are now logged to the console.</li> <li>Message of <code>/say</code> command will be logged to the console.</li> <li><code>PlayerCommandEvent</code> is called when a player attempts to execute a command.</li> <li><code>Server::broadcastMessage</code> for broadcasting messages to all players.</li> <li><code>BroadcastMessageEvent</code> is called when a message is broadcast by the server.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Support for Minecraft v1.20.80 - Armored Paws (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Player permissions are recalculated when the op status is changed.</li> <li>Incorrect UUID for Players corrected.</li> </ul>"},{"location":"changelog/#040-2024-04-20","title":"0.4.0 - 2024-04-20","text":"<p>Compare with 0.3.0</p> <p>In this release, we added an event system and several basic interfaces for game objects like <code>Level</code>, <code>Actor</code> and <code>Player</code>.</p>"},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Event system that allows plugins to listen for specific events.</li> <li><code>ServerLoadEvent</code> is called when a server is started up.</li> <li><code>Plugin::registerEventHandler</code> for registering an event handler in C++ plugins.</li> <li>Decorator <code>@event_handler</code> for registering an event handler in Python plugins.</li> <li><code>PluginEnableEvent</code> and <code>PluginDisableEvent</code> are called when a plugin is enabled or disabled.</li> <li><code>ServerPingListEvent</code> can be listened to for customizing how the server appears in the client list.</li> <li><code>ServerCommandEvent</code> is called when the server executes a command.</li> <li><code>WeatherChangeEvent</code> and <code>ThunderChangeEvent</code> are called when the weather or thunder status changes in a level.</li> <li>Basic interface <code>endstone::Level</code> for a level/world.</li> <li>Basic interface <code>endstone::Actor</code> for entities/actors.</li> <li>Basic interface <code>endstone::Player</code> for players.</li> <li><code>Server::getPlayer</code> for getting a player instance by UUID.</li> <li><code>Player::sendPopup</code> and <code>Player::sendTip</code> for sending popup and tip messages.</li> <li>Stack traces are now printed to the console when an unrecoverable error occurs.</li> <li><code>PlayerJoinEvent</code> and <code>PlayerQuitEvent</code> are called when a player joins and leaves the server.</li> <li><code>ActorSpawnEvent</code> is called when an actor is spawned in the level.</li> <li><code>ActorRemoveEvent</code> is called when an actor is removed from the level.</li> <li><code>PlayerChatEvent</code> is called when a player sends a message.</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Singletons are now managed using <code>entt::locator</code>.</li> <li>Macro <code>ENDSTONE_PLUGIN</code> is improved to simplify the definition of plugin metadata.</li> <li><code>ColorFormat</code> and <code>GameMode</code> have been moved from <code>endstone.util</code> to <code>endstone</code> in the Python package.</li> <li>Wheels are now built and released with <code>RelWithDebInfo</code> configuration to enable stack trace printing.</li> <li>Support for Minecraft v1.20.73 (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Server no longer crashes when <code>/listd</code> command is executed.</li> </ul>"},{"location":"changelog/#030-2024-03-21","title":"0.3.0 - 2024-03-21","text":"<p>Compare with 0.2.0</p> <p>This is the second release of Endstone with a focus on the permission system and improving the plugin loading mechanisms.</p>"},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Basic permission systems.</li> <li>Enforced Plugin API version checks for C++ and Python plugins to ensure ABI/API compatibility.</li> <li>Commands are now defined within the plugin metadata which will be automatically registered when the associated plugin   is enabled.</li> <li>PluginDescription properties are extended to support <code>website</code>, <code>load_order</code>, <code>depend</code>, <code>soft_depend</code>, <code>load_before</code>,   and <code>provides</code>.</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Improved <code>ENDSTONE_PLUGIN</code> macro to further simplify the definition of plugin metadata.</li> <li>Plugin names and websites are now displayed when using <code>/version [plugin: PluginName]</code>.</li> <li>Support for Minecraft v1.20.72 (Bedrock)</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>C++ plugin loader now respects the <code>prefix</code> property of a plugin.</li> </ul>"},{"location":"changelog/#020-2024-03-19","title":"0.2.0 - 2024-03-19","text":"<p>Hello World! This is the first release of Endstone.</p>"},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Basic plugin loader for C++ and Python plugins.</li> <li>Basic command system that allows plugins to register custom commands.</li> </ul>"},{"location":"getting-started/installation/","title":"Getting started","text":"<p>Endstone offers a powerful plugin API for Bedrock Dedicated Servers, the official server software for Minecraft: Bedrock Edition. If you're familiar with Python, you can install Endstone with <code>pip</code>, the Python package manager. If not, we recommend using <code>docker</code>.</p>"},{"location":"getting-started/installation/#installation","title":"Installation","text":""},{"location":"getting-started/installation/#environment","title":"Environment optional","text":"<p>We recommend using a virtual environment, which is an isolated Python runtime. If you are in a virtual environment, any packages that you install or upgrade will be local to the environment. If you run into problems, you can just delete and recreate the environment. It's trivial to set up:</p> <ul> <li> <p>Create a new virtual environment with:</p> <pre><code>python3 -m venv venv\n</code></pre> </li> <li> <p>Activate the environment with:</p>  Windows Linux <pre><code>. venv/Scripts/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> <p>Your terminal should now print <code>(venv)</code> before the prompt, which is how you know that you are inside the virtual environment that you just created.</p> </li> <li> <p>Exit the environment with:</p> <pre><code>deactivate\n</code></pre> </li> </ul>"},{"location":"getting-started/installation/#with-pip","title":"with pip recommended","text":"<p>Endstone is published as a Python package and can be installed with <code>pip</code>, ideally by using the virtual environment  from the last step. Open up a terminal and install Endstone with:</p> Latest <pre><code>pip install endstone\n</code></pre>"},{"location":"getting-started/installation/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get the Endstone server up and running in a few minutes. Open up a terminal and pull the image with:</p> Latest <pre><code>docker pull endstone/endstone\n</code></pre>"},{"location":"getting-started/start-your-server/","title":"Start your server","text":"<p>After you've installed Endstone, you can bootstrap your server using the <code>endstone</code> executable. Go to the directory where you want your server to be located and enter:</p> <pre><code>endstone\n</code></pre> <p>Alternatively, if you're running Endstone from within Docker, use:</p>  Linux /  Powershell Command Prompt <pre><code>docker run --rm -it -v ${PWD}:/home/endstone -p 19132:19132/udp endstone/endstone\n</code></pre> <pre><code>docker run --rm -it -v \"%cd%\":/home/endstone -p 19132:19132/udp endstone/endstone\n</code></pre> <p>You should see this in your console:</p> <p></p> <p>Tip</p> <p>The first time you run the bootstrap, it will need to download the Bedrock Dedicated Server from the official mirror. Press Y and Enter to continue.</p>"},{"location":"reference/","title":"Reference","text":"<p>In the course of your plugin development, you may choose between the Python API and C++ API. If you are seeking a quick start and prefer a more flexible language, the Python API documentation can be your starting point. However, if you need to implement more performance-driven, highly optimized code, you may want to delve into the C++ API documentation.</p> <ul> <li> <p> Python API</p> <p>Craft your plugins using the Python API for a quick start.</p> <p> Learn more</p> </li> <li> <p> C++ API</p> <p>Write your plugins using the C++ API for maximum performance.</p> <p> Learn more</p> </li> </ul>"},{"location":"reference/python/actor/","title":"Actor","text":""},{"location":"reference/python/actor/#endstone.actor","title":"endstone.actor","text":""},{"location":"reference/python/actor/#endstone.actor.Actor","title":"Actor","text":"<p>               Bases: <code>CommandSender</code></p> <p>Represents a base actor in the level.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_in_lava","title":"is_in_lava  <code>property</code>","text":"<pre><code>is_in_lava: bool\n</code></pre> <p>Returns true if the actor is in lava.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_in_water","title":"is_in_water  <code>property</code>","text":"<pre><code>is_in_water: bool\n</code></pre> <p>Returns true if the actor is in water.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.is_on_ground","title":"is_on_ground  <code>property</code>","text":"<pre><code>is_on_ground: bool\n</code></pre> <p>Returns true if the actor is supported by a block, i.e. on ground.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the current Level this actor resides in.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.location","title":"location  <code>property</code>","text":"<pre><code>location: Location\n</code></pre> <p>Gets the actor's current position.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.runtime_id","title":"runtime_id  <code>property</code>","text":"<pre><code>runtime_id: int\n</code></pre> <p>Returns the runtime id for this actor.</p>"},{"location":"reference/python/actor/#endstone.actor.Actor.velocity","title":"velocity  <code>property</code>","text":"<pre><code>velocity: Vector\n</code></pre> <p>Gets this actor's current velocity.</p>"},{"location":"reference/python/command/","title":"Command","text":""},{"location":"reference/python/command/#endstone.command","title":"endstone.command","text":""},{"location":"reference/python/command/#endstone.command.Command","title":"Command","text":"<pre><code>Command(\n    name: str,\n    description: str | None = None,\n    usages: list[str] | None = None,\n    aliases: list[str] | None = None,\n    permissions: list[str] | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Represents a Command, which executes various tasks upon user input</p>"},{"location":"reference/python/command/#endstone.command.Command.aliases","title":"aliases  <code>property</code> <code>writable</code>","text":"<pre><code>aliases: list[str]\n</code></pre> <p>List of aliases of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.description","title":"description  <code>property</code> <code>writable</code>","text":"<pre><code>description: str\n</code></pre> <p>Brief description of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of this command.</p>"},{"location":"reference/python/command/#endstone.command.Command.permissions","title":"permissions  <code>property</code> <code>writable</code>","text":"<pre><code>permissions: list[str]\n</code></pre> <p>The permissions required by users to be able to perform this command</p>"},{"location":"reference/python/command/#endstone.command.Command.registered","title":"registered  <code>property</code>","text":"<pre><code>registered: bool\n</code></pre> <p>Returns the current registered state of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.usages","title":"usages  <code>property</code> <code>writable</code>","text":"<pre><code>usages: list[str]\n</code></pre> <p>List of usages of this command</p>"},{"location":"reference/python/command/#endstone.command.Command.execute","title":"execute","text":"<pre><code>execute(sender: CommandSender, args: list[str]) -&gt; bool\n</code></pre> <p>Executes the command, returning its success</p>"},{"location":"reference/python/command/#endstone.command.Command.test_permission","title":"test_permission","text":"<pre><code>test_permission(target: CommandSender) -&gt; bool\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command.</p>"},{"location":"reference/python/command/#endstone.command.Command.test_permission_silently","title":"test_permission_silently","text":"<pre><code>test_permission_silently(target: CommandSender) -&gt; bool\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command. No error is sent to the sender.</p>"},{"location":"reference/python/command/#endstone.command.CommandExecutor","title":"CommandExecutor","text":"<pre><code>CommandExecutor()\n</code></pre> <p>Represents a class which contains a single method for executing commands</p>"},{"location":"reference/python/command/#endstone.command.CommandExecutor.on_command","title":"on_command","text":"<pre><code>on_command(\n    sender: CommandSender, command: Command, args: list[str]\n) -&gt; bool\n</code></pre> <p>Executes the given command, returning its success.</p>"},{"location":"reference/python/command/#endstone.command.CommandSender","title":"CommandSender","text":"<p>               Bases: <code>Permissible</code></p> <p>Represents a command sender.</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this command sender</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.server","title":"server  <code>property</code>","text":"<pre><code>server: Server\n</code></pre> <p>Returns the server instance that this command is running on</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.as_player","title":"as_player","text":"<pre><code>as_player() -&gt; Player\n</code></pre> <p>Cast to a Player instance</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.send_error_message","title":"send_error_message","text":"<pre><code>send_error_message(message: str) -&gt; None\n</code></pre> <p>Sends this sender an error message</p> <pre><code>send_error_message(message: Translatable) -&gt; None\n</code></pre> <p>Sends this sender a translatable error message</p>"},{"location":"reference/python/command/#endstone.command.CommandSender.send_message","title":"send_message","text":"<pre><code>send_message(message: str) -&gt; None\n</code></pre> <p>Sends this sender a message</p> <pre><code>send_message(message: Translatable) -&gt; None\n</code></pre> <p>Sends this sender a translatable message</p>"},{"location":"reference/python/event/","title":"Event","text":""},{"location":"reference/python/event/#endstone.event","title":"endstone.event","text":""},{"location":"reference/python/event/#endstone.event.ActorDeathEvent","title":"ActorDeathEvent","text":"<p>               Bases: <code>ActorEvent</code></p> <p>Called when an Actor dies.</p>"},{"location":"reference/python/event/#endstone.event.ActorEvent","title":"ActorEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents an Actor-related event.</p>"},{"location":"reference/python/event/#endstone.event.ActorEvent.actor","title":"actor  <code>property</code>","text":"<pre><code>actor: Actor\n</code></pre> <p>Returns the Actor involved in this event</p>"},{"location":"reference/python/event/#endstone.event.ActorRemoveEvent","title":"ActorRemoveEvent","text":"<p>               Bases: <code>ActorEvent</code></p> <p>Called when an Actor is removed.</p>"},{"location":"reference/python/event/#endstone.event.ActorSpawnEvent","title":"ActorSpawnEvent","text":"<p>               Bases: <code>ActorEvent</code></p> <p>Called when an Actor is spawned into a world.</p>"},{"location":"reference/python/event/#endstone.event.BroadcastMessageEvent","title":"BroadcastMessageEvent","text":"<p>               Bases: <code>Event</code></p> <p>Event triggered for server broadcast messages such as from Server.broadcast</p>"},{"location":"reference/python/event/#endstone.event.BroadcastMessageEvent.message","title":"message  <code>property</code> <code>writable</code>","text":"<pre><code>message: str\n</code></pre> <p>Gets or sets the message to broadcast.</p>"},{"location":"reference/python/event/#endstone.event.BroadcastMessageEvent.recipients","title":"recipients  <code>property</code>","text":"<pre><code>recipients: set[CommandSender]\n</code></pre> <p>Gets a set of recipients that this broadcast message will be displayed to.</p>"},{"location":"reference/python/event/#endstone.event.Event","title":"Event","text":"<p>Represents an event.</p>"},{"location":"reference/python/event/#endstone.event.Event.asynchronous","title":"asynchronous  <code>property</code>","text":"<pre><code>asynchronous: bool\n</code></pre> <p>Whether the event fires asynchronously.</p>"},{"location":"reference/python/event/#endstone.event.Event.cancellable","title":"cancellable  <code>property</code>","text":"<pre><code>cancellable: bool\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p>"},{"location":"reference/python/event/#endstone.event.Event.cancelled","title":"cancelled  <code>property</code> <code>writable</code>","text":"<pre><code>cancelled: bool\n</code></pre> <p>Gets or sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins</p>"},{"location":"reference/python/event/#endstone.event.Event.event_name","title":"event_name  <code>property</code>","text":"<pre><code>event_name: str\n</code></pre> <p>Gets a user-friendly identifier for this event.</p>"},{"location":"reference/python/event/#endstone.event.EventPriority","title":"EventPriority","text":"<pre><code>EventPriority(value: int)\n</code></pre> <p>Listeners are called in following order: LOWEST -&gt; LOW -&gt; NORMAL -&gt; HIGH -&gt; HIGHEST -&gt; MONITOR</p>"},{"location":"reference/python/event/#endstone.event.EventPriority.HIGH","title":"HIGH  <code>class-attribute</code>","text":"<pre><code>HIGH: EventPriority\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.HIGHEST","title":"HIGHEST  <code>class-attribute</code>","text":"<pre><code>HIGHEST: EventPriority\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.LOW","title":"LOW  <code>class-attribute</code>","text":"<pre><code>LOW: EventPriority\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.LOWEST","title":"LOWEST  <code>class-attribute</code>","text":"<pre><code>LOWEST: EventPriority\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.MONITOR","title":"MONITOR  <code>class-attribute</code>","text":"<pre><code>MONITOR: EventPriority\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.NORMAL","title":"NORMAL  <code>class-attribute</code>","text":"<pre><code>NORMAL: EventPriority\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/event/#endstone.event.EventPriority.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent","title":"PlayerChatEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player sends a chat message.</p>"},{"location":"reference/python/event/#endstone.event.PlayerChatEvent.message","title":"message  <code>property</code> <code>writable</code>","text":"<pre><code>message: str\n</code></pre> <p>Gets or sets the message that the player will send.</p>"},{"location":"reference/python/event/#endstone.event.PlayerCommandEvent","title":"PlayerCommandEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called whenever a player runs a command.</p>"},{"location":"reference/python/event/#endstone.event.PlayerCommandEvent.command","title":"command  <code>property</code> <code>writable</code>","text":"<pre><code>command: str\n</code></pre> <p>Gets or sets the command that the player will send.</p>"},{"location":"reference/python/event/#endstone.event.PlayerDeathEvent","title":"PlayerDeathEvent","text":"<p>               Bases: <code>ActorDeathEvent</code>, <code>PlayerEvent</code></p> <p>Called when a player dies</p>"},{"location":"reference/python/event/#endstone.event.PlayerDeathEvent.death_message","title":"death_message  <code>property</code> <code>writable</code>","text":"<pre><code>death_message: str\n</code></pre> <p>Gets or sets the death message that will appear to everyone on the server.</p>"},{"location":"reference/python/event/#endstone.event.PlayerEvent","title":"PlayerEvent","text":"<p>               Bases: <code>Event</code></p> <p>Represents a player related event</p>"},{"location":"reference/python/event/#endstone.event.PlayerEvent.player","title":"player  <code>property</code>","text":"<pre><code>player: Player\n</code></pre> <p>Returns the player involved in this event.</p>"},{"location":"reference/python/event/#endstone.event.PlayerJoinEvent","title":"PlayerJoinEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player joins a server</p>"},{"location":"reference/python/event/#endstone.event.PlayerLoginEvent","title":"PlayerLoginEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player attempts to login in.</p>"},{"location":"reference/python/event/#endstone.event.PlayerLoginEvent.kick_message","title":"kick_message  <code>property</code> <code>writable</code>","text":"<pre><code>kick_message: str\n</code></pre> <p>Gets or sets kick message to display if event is cancelled</p>"},{"location":"reference/python/event/#endstone.event.PlayerQuitEvent","title":"PlayerQuitEvent","text":"<p>               Bases: <code>PlayerEvent</code></p> <p>Called when a player leaves a server.</p>"},{"location":"reference/python/event/#endstone.event.PluginDisableEvent","title":"PluginDisableEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when a plugin is disabled.</p>"},{"location":"reference/python/event/#endstone.event.PluginDisableEvent.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre>"},{"location":"reference/python/event/#endstone.event.PluginEnableEvent","title":"PluginEnableEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when a plugin is enabled.</p>"},{"location":"reference/python/event/#endstone.event.PluginEnableEvent.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerCommandEvent","title":"ServerCommandEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when the console runs a command, early in the process.</p>"},{"location":"reference/python/event/#endstone.event.ServerCommandEvent.command","title":"command  <code>property</code> <code>writable</code>","text":"<pre><code>command: str\n</code></pre> <p>Gets or sets the command that the server will execute</p>"},{"location":"reference/python/event/#endstone.event.ServerCommandEvent.sender","title":"sender  <code>property</code>","text":"<pre><code>sender: CommandSender\n</code></pre> <p>Get the command sender.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent","title":"ServerListPingEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when a server ping is coming in.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.game_mode","title":"game_mode  <code>property</code> <code>writable</code>","text":"<pre><code>game_mode: GameMode\n</code></pre> <p>Gets or sets the current game mode.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.level_name","title":"level_name  <code>property</code> <code>writable</code>","text":"<pre><code>level_name: str\n</code></pre> <p>Gets or sets the level name.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.local_port","title":"local_port  <code>property</code>","text":"<pre><code>local_port: int\n</code></pre> <p>Get the local port of the server.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.local_port_v6","title":"local_port_v6  <code>property</code>","text":"<pre><code>local_port_v6: int\n</code></pre> <p>Get the local port of the server for IPv6 support</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.max_players","title":"max_players  <code>property</code> <code>writable</code>","text":"<pre><code>max_players: int\n</code></pre> <p>Gets or sets the maximum number of players allowed.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.minecraft_version_network","title":"minecraft_version_network  <code>property</code> <code>writable</code>","text":"<pre><code>minecraft_version_network: str\n</code></pre> <p>Gets or sets the network version of Minecraft that is supported by this server</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.motd","title":"motd  <code>property</code> <code>writable</code>","text":"<pre><code>motd: str\n</code></pre> <p>Gets or sets the message of the day message.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.network_protocol_version","title":"network_protocol_version  <code>property</code>","text":"<pre><code>network_protocol_version: int\n</code></pre> <p>Get the network protocol version of this server</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.num_players","title":"num_players  <code>property</code> <code>writable</code>","text":"<pre><code>num_players: int\n</code></pre> <p>Gets or sets the number of players online.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.remote_host","title":"remote_host  <code>property</code>","text":"<pre><code>remote_host: str\n</code></pre> <p>Get the host the ping is coming from.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.remote_port","title":"remote_port  <code>property</code>","text":"<pre><code>remote_port: int\n</code></pre> <p>Get the port the ping is coming from.</p>"},{"location":"reference/python/event/#endstone.event.ServerListPingEvent.server_guid","title":"server_guid  <code>property</code>","text":"<pre><code>server_guid: str\n</code></pre> <p>Get the unique identifier of the server.</p>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent","title":"ServerLoadEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when either the server startup or reload has completed.</p>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.STARTUP","title":"STARTUP  <code>class-attribute</code>","text":"<pre><code>STARTUP: LoadType\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.type","title":"type  <code>property</code>","text":"<pre><code>type: LoadType\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.LoadType","title":"LoadType","text":"<pre><code>LoadType(value: int)\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.LoadType.STARTUP","title":"STARTUP  <code>class-attribute</code>","text":"<pre><code>STARTUP: LoadType\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.LoadType.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ServerLoadEvent.LoadType.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/event/#endstone.event.ThunderChangeEvent","title":"ThunderChangeEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when the thunder state in a world is changing.</p>"},{"location":"reference/python/event/#endstone.event.ThunderChangeEvent.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Returns the Level where this event is occurring</p>"},{"location":"reference/python/event/#endstone.event.ThunderChangeEvent.to_thunder_state","title":"to_thunder_state  <code>property</code>","text":"<pre><code>to_thunder_state: bool\n</code></pre> <p>Gets the state of thunder that the world is being set to</p>"},{"location":"reference/python/event/#endstone.event.WeatherChangeEvent","title":"WeatherChangeEvent","text":"<p>               Bases: <code>Event</code></p> <p>Called when the weather (rain) state in a world is changing.</p>"},{"location":"reference/python/event/#endstone.event.WeatherChangeEvent.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Returns the Level where this event is occurring</p>"},{"location":"reference/python/event/#endstone.event.WeatherChangeEvent.to_weather_state","title":"to_weather_state  <code>property</code>","text":"<pre><code>to_weather_state: bool\n</code></pre> <p>Gets the state of weather that the world is being set to</p>"},{"location":"reference/python/event/#endstone.event.event_handler","title":"event_handler","text":"<pre><code>event_handler(\n    func=None,\n    *,\n    priority: EventPriority = EventPriority.NORMAL,\n    ignore_cancelled: bool = False\n)\n</code></pre>"},{"location":"reference/python/inventory/","title":"Inventory","text":""},{"location":"reference/python/inventory/#endstone.inventory","title":"endstone.inventory","text":""},{"location":"reference/python/inventory/#endstone.inventory.Inventory","title":"Inventory","text":"<p>Interface to the various inventories.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.max_stack_size","title":"max_stack_size  <code>property</code>","text":"<pre><code>max_stack_size: int\n</code></pre> <p>Returns the maximum stack size for an ItemStack in this inventory.</p>"},{"location":"reference/python/inventory/#endstone.inventory.Inventory.size","title":"size  <code>property</code>","text":"<pre><code>size: int\n</code></pre> <p>Returns the size of the inventory</p>"},{"location":"reference/python/inventory/#endstone.inventory.PlayerInventory","title":"PlayerInventory","text":"<p>               Bases: <code>Inventory</code></p> <p>Interface to the inventory of a Player, including the four armor slots and any extra slots.</p>"},{"location":"reference/python/level/","title":"Level","text":""},{"location":"reference/python/level/#endstone.level","title":"endstone.level","text":""},{"location":"reference/python/level/#endstone.level.Dimension","title":"Dimension","text":"<p>Represents a dimension within a Level.</p>"},{"location":"reference/python/level/#endstone.level.Dimension.CUSTOM","title":"CUSTOM  <code>class-attribute</code>","text":"<pre><code>CUSTOM: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.NETHER","title":"NETHER  <code>class-attribute</code>","text":"<pre><code>NETHER: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.OVERWORLD","title":"OVERWORLD  <code>class-attribute</code>","text":"<pre><code>OVERWORLD: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.THE_END","title":"THE_END  <code>class-attribute</code>","text":"<pre><code>THE_END: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.level","title":"level  <code>property</code>","text":"<pre><code>level: Level\n</code></pre> <p>Gets the level to which this dimension belongs</p>"},{"location":"reference/python/level/#endstone.level.Dimension.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this dimension</p>"},{"location":"reference/python/level/#endstone.level.Dimension.type","title":"type  <code>property</code>","text":"<pre><code>type: Type\n</code></pre> <p>Gets the type of this dimension</p>"},{"location":"reference/python/level/#endstone.level.Dimension.Type","title":"Type","text":"<pre><code>Type(value: int)\n</code></pre> <p>Represents various dimension types.</p>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.CUSTOM","title":"CUSTOM  <code>class-attribute</code>","text":"<pre><code>CUSTOM: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.NETHER","title":"NETHER  <code>class-attribute</code>","text":"<pre><code>NETHER: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.OVERWORLD","title":"OVERWORLD  <code>class-attribute</code>","text":"<pre><code>OVERWORLD: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.THE_END","title":"THE_END  <code>class-attribute</code>","text":"<pre><code>THE_END: Type\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Dimension.Type.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/level/#endstone.level.Level","title":"Level","text":""},{"location":"reference/python/level/#endstone.level.Level.actors","title":"actors  <code>property</code>","text":"<pre><code>actors: list[Actor]\n</code></pre> <p>Get a list of all actors in this level</p>"},{"location":"reference/python/level/#endstone.level.Level.dimensions","title":"dimensions  <code>property</code>","text":"<pre><code>dimensions: list[Dimension]\n</code></pre> <p>Gets a list of all dimensions within this level.</p>"},{"location":"reference/python/level/#endstone.level.Level.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the unique name of this level</p>"},{"location":"reference/python/level/#endstone.level.Level.time","title":"time  <code>property</code> <code>writable</code>","text":"<pre><code>time: int\n</code></pre> <p>Gets and sets the relative in-game time on the server</p>"},{"location":"reference/python/level/#endstone.level.Level.get_dimension","title":"get_dimension","text":"<pre><code>get_dimension(name: str) -&gt; Dimension\n</code></pre> <p>Gets the dimension with the given name.</p>"},{"location":"reference/python/level/#endstone.level.Location","title":"Location","text":"<pre><code>Location(\n    dimension: Dimension,\n    x: float,\n    y: float,\n    z: float,\n    pitch: float = 0.0,\n    yaw: float = 0.0,\n)\n</code></pre> <p>               Bases: <code>Position</code></p> <p>Represents a 3-dimensional location in a dimension within a level.</p>"},{"location":"reference/python/level/#endstone.level.Location.pitch","title":"pitch  <code>property</code> <code>writable</code>","text":"<pre><code>pitch: float\n</code></pre> <p>The pitch of this location, measured in degrees.</p>"},{"location":"reference/python/level/#endstone.level.Location.yaw","title":"yaw  <code>property</code> <code>writable</code>","text":"<pre><code>yaw: float\n</code></pre> <p>The yaw of this location, measured in degrees.</p>"},{"location":"reference/python/level/#endstone.level.Position","title":"Position","text":"<pre><code>Position(\n    dimension: Dimension, x: float, y: float, z: float\n)\n</code></pre> <p>               Bases: <code>Vector</code></p> <p>Represents a 3-dimensional position in a dimension within a level.</p>"},{"location":"reference/python/level/#endstone.level.Position.dimension","title":"dimension  <code>property</code> <code>writable</code>","text":"<pre><code>dimension: Dimension\n</code></pre> <p>The Dimension that contains this position</p>"},{"location":"reference/python/misc/","title":"Miscellaneous","text":""},{"location":"reference/python/misc/#endstone.ColorFormat","title":"endstone.ColorFormat","text":"<p>All supported color and format codes.</p>"},{"location":"reference/python/misc/#endstone.ColorFormat.AQUA","title":"AQUA  <code>class-attribute</code>","text":"<pre><code>AQUA: str = '\u00a7b'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.BLACK","title":"BLACK  <code>class-attribute</code>","text":"<pre><code>BLACK: str = '\u00a70'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.BLUE","title":"BLUE  <code>class-attribute</code>","text":"<pre><code>BLUE: str = '\u00a79'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.BOLD","title":"BOLD  <code>class-attribute</code>","text":"<pre><code>BOLD: str = '\u00a7l'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_AQUA","title":"DARK_AQUA  <code>class-attribute</code>","text":"<pre><code>DARK_AQUA: str = '\u00a73'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_BLUE","title":"DARK_BLUE  <code>class-attribute</code>","text":"<pre><code>DARK_BLUE: str = '\u00a71'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_GRAY","title":"DARK_GRAY  <code>class-attribute</code>","text":"<pre><code>DARK_GRAY: str = '\u00a78'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_GREEN","title":"DARK_GREEN  <code>class-attribute</code>","text":"<pre><code>DARK_GREEN: str = '\u00a72'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_PURPLE","title":"DARK_PURPLE  <code>class-attribute</code>","text":"<pre><code>DARK_PURPLE: str = '\u00a75'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.DARK_RED","title":"DARK_RED  <code>class-attribute</code>","text":"<pre><code>DARK_RED: str = '\u00a74'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.GOLD","title":"GOLD  <code>class-attribute</code>","text":"<pre><code>GOLD: str = '\u00a76'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.GRAY","title":"GRAY  <code>class-attribute</code>","text":"<pre><code>GRAY: str = '\u00a77'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.GREEN","title":"GREEN  <code>class-attribute</code>","text":"<pre><code>GREEN: str = '\u00a7a'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.ITALIC","title":"ITALIC  <code>class-attribute</code>","text":"<pre><code>ITALIC: str = '\u00a7o'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.LIGHT_PURPLE","title":"LIGHT_PURPLE  <code>class-attribute</code>","text":"<pre><code>LIGHT_PURPLE: str = '\u00a7d'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_AMETHYST","title":"MATERIAL_AMETHYST  <code>class-attribute</code>","text":"<pre><code>MATERIAL_AMETHYST: str = '\u00a7u'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_COPPER","title":"MATERIAL_COPPER  <code>class-attribute</code>","text":"<pre><code>MATERIAL_COPPER: str = '\u00a7n'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_DIAMOND","title":"MATERIAL_DIAMOND  <code>class-attribute</code>","text":"<pre><code>MATERIAL_DIAMOND: str = '\u00a7s'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_EMERALD","title":"MATERIAL_EMERALD  <code>class-attribute</code>","text":"<pre><code>MATERIAL_EMERALD: str = '\u00a7q'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_GOLD","title":"MATERIAL_GOLD  <code>class-attribute</code>","text":"<pre><code>MATERIAL_GOLD: str = '\u00a7p'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_IRON","title":"MATERIAL_IRON  <code>class-attribute</code>","text":"<pre><code>MATERIAL_IRON: str = '\u00a7i'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_LAPIS","title":"MATERIAL_LAPIS  <code>class-attribute</code>","text":"<pre><code>MATERIAL_LAPIS: str = '\u00a7t'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_NETHERITE","title":"MATERIAL_NETHERITE  <code>class-attribute</code>","text":"<pre><code>MATERIAL_NETHERITE: str = '\u00a7j'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_QUARTZ","title":"MATERIAL_QUARTZ  <code>class-attribute</code>","text":"<pre><code>MATERIAL_QUARTZ: str = '\u00a7h'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MATERIAL_REDSTONE","title":"MATERIAL_REDSTONE  <code>class-attribute</code>","text":"<pre><code>MATERIAL_REDSTONE: str = '\u00a7m'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.MINECOIN_GOLD","title":"MINECOIN_GOLD  <code>class-attribute</code>","text":"<pre><code>MINECOIN_GOLD: str = '\u00a7g'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.OBFUSCATED","title":"OBFUSCATED  <code>class-attribute</code>","text":"<pre><code>OBFUSCATED: str = '\u00a7k'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.RED","title":"RED  <code>class-attribute</code>","text":"<pre><code>RED: str = '\u00a7c'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.RESET","title":"RESET  <code>class-attribute</code>","text":"<pre><code>RESET: str = '\u00a7r'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.WHITE","title":"WHITE  <code>class-attribute</code>","text":"<pre><code>WHITE: str = '\u00a7f'\n</code></pre>"},{"location":"reference/python/misc/#endstone.ColorFormat.YELLOW","title":"YELLOW  <code>class-attribute</code>","text":"<pre><code>YELLOW: str = '\u00a7e'\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode","title":"endstone.GameMode","text":"<pre><code>GameMode(value: int)\n</code></pre> <p>Represents the various type of game modes that Players may have.</p>"},{"location":"reference/python/misc/#endstone.GameMode.ADVENTURE","title":"ADVENTURE  <code>class-attribute</code>","text":"<pre><code>ADVENTURE: GameMode\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.CREATIVE","title":"CREATIVE  <code>class-attribute</code>","text":"<pre><code>CREATIVE: GameMode\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.SPECTATOR","title":"SPECTATOR  <code>class-attribute</code>","text":"<pre><code>SPECTATOR: GameMode\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.SURVIVAL","title":"SURVIVAL  <code>class-attribute</code>","text":"<pre><code>SURVIVAL: GameMode\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/misc/#endstone.GameMode.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger","title":"endstone.Logger","text":"<p>Logger class which can format and output varies levels of logs.</p>"},{"location":"reference/python/misc/#endstone.Logger.CRITICAL","title":"CRITICAL  <code>class-attribute</code>","text":"<pre><code>CRITICAL: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.DEBUG","title":"DEBUG  <code>class-attribute</code>","text":"<pre><code>DEBUG: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.ERROR","title":"ERROR  <code>class-attribute</code>","text":"<pre><code>ERROR: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.INFO","title":"INFO  <code>class-attribute</code>","text":"<pre><code>INFO: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.TRACE","title":"TRACE  <code>class-attribute</code>","text":"<pre><code>TRACE: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.WARNING","title":"WARNING  <code>class-attribute</code>","text":"<pre><code>WARNING: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Get the name of this Logger instance.</p>"},{"location":"reference/python/misc/#endstone.Logger.Level","title":"Level","text":"<pre><code>Level(value: int)\n</code></pre> <p>Specifies the log level.</p>"},{"location":"reference/python/misc/#endstone.Logger.Level.CRITICAL","title":"CRITICAL  <code>class-attribute</code>","text":"<pre><code>CRITICAL: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.DEBUG","title":"DEBUG  <code>class-attribute</code>","text":"<pre><code>DEBUG: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.ERROR","title":"ERROR  <code>class-attribute</code>","text":"<pre><code>ERROR: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.INFO","title":"INFO  <code>class-attribute</code>","text":"<pre><code>INFO: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.TRACE","title":"TRACE  <code>class-attribute</code>","text":"<pre><code>TRACE: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.WARNING","title":"WARNING  <code>class-attribute</code>","text":"<pre><code>WARNING: Level\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.Level.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/misc/#endstone.Logger.critical","title":"critical","text":"<pre><code>critical(message: str) -&gt; None\n</code></pre> <p>Log a message at the CRITICAL level.</p>"},{"location":"reference/python/misc/#endstone.Logger.debug","title":"debug","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Log a message at the DEBUG level.</p>"},{"location":"reference/python/misc/#endstone.Logger.error","title":"error","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Log a message at the ERROR level.</p>"},{"location":"reference/python/misc/#endstone.Logger.info","title":"info","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Log a message at the INFO level.</p>"},{"location":"reference/python/misc/#endstone.Logger.is_enabled_for","title":"is_enabled_for","text":"<pre><code>is_enabled_for(level: Level) -&gt; bool\n</code></pre> <p>Check if the Logger instance is enabled for the given log Level.</p>"},{"location":"reference/python/misc/#endstone.Logger.set_level","title":"set_level","text":"<pre><code>set_level(level: Level) -&gt; None\n</code></pre> <p>Set the logging level for this Logger instance.</p>"},{"location":"reference/python/misc/#endstone.Logger.trace","title":"trace","text":"<pre><code>trace(message: str) -&gt; None\n</code></pre> <p>Log a message at the TRACE level.</p>"},{"location":"reference/python/misc/#endstone.Logger.warning","title":"warning","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Log a message at the WARNING level.</p>"},{"location":"reference/python/misc/#endstone.util","title":"endstone.util","text":""},{"location":"reference/python/misc/#endstone.util.SocketAddress","title":"SocketAddress","text":"<pre><code>SocketAddress()\n</code></pre> <p>Represents an IP Socket Address (hostname + port number).</p>"},{"location":"reference/python/misc/#endstone.util.SocketAddress.hostname","title":"hostname  <code>property</code>","text":"<pre><code>hostname: str\n</code></pre> <p>Gets the hostname.</p>"},{"location":"reference/python/misc/#endstone.util.SocketAddress.port","title":"port  <code>property</code>","text":"<pre><code>port: int\n</code></pre> <p>Gets the port number.</p>"},{"location":"reference/python/misc/#endstone.util.Vector","title":"Vector","text":"<pre><code>Vector()\n</code></pre> <p>Represents a 3-dimensional vector.</p>"},{"location":"reference/python/misc/#endstone.util.Vector.length","title":"length  <code>property</code>","text":"<pre><code>length: float\n</code></pre> <p>The magnitude of the Vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.length_squared","title":"length_squared  <code>property</code>","text":"<pre><code>length_squared: float\n</code></pre> <p>The squared magnitude of the Vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.x","title":"x  <code>property</code> <code>writable</code>","text":"<pre><code>x: float\n</code></pre> <p>The X component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.y","title":"y  <code>property</code> <code>writable</code>","text":"<pre><code>y: float\n</code></pre> <p>The Y component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.z","title":"z  <code>property</code> <code>writable</code>","text":"<pre><code>z: float\n</code></pre> <p>The Z component of the vector</p>"},{"location":"reference/python/misc/#endstone.util.Vector.distance","title":"distance","text":"<pre><code>distance(other: Vector) -&gt; float\n</code></pre> <p>The distance between this Vector and another</p>"},{"location":"reference/python/misc/#endstone.util.Vector.distance_squared","title":"distance_squared","text":"<pre><code>distance_squared(other: Vector) -&gt; float\n</code></pre> <p>The squared distance between this Vector and another</p>"},{"location":"reference/python/permissions/","title":"Permissions","text":""},{"location":"reference/python/permissions/#endstone.permissions","title":"endstone.permissions","text":""},{"location":"reference/python/permissions/#endstone.permissions.Permissible","title":"Permissible","text":"<p>Represents an object that may become a server operator and can be assigned permissions.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.effective_permissions","title":"effective_permissions  <code>property</code>","text":"<pre><code>effective_permissions: set[PermissionAttachmentInfo]\n</code></pre> <p>Gets effective permissions.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.is_op","title":"is_op  <code>property</code> <code>writable</code>","text":"<pre><code>is_op: bool\n</code></pre> <p>The operator status of this object</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.add_attachment","title":"add_attachment","text":"<pre><code>add_attachment(\n    plugin: Plugin, name: str, value: bool\n) -&gt; PermissionAttachment\n</code></pre> <p>Adds a new PermissionAttachment.</p> <pre><code>add_attachment(plugin: Plugin) -&gt; PermissionAttachment\n</code></pre> <p>Adds a new PermissionAttachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.has_permission","title":"has_permission","text":"<pre><code>has_permission(name: str) -&gt; bool\n</code></pre> <p>Checks if a permissions is available by name.</p> <pre><code>has_permission(perm: Permission) -&gt; bool\n</code></pre> <p>Checks if a permissions is available by permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.is_permission_set","title":"is_permission_set","text":"<pre><code>is_permission_set(name: str) -&gt; bool\n</code></pre> <p>Checks if a permissions is set by name.</p> <pre><code>is_permission_set(perm: Permission) -&gt; bool\n</code></pre> <p>Checks if a permissions is set by permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.recalculate_permissions","title":"recalculate_permissions","text":"<pre><code>recalculate_permissions() -&gt; None\n</code></pre> <p>Recalculates the permissions.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permissible.remove_attachment","title":"remove_attachment","text":"<pre><code>remove_attachment(attachment: PermissionAttachment) -&gt; bool\n</code></pre> <p>Removes a given PermissionAttachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission","title":"Permission","text":"<pre><code>Permission(\n    name: str,\n    description: str | None = None,\n    default: PermissionDefault | None = None,\n    children: dict[str, bool] | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Represents a unique permission that may be attached to a Permissible</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.children","title":"children  <code>property</code>","text":"<pre><code>children: dict[str, bool]\n</code></pre> <p>Gets the children of this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.default","title":"default  <code>property</code> <code>writable</code>","text":"<pre><code>default: PermissionDefault\n</code></pre> <p>The default value of this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.description","title":"description  <code>property</code> <code>writable</code>","text":"<pre><code>description: str\n</code></pre> <p>The brief description of this permission</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the unique fully qualified name of this Permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.permissibles","title":"permissibles  <code>property</code>","text":"<pre><code>permissibles: set[Permissible]\n</code></pre> <p>Gets a set containing every Permissible that has this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.add_parent","title":"add_parent","text":"<pre><code>add_parent(name: str, value: bool) -&gt; Permission\n</code></pre> <p>Adds this permission to the specified parent permission.</p> <pre><code>add_parent(perm: Permission, value: bool) -&gt; None\n</code></pre> <p>Adds this permission to the specified parent permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.Permission.recalculate_permissibles","title":"recalculate_permissibles","text":"<pre><code>recalculate_permissibles() -&gt; None\n</code></pre> <p>Recalculates all Permissibles that contain this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment","title":"PermissionAttachment","text":"<pre><code>PermissionAttachment(\n    plugin: Plugin, permissible: Permissible\n)\n</code></pre> <p>Holds information about a permission attachment on a Permissible object</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.permissible","title":"permissible  <code>property</code>","text":"<pre><code>permissible: Permissible\n</code></pre> <p>Gets the Permissible that this is attached to.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.permissions","title":"permissions  <code>property</code>","text":"<pre><code>permissions: dict[str, bool]\n</code></pre> <p>Gets a copy of all set permissions and values contained within this attachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre> <p>Gets the plugin responsible for this attachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.removal_callback","title":"removal_callback  <code>property</code> <code>writable</code>","text":"<pre><code>removal_callback: Callable[[PermissionAttachment], None]\n</code></pre> <p>The callback to be called when this attachment is removed.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.remove","title":"remove","text":"<pre><code>remove() -&gt; bool\n</code></pre> <p>Removes this attachment from its registered Permissible.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.set_permission","title":"set_permission","text":"<pre><code>set_permission(name: str, value: bool) -&gt; None\n</code></pre> <p>Sets a permission to the given value, by its fully qualified name.</p> <pre><code>set_permission(perm: Permission, value: bool) -&gt; None\n</code></pre> <p>Sets a permission to the given value.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachment.unset_permission","title":"unset_permission","text":"<pre><code>unset_permission(name: str) -&gt; None\n</code></pre> <p>Removes the specified permission from this attachment by name.</p> <pre><code>unset_permission(perm: Permission) -&gt; None\n</code></pre> <p>Removes the specified permission from this attachment.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo","title":"PermissionAttachmentInfo","text":"<pre><code>PermissionAttachmentInfo(\n    permissible: Permissible,\n    permission: str,\n    attachment: PermissionAttachment,\n    value: bool,\n)\n</code></pre> <p>Holds information on a permission and which PermissionAttachment provides it</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.attachment","title":"attachment  <code>property</code>","text":"<pre><code>attachment: PermissionAttachment\n</code></pre> <p>Gets the attachment providing this permission.</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.permissible","title":"permissible  <code>property</code>","text":"<pre><code>permissible: Permissible\n</code></pre> <p>Get the permissible this is attached to</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.permission","title":"permission  <code>property</code>","text":"<pre><code>permission: str\n</code></pre> <p>Gets the permission being set</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionAttachmentInfo.value","title":"value  <code>property</code>","text":"<pre><code>value: bool\n</code></pre> <p>Gets the value of this permission</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault","title":"PermissionDefault","text":"<pre><code>PermissionDefault(value: int)\n</code></pre> <p>Represents the possible default values for permissions</p>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.FALSE","title":"FALSE  <code>class-attribute</code>","text":"<pre><code>FALSE: PermissionDefault\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.NOT_OP","title":"NOT_OP  <code>class-attribute</code>","text":"<pre><code>NOT_OP: PermissionDefault\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.NOT_OPERATOR","title":"NOT_OPERATOR  <code>class-attribute</code>","text":"<pre><code>NOT_OPERATOR: PermissionDefault\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.OP","title":"OP  <code>class-attribute</code>","text":"<pre><code>OP: PermissionDefault\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.OPERATOR","title":"OPERATOR  <code>class-attribute</code>","text":"<pre><code>OPERATOR: PermissionDefault\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.TRUE","title":"TRUE  <code>class-attribute</code>","text":"<pre><code>TRUE: PermissionDefault\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/permissions/#endstone.permissions.PermissionDefault.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/player/","title":"Player","text":""},{"location":"reference/python/player/#endstone.Player","title":"endstone.Player","text":"<p>               Bases: <code>Actor</code></p> <p>Represents a player.</p>"},{"location":"reference/python/player/#endstone.Player.address","title":"address  <code>property</code>","text":"<pre><code>address: SocketAddress\n</code></pre> <p>Gets the socket address of this player</p>"},{"location":"reference/python/player/#endstone.Player.allow_flight","title":"allow_flight  <code>property</code> <code>writable</code>","text":"<pre><code>allow_flight: bool\n</code></pre> <p>If the Player is allowed to fly via jump key double-tap.</p>"},{"location":"reference/python/player/#endstone.Player.device_id","title":"device_id  <code>property</code>","text":"<pre><code>device_id: UUID\n</code></pre> <p>Get the player's current device id.</p>"},{"location":"reference/python/player/#endstone.Player.device_os","title":"device_os  <code>property</code>","text":"<pre><code>device_os: str\n</code></pre> <p>Get the player's current device's operation system (OS).</p>"},{"location":"reference/python/player/#endstone.Player.exp_level","title":"exp_level  <code>property</code> <code>writable</code>","text":"<pre><code>exp_level: int\n</code></pre> <p>Gets or sets the players current experience level.</p>"},{"location":"reference/python/player/#endstone.Player.exp_progress","title":"exp_progress  <code>property</code> <code>writable</code>","text":"<pre><code>exp_progress: float\n</code></pre> <p>Gets or sets the players current experience progress towards the next level.</p>"},{"location":"reference/python/player/#endstone.Player.fly_speed","title":"fly_speed  <code>property</code> <code>writable</code>","text":"<pre><code>fly_speed: float\n</code></pre> <p>Gets or sets the current allowed speed that a client can fly.</p>"},{"location":"reference/python/player/#endstone.Player.game_mode","title":"game_mode  <code>property</code> <code>writable</code>","text":"<pre><code>game_mode: GameMode\n</code></pre> <p>The player's current game mode.</p>"},{"location":"reference/python/player/#endstone.Player.inventory","title":"inventory  <code>property</code>","text":"<pre><code>inventory: PlayerInventory\n</code></pre> <p>Get the player's inventory.</p>"},{"location":"reference/python/player/#endstone.Player.is_flying","title":"is_flying  <code>property</code> <code>writable</code>","text":"<pre><code>is_flying: bool\n</code></pre> <p>If the player is currently flying or not.</p>"},{"location":"reference/python/player/#endstone.Player.locale","title":"locale  <code>property</code>","text":"<pre><code>locale: str\n</code></pre> <p>Get the player's current locale.</p>"},{"location":"reference/python/player/#endstone.Player.ping","title":"ping  <code>property</code>","text":"<pre><code>ping: timedelta\n</code></pre> <p>Gets the player's average ping.</p>"},{"location":"reference/python/player/#endstone.Player.total_exp","title":"total_exp  <code>property</code>","text":"<pre><code>total_exp: int\n</code></pre> <p>Gets the players total experience points.</p>"},{"location":"reference/python/player/#endstone.Player.unique_id","title":"unique_id  <code>property</code>","text":"<pre><code>unique_id: UUID\n</code></pre> <p>Returns the UUID of this player</p>"},{"location":"reference/python/player/#endstone.Player.walk_speed","title":"walk_speed  <code>property</code> <code>writable</code>","text":"<pre><code>walk_speed: float\n</code></pre> <p>Gets or sets the current allowed speed that a client can walk.</p>"},{"location":"reference/python/player/#endstone.Player.give_exp","title":"give_exp","text":"<pre><code>give_exp(amount: int) -&gt; None\n</code></pre> <p>Gives the player the amount of experience specified.</p>"},{"location":"reference/python/player/#endstone.Player.give_exp_levels","title":"give_exp_levels","text":"<pre><code>give_exp_levels(amount: int) -&gt; None\n</code></pre> <p>Gives the player the amount of experience levels specified.</p>"},{"location":"reference/python/player/#endstone.Player.kick","title":"kick","text":"<pre><code>kick(message: str) -&gt; None\n</code></pre> <p>Kicks player with custom kick message.</p>"},{"location":"reference/python/player/#endstone.Player.perform_command","title":"perform_command","text":"<pre><code>perform_command(command: str) -&gt; bool\n</code></pre> <p>Makes the player perform the given command.</p>"},{"location":"reference/python/player/#endstone.Player.send_popup","title":"send_popup","text":"<pre><code>send_popup(message: str) -&gt; None\n</code></pre> <p>Sends this player a popup message</p>"},{"location":"reference/python/player/#endstone.Player.send_tip","title":"send_tip","text":"<pre><code>send_tip(message: str) -&gt; None\n</code></pre> <p>Sends this player a tip message</p>"},{"location":"reference/python/player/#endstone.Player.update_commands","title":"update_commands","text":"<pre><code>update_commands() -&gt; None\n</code></pre> <p>Send the list of commands to the client.</p>"},{"location":"reference/python/plugin/","title":"Plugin","text":""},{"location":"reference/python/plugin/#endstone.plugin","title":"endstone.plugin","text":""},{"location":"reference/python/plugin/#endstone.plugin.Plugin","title":"Plugin","text":"<pre><code>Plugin()\n</code></pre> <p>               Bases: <code>Plugin</code></p>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.authors","title":"authors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authors = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.commands","title":"commands  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commands = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.config","title":"config  <code>property</code>","text":"<pre><code>config: dict\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.contributors","title":"contributors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contributors = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.default_permission","title":"default_permission  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_permission = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.depend","title":"depend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depend = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.load","title":"load  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>load = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.load_before","title":"load_before  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>load_before = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.permissions","title":"permissions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>permissions = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.provides","title":"provides  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>provides = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.soft_depend","title":"soft_depend  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>soft_depend = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.website","title":"website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>website = None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.get_command","title":"get_command","text":"<pre><code>get_command(name) -&gt; Optional[PluginCommand]\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.register_events","title":"register_events","text":"<pre><code>register_events(listener: object) -&gt; None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.reload_config","title":"reload_config","text":"<pre><code>reload_config() -&gt; dict\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.save_config","title":"save_config","text":"<pre><code>save_config() -&gt; None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.save_default_config","title":"save_default_config","text":"<pre><code>save_default_config() -&gt; None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.Plugin.save_resources","title":"save_resources","text":"<pre><code>save_resources(path: str, replace: bool = False) -&gt; None\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand","title":"PluginCommand","text":"<pre><code>PluginCommand(impl: PluginCommand)\n</code></pre> <p>               Bases: <code>Command</code></p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.aliases","title":"aliases  <code>property</code> <code>writable</code>","text":"<pre><code>aliases: list[str]\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.description","title":"description  <code>property</code> <code>writable</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.executor","title":"executor  <code>property</code> <code>writable</code>","text":"<pre><code>executor: CommandExecutor\n</code></pre> <p>Gets the CommandExecutor to run when parsing this command</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.permissions","title":"permissions  <code>property</code> <code>writable</code>","text":"<pre><code>permissions: list[str]\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.plugin","title":"plugin  <code>property</code>","text":"<pre><code>plugin: Plugin\n</code></pre> <p>The owner of this PluginCommand</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.registered","title":"registered  <code>property</code>","text":"<pre><code>registered: bool\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.usages","title":"usages  <code>property</code> <code>writable</code>","text":"<pre><code>usages: list[str]\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.execute","title":"execute","text":"<pre><code>execute(sender: CommandSender, args: list[str]) -&gt; bool\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.test_permission","title":"test_permission","text":"<pre><code>test_permission(target: CommandSender) -&gt; bool\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginCommand.test_permission_silently","title":"test_permission_silently","text":"<pre><code>test_permission_silently(target: CommandSender) -&gt; bool\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription","title":"PluginDescription","text":"<pre><code>PluginDescription(\n    name: str,\n    version: str,\n    description: str | None = None,\n    load: PluginLoadOrder | None = None,\n    authors: list[str] | None = None,\n    contributors: list[str] | None = None,\n    website: str | None = None,\n    prefix: str | None = None,\n    provides: list[str] | None = None,\n    depend: list[str] | None = None,\n    soft_depend: list[str] | None = None,\n    load_before: list[str] | None = None,\n    default_permission: PermissionDefault | None = None,\n    commands: list[Command] | None = None,\n    permissions: list[Permission] | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Represents the basic information about a plugin that the plugin loader needs to know.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.api_version","title":"api_version  <code>property</code>","text":"<pre><code>api_version: str\n</code></pre> <p>Gives the API version which this plugin is designed to support.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.authors","title":"authors  <code>property</code>","text":"<pre><code>authors: list[str]\n</code></pre> <p>Gives the list of authors for the plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.commands","title":"commands  <code>property</code>","text":"<pre><code>commands: list[Command]\n</code></pre> <p>Gives the list of commands the plugin will register at runtime.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.contributors","title":"contributors  <code>property</code>","text":"<pre><code>contributors: list[str]\n</code></pre> <p>Gives the list of contributors for the plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.default_permission","title":"default_permission  <code>property</code>","text":"<pre><code>default_permission: PermissionDefault\n</code></pre> <p>Gives the default value of permissions registered for the plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.depend","title":"depend  <code>property</code>","text":"<pre><code>depend: list[str]\n</code></pre> <p>Gives a list of other plugins that the plugin requires.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.description","title":"description  <code>property</code>","text":"<pre><code>description: str\n</code></pre> <p>Gives a human-friendly description of the functionality the plugin provides.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.full_name","title":"full_name  <code>property</code>","text":"<pre><code>full_name: str\n</code></pre> <p>Returns the name of a plugin, including the version.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.load","title":"load  <code>property</code>","text":"<pre><code>load: PluginLoadOrder\n</code></pre> <p>Gives the phase of server startup that the plugin should be loaded.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.load_before","title":"load_before  <code>property</code>","text":"<pre><code>load_before: list[str]\n</code></pre> <p>Gets the list of plugins that should consider this plugin a soft-dependency.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gives the name of the plugin. This name is a unique identifier for plugins.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.permissions","title":"permissions  <code>property</code>","text":"<pre><code>permissions: list[Permission]\n</code></pre> <p>Gives the list of permissions the plugin will register at runtime, immediately proceeding enabling.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.prefix","title":"prefix  <code>property</code>","text":"<pre><code>prefix: str\n</code></pre> <p>Gives the token to prefix plugin-specific logging messages with.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.provides","title":"provides  <code>property</code>","text":"<pre><code>provides: list[str]\n</code></pre> <p>Gives the list of other plugin APIs which this plugin provides. These are usable for other plugins to depend on.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.soft_depend","title":"soft_depend  <code>property</code>","text":"<pre><code>soft_depend: list[str]\n</code></pre> <p>Gives a list of other plugins that the plugin requires for full functionality.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.version","title":"version  <code>property</code>","text":"<pre><code>version: str\n</code></pre> <p>Gives the version of the plugin.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginDescription.website","title":"website  <code>property</code>","text":"<pre><code>website: str\n</code></pre> <p>Gives the plugin's or plugin's author's website.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder","title":"PluginLoadOrder","text":"<pre><code>PluginLoadOrder(value: int)\n</code></pre> <p>Represents the order in which a plugin should be initialized and enabled.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder.POSTWORLD","title":"POSTWORLD  <code>class-attribute</code>","text":"<pre><code>POSTWORLD: PluginLoadOrder\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder.STARTUP","title":"STARTUP  <code>class-attribute</code>","text":"<pre><code>STARTUP: PluginLoadOrder\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoadOrder.value","title":"value  <code>property</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader","title":"PluginLoader","text":"<pre><code>PluginLoader(server: Server)\n</code></pre> <p>Represents a plugin loader, which handles direct access to specific types of plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.server","title":"server  <code>property</code>","text":"<pre><code>server: Server\n</code></pre> <p>Retrieves the Server object associated with the PluginLoader.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.disable_plugin","title":"disable_plugin","text":"<pre><code>disable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Disables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.enable_plugin","title":"enable_plugin","text":"<pre><code>enable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Enables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginLoader.load_plugins","title":"load_plugins","text":"<pre><code>load_plugins(directory: str) -&gt; list[Plugin]\n</code></pre> <p>Loads the plugin contained within the specified directory</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager","title":"PluginManager","text":"<p>Represents a plugin manager that handles all plugins from the Server</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.permissions","title":"permissions  <code>property</code>","text":"<pre><code>permissions: set[Permission]\n</code></pre> <p>Gets a set of all registered permissions.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.plugins","title":"plugins  <code>property</code>","text":"<pre><code>plugins: list[Plugin]\n</code></pre> <p>Gets a list of all currently loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.call_event","title":"call_event","text":"<pre><code>call_event(event: Event) -&gt; None\n</code></pre> <p>Calls an event which will be passed to plugins.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.clear_plugins","title":"clear_plugins","text":"<pre><code>clear_plugins() -&gt; None\n</code></pre> <p>Disables and removes all plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.disable_plugin","title":"disable_plugin","text":"<pre><code>disable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Disables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.disable_plugins","title":"disable_plugins","text":"<pre><code>disable_plugins() -&gt; None\n</code></pre> <p>Disables all the loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.enable_plugin","title":"enable_plugin","text":"<pre><code>enable_plugin(plugin: Plugin) -&gt; None\n</code></pre> <p>Enables the specified plugin</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.enable_plugins","title":"enable_plugins","text":"<pre><code>enable_plugins() -&gt; None\n</code></pre> <p>Enable all the loaded plugins</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_default_perm_subscriptions","title":"get_default_perm_subscriptions","text":"<pre><code>get_default_perm_subscriptions(\n    op: bool,\n) -&gt; set[Permissible]\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given default list, by op status.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_default_permissions","title":"get_default_permissions","text":"<pre><code>get_default_permissions(op: bool) -&gt; set[Permission]\n</code></pre> <p>Gets the default permissions for the given op status.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_permission","title":"get_permission","text":"<pre><code>get_permission(name: str) -&gt; Permission\n</code></pre> <p>Gets a Permission from its fully qualified name.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_permission_subscriptions","title":"get_permission_subscriptions","text":"<pre><code>get_permission_subscriptions(\n    permission: str,\n) -&gt; set[Permissible]\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.get_plugin","title":"get_plugin","text":"<pre><code>get_plugin(name: str) -&gt; Plugin\n</code></pre> <p>Checks if the given plugin is loaded and returns it when applicable.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.is_plugin_enabled","title":"is_plugin_enabled","text":"<pre><code>is_plugin_enabled(plugin: str) -&gt; bool\n</code></pre> <p>Checks if the given plugin is enabled or not</p> <pre><code>is_plugin_enabled(plugin: Plugin) -&gt; bool\n</code></pre> <p>Checks if the given plugin is enabled or not</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.load_plugins","title":"load_plugins","text":"<pre><code>load_plugins(directory: str) -&gt; list[Plugin]\n</code></pre> <p>Loads the plugin contained within the specified directory</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.recalculate_permission_defaults","title":"recalculate_permission_defaults","text":"<pre><code>recalculate_permission_defaults(perm: Permission) -&gt; None\n</code></pre> <p>Recalculates the defaults for the given Permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.register_event","title":"register_event","text":"<pre><code>register_event(\n    name: str,\n    executor: Callable[[Event], None],\n    priority: EventPriority,\n    plugin: Plugin,\n    ignore_cancelled: bool,\n) -&gt; None\n</code></pre> <p>Registers the given event</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.remove_permission","title":"remove_permission","text":"<pre><code>remove_permission(perm: Permission) -&gt; None\n</code></pre> <p>Removes a Permission registration from this plugin manager by permission object.</p> <pre><code>remove_permission(name: str) -&gt; None\n</code></pre> <p>Removes a Permission registration from this plugin manager by name.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.subscribe_to_default_perms","title":"subscribe_to_default_perms","text":"<pre><code>subscribe_to_default_perms(\n    op: bool, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Subscribes to the given Default permissions by operator status.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.subscribe_to_permission","title":"subscribe_to_permission","text":"<pre><code>subscribe_to_permission(\n    permission: str, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Subscribes the given Permissible for information about the requested Permission.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.unsubscribe_from_default_perms","title":"unsubscribe_from_default_perms","text":"<pre><code>unsubscribe_from_default_perms(\n    op: bool, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Unsubscribes from the given Default permissions by operator status.</p>"},{"location":"reference/python/plugin/#endstone.plugin.PluginManager.unsubscribe_from_permission","title":"unsubscribe_from_permission","text":"<pre><code>unsubscribe_from_permission(\n    permission: str, permissible: Permissible\n) -&gt; None\n</code></pre> <p>Unsubscribes the given Permissible for information about the requested Permission.</p>"},{"location":"reference/python/scheduler/","title":"Scheduler","text":""},{"location":"reference/python/scheduler/#endstone.scheduler","title":"endstone.scheduler","text":""},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler","title":"Scheduler","text":"<p>Represents a scheduler that executes various tasks</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.cancel_task","title":"cancel_task","text":"<pre><code>cancel_task(id: int) -&gt; None\n</code></pre> <p>Removes task from scheduler.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.cancel_tasks","title":"cancel_tasks","text":"<pre><code>cancel_tasks(plugin: Plugin) -&gt; None\n</code></pre> <p>Removes all tasks associated with a particular plugin from the scheduler.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.get_pending_tasks","title":"get_pending_tasks","text":"<pre><code>get_pending_tasks() -&gt; list[Task]\n</code></pre> <p>Returns a vector of all pending tasks.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.is_queued","title":"is_queued","text":"<pre><code>is_queued(id: int) -&gt; bool\n</code></pre> <p>Check if the task queued to be run later.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.is_running","title":"is_running","text":"<pre><code>is_running(id: int) -&gt; bool\n</code></pre> <p>Check if the task currently running.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.run_task","title":"run_task","text":"<pre><code>run_task(plugin: Plugin, task: Callable[[], None]) -&gt; Task\n</code></pre> <p>Returns a task that will be executed synchronously on the next server tick.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.run_task_later","title":"run_task_later","text":"<pre><code>run_task_later(\n    plugin: Plugin, task: Callable[[], None], delay: int\n) -&gt; Task\n</code></pre> <p>Returns a task that will be executed synchronously after the specified number of server ticks.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Scheduler.run_task_timer","title":"run_task_timer","text":"<pre><code>run_task_timer(\n    plugin: Plugin,\n    task: Callable[[], None],\n    delay: int,\n    period: int,\n) -&gt; Task\n</code></pre> <p>Returns a task that will be executed repeatedly until cancelled, starting after the specified number of server ticks.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task","title":"Task","text":"<p>Represents a task being executed by the scheduler</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.is_cancelled","title":"is_cancelled  <code>property</code>","text":"<pre><code>is_cancelled: bool\n</code></pre> <p>Returns true if the task has been cancelled.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.is_sync","title":"is_sync  <code>property</code>","text":"<pre><code>is_sync: bool\n</code></pre> <p>Returns true if the task is run by server thread.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: Plugin\n</code></pre> <p>Returns the Plugin that owns the task.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.task_id","title":"task_id  <code>property</code>","text":"<pre><code>task_id: int\n</code></pre> <p>Returns the task id.</p>"},{"location":"reference/python/scheduler/#endstone.scheduler.Task.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; None\n</code></pre> <p>Attempts to cancel this task.</p>"},{"location":"reference/python/server/","title":"Server","text":""},{"location":"reference/python/server/#endstone.Server","title":"endstone.Server","text":"<p>Represents a server implementation.</p>"},{"location":"reference/python/server/#endstone.Server.command_sender","title":"command_sender  <code>property</code>","text":"<pre><code>command_sender: CommandSender\n</code></pre> <p>Gets a CommandSender for this server.</p>"},{"location":"reference/python/server/#endstone.Server.levels","title":"levels  <code>property</code>","text":"<pre><code>levels: list[Level]\n</code></pre> <p>Gets a list of all levels on this server.</p>"},{"location":"reference/python/server/#endstone.Server.logger","title":"logger  <code>property</code>","text":"<pre><code>logger: Logger\n</code></pre> <p>Returns the primary logger associated with this server instance.</p>"},{"location":"reference/python/server/#endstone.Server.max_players","title":"max_players  <code>property</code> <code>writable</code>","text":"<pre><code>max_players: int\n</code></pre> <p>The maximum amount of players which can login to this server.</p>"},{"location":"reference/python/server/#endstone.Server.minecraft_version","title":"minecraft_version  <code>property</code>","text":"<pre><code>minecraft_version: str\n</code></pre> <p>Gets the Minecraft version that this server is running.</p>"},{"location":"reference/python/server/#endstone.Server.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Gets the name of this server implementation.</p>"},{"location":"reference/python/server/#endstone.Server.online_players","title":"online_players  <code>property</code>","text":"<pre><code>online_players: list[Player]\n</code></pre> <p>Gets a list of all currently online players.</p>"},{"location":"reference/python/server/#endstone.Server.plugin_manager","title":"plugin_manager  <code>property</code>","text":"<pre><code>plugin_manager: PluginManager\n</code></pre> <p>Gets the plugin manager for interfacing with plugins.</p>"},{"location":"reference/python/server/#endstone.Server.scheduler","title":"scheduler  <code>property</code>","text":"<pre><code>scheduler: Scheduler\n</code></pre> <p>Gets the scheduler for managing scheduled events.</p>"},{"location":"reference/python/server/#endstone.Server.version","title":"version  <code>property</code>","text":"<pre><code>version: str\n</code></pre> <p>Gets the version of this server implementation.</p>"},{"location":"reference/python/server/#endstone.Server.broadcast","title":"broadcast","text":"<pre><code>broadcast(message: str, permission: str) -&gt; None\n</code></pre> <p>Broadcasts the specified message to every user with the given permission name.</p>"},{"location":"reference/python/server/#endstone.Server.broadcast_message","title":"broadcast_message","text":"<pre><code>broadcast_message(message: str) -&gt; None\n</code></pre> <p>Broadcasts the specified message to every user with permission endstone.broadcast.user</p>"},{"location":"reference/python/server/#endstone.Server.dispatch_command","title":"dispatch_command","text":"<pre><code>dispatch_command(\n    sender: CommandSender, command: str\n) -&gt; bool\n</code></pre> <p>Dispatches a command on this server, and executes it if found.</p>"},{"location":"reference/python/server/#endstone.Server.get_level","title":"get_level","text":"<pre><code>get_level(name: str) -&gt; Level\n</code></pre> <p>Gets the level with the given name.</p>"},{"location":"reference/python/server/#endstone.Server.get_player","title":"get_player","text":"<pre><code>get_player(name: str) -&gt; Player\n</code></pre> <p>Gets the player with the exact given name, case insensitive.</p> <pre><code>get_player(unique_id: UUID) -&gt; Player\n</code></pre> <p>Gets the player with the given UUID.</p>"},{"location":"reference/python/server/#endstone.Server.get_plugin_command","title":"get_plugin_command","text":"<pre><code>get_plugin_command(name: str) -&gt; PluginCommand\n</code></pre> <p>Gets a PluginCommand with the given name or alias.</p>"},{"location":"tutorials/create-your-first-plugin/","title":"Create your first plugin","text":""},{"location":"tutorials/create-your-first-plugin/#prerequisites","title":"Prerequisites","text":"Python C++ <p>To develop your first plugin with the Python API, you will have to install the following prerequisites:</p> <ul> <li>JetBrains PyCharm</li> <li>Python (&gt;= 3.9)</li> <li>endstone Python package</li> </ul> <p>To develop your first plugin with the C++ API, you will have to install the following prerequisites:</p> <ul> <li>JetBrains CLion</li> <li>CMake (&gt;= 3.15)</li> <li>C++ Compiler<ul> <li> Windows: Visual Studio 2017 or newer</li> <li> Linux: LLVM Toolchain 5 or newer with Clang and libc++</li> </ul> </li> </ul>"},{"location":"tutorials/create-your-first-plugin/#create-a-new-project","title":"Create a new project","text":"Python C++ <p>When you start up PyCharm, you will see this welcome screen:</p> <p></p> <p>Click on New Project</p> <p></p> <p>Let's say you want to name your plugin MyPlugin. In Endstone plugin development, we follow the following  naming convention:</p> <ol> <li>Use <code>lower-case-with-dash</code> for project name</li> <li>Prefix your project name with <code>endstone-</code></li> </ol> <p>Hence, you should put <code>endstone-my-plugin</code> in the Name field.</p> <p>Then, in the Interpreter type, select Custom environment. Select Select existing, and set the path to  where you previously installed <code>endstone</code> as stated in the prerequisites.</p> <p>Finally, click on Create. The PyCharm workspace will pop up and you will see this.</p> <p></p> <p>Tip</p> <p>Endstone server requires its plugins to be installed in the same Python environment. A virtual environment is strongly recommanded.</p> <p>When you start up CLion, you will see this welcome screen:</p> <p></p> <p>Click on New Project</p> <p></p> <p>In the side bar, select C++ Library. Select C++ 17 for Language standard.  Select shared for Library type. Click on Create. The CLion workspace will pop up and you will see this.</p> <p></p>"},{"location":"tutorials/create-your-first-plugin/#check-your-dependencies","title":"Check your dependencies","text":"<p>In the last step, you selected the existing interpreter where <code>endstone</code> package is installed. For now, that's the only dependency we need for a simple plugin. To check its installation, click on the  icon on the side bar to open the terminal and type: <pre><code>pip show endstone\n</code></pre></p> <p>You show see something like this: <pre><code>Name: endstone\nVersion: 0.4.2\nSummary: Endstone offers a plugin API for Bedrock Dedicated Servers, supporting both Python and C++.\nHome-page:\nAuthor:\nAuthor-email: Vincent Wu &lt;magicdroidx@gmail.com&gt;\nLicense: Apache License\n</code></pre></p>"},{"location":"tutorials/create-your-first-plugin/#create-pyprojecttoml","title":"Create <code>pyproject.toml</code>","text":"<p>Modern Python packages can contain a <code>pyproject.toml</code> file, first introduced in PEP 518. This file contains build  system requirements and information, which are used by pip to build the package.</p> <p>Now, right click on the project folder and select New &gt; File to create a <code>pyproject.toml</code>. </p> <p> </p> <p>Copy the following content and paste into the file. pyproject.toml<pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"endstone-my-plugin\"\nversion = \"0.1.0\"\n</code></pre></p> <p>Notice</p> <p>The name field should always be the project name. It must start with <code>endstone-</code> which is enforced by the  plugin loader. The name should also use <code>lower-case-with-dash</code> style.</p>"},{"location":"tutorials/create-your-first-plugin/#file-structure","title":"File structure","text":"<p>From the project view in the side bar, you will notice that CLion created a few files for us.</p> <ul> <li><code>.clang-format</code>: The configuration file for ClangFormat</li> <li><code>CMakeLists.txt</code>: The manifest file for CMake build system</li> <li><code>library.cpp</code>: Source file</li> <li><code>library.h</code>: Header file</li> </ul> <p>Delete <code>library.cpp</code> and <code>library.h</code> as we don't need them. You can keep the <code>.clang-format</code> and  <code>CMakeLists.txt</code>.</p>"},{"location":"tutorials/create-your-first-plugin/#update-cmakeliststxt","title":"Update <code>CMakeLists.txt</code>","text":"<p>Now, open the <code>CMakeLists.txt</code> in the side bar and delete all the existing content.  Then, copy and paste the following into your <code>CMakeLists.txt</code>.</p> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.15)\n\nproject(endstone_my_plugin CXX)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(FetchContent)\nFetchContent_Declare(\n    endstone\n    GIT_REPOSITORY https://github.com/EndstoneMC/endstone.git\n    GIT_TAG main #(1)!\n)\nFetchContent_MakeAvailable(endstone)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\") #(2)!\n    add_compile_definitions(_ITERATOR_DEBUG_LEVEL=0)\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++ -fPIC\")\n    link_libraries(-static-libgcc -static-libstdc++ libc++.a libc++abi.a)\nendif ()\n</code></pre> <ol> <li> This will use the latest development version of Endstone. Consider use a release tag (e.g. <code>v0.4.0</code>) instead of <code>main</code>.</li> <li> The following lines are necessary for ensuring ABI compatibility with the Bedrock Dedicated Server (BDS).</li> </ol>"},{"location":"tutorials/create-your-first-plugin/#create-the-main-plugin-class","title":"Create the main plugin class","text":"Python C++ <p>Now, right click on the project folder and select New &gt; Directory to create a <code>src</code> directory. </p> <p>Right click on the <code>src</code> directory you just created and select Mark Directory as &gt; Sources Root. You will notice the colour of the icon changes to blue.</p> <p>Right click again on the <code>src</code> directory and select New &gt; Python Package to create a package for our plugin.  Since my project name is <code>endstone-my-plugin</code>, I will name the package <code>endstone_my_plugin</code>.</p> <p>You should have something similar to this:</p> <p></p> <p>Tip</p> <p>For Python packages, it is a common practice to use <code>lower-case-with-dash</code> for project name and  <code>lower_case_with_underscore</code> for the package name. See PEP 8 for the style guide for Python.</p> <p>Right click on the package you just created and select New &gt; Python File to create a <code>my_plugin.py</code>. Create a class named <code>MyPlugin</code> which extends the <code>Plugin</code> class from <code>endstone.plugin</code>.</p> src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    pass\n</code></pre> <p>Then, open the <code>__init__.py</code> under the same folder and import the <code>MyPlugin</code> class from the Python file and add it  to the <code>__all__</code> variable.</p> src/endstone_my_plugin/__init__.py<pre><code>from endstone_my_plugin.my_plugin import MyPlugin\n\n__all__ = [\"MyPlugin\"]\n</code></pre> <p>Now, create two files: <code>src/my_plugin.cpp</code> and <code>include/my_plugin.h</code>.</p> <p>Open <code>CMakeLists.txt</code> and add a new target.</p> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.15)\n\nproject(endstone_my_plugin CXX)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(FetchContent)\nFetchContent_Declare(\n    endstone\n    GIT_REPOSITORY https://github.com/EndstoneMC/endstone.git\n    GIT_TAG main\n)\nFetchContent_MakeAvailable(endstone)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    add_compile_definitions(_ITERATOR_DEBUG_LEVEL=0)\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++ -fPIC\")\n    link_libraries(-static-libgcc -static-libstdc++ libc++.a libc++abi.a)\nendif ()\n\nadd_library(${PROJECT_NAME} SHARED src/my_plugin.cpp)\ntarget_include_directories(${PROJECT_NAME} PUBLIC include)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE endstone::headers)\n</code></pre> <p>You should have something similar to this:</p> <p></p> <p>Open <code>include/my_plugin.h</code> and add a new class <code>MyPlugin</code> which extends the <code>endstone::Plugin</code> class.</p> include/my_plugin.h<pre><code>#include \"endstone/plugin/plugin.h\"\n\nclass MyPlugin : public endstone::Plugin {};\n</code></pre> <p>Then, in <code>src/my_plugin.cpp</code>, include the header file.</p> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n</code></pre>"},{"location":"tutorials/create-your-first-plugin/#add-methods","title":"Add methods","text":"Python C++ <p>Now we want to override a few methods from the base class:</p> <ul> <li><code>on_load</code>: this will be called when the plugin is loaded by the server</li> <li><code>on_enable</code>: this will be called when the plugin is enabled</li> <li><code>on_disable</code>: this will be called when the plugin is disabled (e.g. during server shutdown)</li> </ul> <p>You can use the logger to log a message when the plugin is loaded, enabled and disabled like below:</p> src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    def on_load(self) -&gt; None:\n        self.logger.info(\"on_load is called!\")\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n\n    def on_disable(self) -&gt; None:\n        self.logger.info(\"on_disable is called!\")\n</code></pre> <p>Now we want to override a few methods from the base class:</p> <ul> <li><code>onLoad</code>: this will be called when the plugin is loaded by the server</li> <li><code>onEnable</code>: this will be called when the plugin is enabled</li> <li><code>onDisable</code>: this will be called when the plugin is disabled (e.g. during server shutdown)</li> </ul> <p>You can use the logger to log a message when the plugin is loaded, enabled and disabled like below:</p> include/my_plugin.h<pre><code>#include \"endstone/plugin/plugin.h\"\n\nclass MyPlugin : public endstone::Plugin {\npublic:\n    void onLoad() override\n    {\n        getLogger().info(\"onLoad is called\");\n    }\n\n    void onEnable() override\n    {\n        getLogger().info(\"onEnable is called\");\n    }\n\n    void onDisable() override\n    {\n        getLogger().info(\"onDisable is called\");\n    }\n};\n</code></pre>"},{"location":"tutorials/create-your-first-plugin/#configure-plugin-metadata","title":"Configure plugin metadata","text":"Python C++ <p>Now, the plugin is almost finished. Let's tell the server about our name, version, description and the compatible  API version.</p> src/endstone_my_plugin/my_plugin.py<pre><code>from endstone.plugin import Plugin\n\nclass MyPlugin(Plugin):\n    name = \"MyPlugin\"\n    version = \"0.1.0\"\n    api_version = \"0.4\"\n    description = \"My first Python plugin for Endstone servers!\"\n\n    def on_load(self) -&gt; None:\n        self.logger.info(\"on_load is called!\")\n\n    def on_enable(self) -&gt; None:\n        self.logger.info(\"on_enable is called!\")\n\n    def on_disable(self) -&gt; None:\n        self.logger.info(\"on_disable is called!\")\n</code></pre> <p>Lastly, to have the plugin discoverable by the server, you must specify an entry point in <code>pyproject.toml</code>.</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"endstone-my-plugin\"\nversion = \"0.1.0\"\n\n[project.entry-points.\"endstone\"]\nmy-plugin = \"endstone_my_plugin:MyPlugin\"\n</code></pre> <p>Notice</p> <p>For the entry point, the name must be the name of your project without the <code>endstone-</code> prefix. For example, our project name is <code>endstone-my-plugin</code> so the entry point's name should be <code>my-plugin</code>. The value is simply  <code>{module}:{class}</code>.</p> <p>Now, the plugin is almost finished. Let's tell the server about our name, version, main class and the description.</p> src/my_plugin.cpp<pre><code>#include \"my_plugin.h\"\n\nENDSTONE_PLUGIN(/*(1)!*/\"MyPlugin\", /*(2)!*/\"0.1.0\", /*(3)!*/MyPlugin)\n{\n    description = \"My first C++ plugin for Endstone servers\";\n}\n</code></pre> <ol> <li> This is the plugin name!</li> <li> This is the plugin version!</li> <li> This is the main class of the plugin!</li> </ol>"},{"location":"tutorials/install-your-plugin/","title":"Install your plugin","text":"<p>Before installing your first plugin, you will need to build it.</p>  Python C++ <p>Click on the  icon on the side bar to open the  terminal and type:</p> <pre><code>pip install pipx\npipx run build --wheel\n</code></pre> <p>You should see something like this in your console:</p> <p></p> <p>Then, copy the built wheel package <code>endstone_my_plugin.whl</code> under the <code>dist</code> folder to the plugins folder <code>path/to/bedrock_server/plugins</code>.</p> <p>Click on the menu icon on the top bar and select Build &gt; Build Project  to build your plugin.</p> <p></p> <p>Then, copy the built shared library <code>endstone_my_plugin.dll</code> to the plugins  folder <code>path/to/bedrock_server/plugins</code>.</p> <p>Now, start your server again. You should see your plugin has been successfully loaded.</p> <p></p> <p> Congratulations! You've made your first plugin for Endstone servers!</p>"},{"location":"tutorials/publish-your-plugin/","title":"Publish your plugin","text":"Python C++ <p>TODO</p> <p>TODO</p>"},{"location":"tutorials/register-commands/","title":"Register commands","text":"Python C++ <p>TODO</p> <p>TODO</p>"},{"location":"tutorials/register-event-listeners/","title":"Register event listeners","text":"Python C++ <p>TODO</p> <p>TODO</p>"},{"location":"tutorials/schedule-tasks/","title":"Schedule tasks","text":"Python C++ <p>TODO</p> <p>TODO</p>"},{"location":"tutorials/use-color-codes/","title":"Use color codes","text":"<p>Color codes are used to customize the color and formatting of text in the game, such as on signs, in chat, in titles, in forms and more. These color codes are represented by the section sign (<code>\u00a7</code>) followed by a character. Each character represents a different color or formatting option. Endstone wants to make it easy to use them, that is why an easy to use api is provided.</p>"},{"location":"tutorials/use-color-codes/#usage","title":"Usage","text":"Python C++ <p>This code shows how easy it is to use colored text in endstone:</p> <pre><code>from endstone import ColorFormat\n\nmy_beautiful_text = f\"This is {ColorFormat.YELLOW}yellow, {ColorFormat.AQUA}aqua and {ColorFormat.GOLD}gold{ColorFormat.RESET}.\"\n</code></pre> <p>Pythons f-strings are awesome.</p> <p>Tip</p> <p>Don't forget to end the colored text with <code>ColorFormat.RESET</code>, it ends all extra color format options and resets them. </p> <p>This code shows how easy it is to use colored text in endstone:</p> <pre><code>#include &lt;endstone/color_format.h&gt;\n\nauto my_beautiful_text = \"This is \" + endstone::ColorFormat::DarkGreen + \"dark green.\" + endstone::ColorFormat::Reset;\n</code></pre> <p>Tip</p> <p>Don't forget to end the colored text with <code>endstone::ColorFormat::Reset</code>, it ends all extra color format options and resets them. </p>"},{"location":"tutorials/use-color-codes/#all-color-and-format-codes","title":"All color and format codes","text":"Code Name <code>\u00a70</code> black <code>\u00a71</code> dark_blue <code>\u00a72</code> dark_green <code>\u00a73</code> dark_aqua <code>\u00a74</code> dark_red <code>\u00a75</code> dark_purple <code>\u00a76</code> gold <code>\u00a77</code> gray <code>\u00a78</code> dark_gray <code>\u00a79</code> blue <code>\u00a7a</code> green <code>\u00a7b</code> aqua <code>\u00a7c</code> red <code>\u00a7d</code> light_purple <code>\u00a7e</code> yellow <code>\u00a7f</code> white <code>\u00a7g</code> minecoin_gold <code>\u00a7h</code> material_quartz <code>\u00a7i</code> material_iron <code>\u00a7j</code> material_netherite <code>\u00a7k</code> obfuscated <code>\u00a7l</code> bold <code>\u00a7m</code> material_redstone <code>\u00a7n</code> material_copper <code>\u00a7o</code> italic <code>\u00a7p</code> material_gold <code>\u00a7q</code> material_emerald <code>\u00a7r</code> reset <code>\u00a7s</code> material_diamond <code>\u00a7t</code> material_lapis <code>\u00a7u</code> material_amethyst"},{"location":"reference/cpp/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace endstone <ul> <li>class Actor Represents a base actor in the level. </li> <li>class ActorDeathEvent Called when an Actor dies. </li> <li>class ActorEvent Represents an Actor-related event. </li> <li>class ActorRemoveEvent Called when an Actor is removed. </li> <li>class ActorSpawnEvent Called when an Actor is spawned into a world. </li> <li>class BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast . </li> <li>struct ColorFormat All supported color and format codes. </li> <li>class Command Represents a Command , which executes various tasks upon user input. </li> <li>class CommandExecutor Represents a class which contains a single method for executing commands. </li> <li>class CommandMap Represents a command map that manages all commands of the Server . </li> <li>class CommandSender Represents a command sender. </li> <li>class Dimension Represents a dimension within a Level . </li> <li>class Event Represents an event. </li> <li>class EventHandler Represents a registered EventHandler which associates with aPlugin . </li> <li>class HandlerList A list of event handlers. Should be instantiated on a per event basis. </li> <li>class Inventory Interface to the various inventories. </li> <li>class Level Represents a level, which may contain actors, chunks and blocks. </li> <li>class Location Represents a 3-dimensional location in a dimension within a level. </li> <li>class Logger Logger class which can format and output varies levels of logs. </li> <li>class Permissible Represents an object that may become a server operator and can be assigned permissions. </li> <li>class Permission Represents a unique permission that may be attached to a Permissible . </li> <li>class PermissionAttachment Holds information about a permission attachment on a Permissible object. </li> <li>class PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it. </li> <li>class Player Represents a player. </li> <li>class PlayerChatEvent Called when a player sends a chat message. </li> <li>class PlayerCommandEvent Called whenever a player runs a command. </li> <li>class PlayerDeathEvent Called when a Player dies. </li> <li>class PlayerEvent Represents a player related event. </li> <li>class PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots.</li> <li>class PlayerJoinEvent Called when a player joins a server. </li> <li>class PlayerLoginEvent Called when a player attempts to login in. </li> <li>class PlayerQuitEvent Called when a player leaves a server. </li> <li>class Plugin Represents a Plugin . </li> <li>class PluginCommand Represents a Command belonging to aPlugin . </li> <li>class PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. </li> <li>class PluginDisableEvent Called when a plugin is disabled. </li> <li>class PluginEnableEvent Called when a plugin is enabled. </li> <li>class PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. </li> <li>class PluginManager Represents a plugin manager that handles all plugins from the Server . </li> <li>class Position Represents a 3-dimensional position in a dimension within a level. </li> <li>class Scheduler Represents a scheduler that executes various tasks. </li> <li>class Server Represents a server implementation. </li> <li>class ServerCommandEvent Called when the console runs a command, early in the process. </li> <li>class ServerEvent Represents an Server-related event. </li> <li>class ServerListPingEvent Called when a server ping is coming in. </li> <li>class ServerLoadEvent Called when either the server startup or reload has completed. </li> <li>class SocketAddress Represents an IP Socket Address (hostname + port number). </li> <li>class Task Represents a task being executed by the scheduler. </li> <li>class ThunderChangeEvent Called when the thunder state in a world is changing. </li> <li>class Translatable Represents an object with a text representation that can be translated by the Minecraft client. </li> <li>class UUID Implementation of Universally Unique Identifier ( UUID ) </li> <li>class Vector Represents a 3-dimensional vector. </li> <li>class WeatherChangeEvent Called when the weather (rain) state in a world is changing. </li> <li>class WeatherEvent Represents a Weather-related event. </li> </ul> </li> <li>namespace std <ul> <li>struct hash&lt; endstone::UUID &gt; </li> </ul> </li> </ul>"},{"location":"reference/cpp/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir include <ul> <li>dir endstone <ul> <li>file color_format.h </li> <li>file endstone.h </li> <li>file game_mode.h </li> <li>dir actor <ul> <li>file actor.h </li> </ul> </li> <li>dir command <ul> <li>file command.h </li> <li>file command_executor.h </li> <li>file command_map.h </li> <li>file command_sender.h </li> <li>file plugin_command.h </li> </ul> </li> <li>dir event <ul> <li>file event.h </li> <li>file event_handler.h </li> <li>file event_priority.h </li> <li>file handler_list.h </li> <li>dir actor <ul> <li>file actor_death_event.h </li> <li>file actor_event.h </li> <li>file actor_remove_event.h </li> <li>file actor_spawn_event.h </li> </ul> </li> <li>dir player <ul> <li>file player_chat_event.h </li> <li>file player_command_event.h </li> <li>file player_death_event.h </li> <li>file player_event.h </li> <li>file player_join_event.h </li> <li>file player_login_event.h </li> <li>file player_quit_event.h </li> </ul> </li> <li>dir server <ul> <li>file broadcast_message_event.h </li> <li>file plugin_disable_event.h </li> <li>file plugin_enable_event.h </li> <li>file server_command_event.h </li> <li>file server_event.h </li> <li>file server_list_ping_event.h </li> <li>file server_load_event.h </li> </ul> </li> <li>dir weather <ul> <li>file thunder_change_event.h </li> <li>file weather_change_event.h </li> <li>file weather_event.h </li> </ul> </li> </ul> </li> <li>dir inventory <ul> <li>file inventory.h </li> <li>file player_inventory.h </li> </ul> </li> <li>dir level <ul> <li>file dimension.h </li> <li>file level.h </li> <li>file location.h </li> <li>file position.h </li> </ul> </li> <li>dir permissions <ul> <li>file permissible.h </li> <li>file permission.h </li> <li>file permission_attachment.h </li> <li>file permission_attachment_info.h </li> <li>file permission_default.h </li> </ul> </li> <li>dir plugin <ul> <li>file plugin.h </li> <li>file plugin_description.h </li> <li>file plugin_load_order.h </li> <li>file plugin_loader.h </li> <li>file plugin_manager.h </li> </ul> </li> <li>dir scheduler <ul> <li>file scheduler.h </li> <li>file task.h </li> </ul> </li> <li>dir util <ul> <li>file socket_address.h </li> <li>file uuid.h </li> <li>file vector.h </li> </ul> </li> <li>file logger.h </li> <li>file player.h </li> <li>file server.h </li> <li>file translatable.h </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cpp/namespaceendstone/","title":"Namespace endstone","text":"<p>Namespace List &gt; endstone</p>"},{"location":"reference/cpp/namespaceendstone/#classes","title":"Classes","text":"Type Name class Actor Represents a base actor in the level. class ActorDeathEvent Called when an Actor dies. class ActorEvent Represents an Actor-related event. class ActorRemoveEvent Called when an Actor is removed. class ActorSpawnEvent Called when an Actor is spawned into a world. class BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast . struct ColorFormat All supported color and format codes. class Command Represents a Command , which executes various tasks upon user input. class CommandExecutor Represents a class which contains a single method for executing commands. class CommandMap Represents a command map that manages all commands of the Server . class CommandSender Represents a command sender. class Dimension Represents a dimension within a Level . class Event Represents an event. class EventHandler Represents a registered EventHandler which associates with aPlugin . class HandlerList A list of event handlers. Should be instantiated on a per event basis. class Inventory Interface to the various inventories. class Level Represents a level, which may contain actors, chunks and blocks. class Location Represents a 3-dimensional location in a dimension within a level. class Logger Logger class which can format and output varies levels of logs. class Permissible Represents an object that may become a server operator and can be assigned permissions. class Permission Represents a unique permission that may be attached to a Permissible . class PermissionAttachment Holds information about a permission attachment on a Permissible object. class PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it. class Player Represents a player. class PlayerChatEvent Called when a player sends a chat message. class PlayerCommandEvent Called whenever a player runs a command. class PlayerDeathEvent Called when a Player dies. class PlayerEvent Represents a player related event. class PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots. class PlayerJoinEvent Called when a player joins a server. class PlayerLoginEvent Called when a player attempts to login in. class PlayerQuitEvent Called when a player leaves a server. class Plugin Represents a Plugin . class PluginCommand Represents a Command belonging to aPlugin . class PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. class PluginDisableEvent Called when a plugin is disabled. class PluginEnableEvent Called when a plugin is enabled. class PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. class PluginManager Represents a plugin manager that handles all plugins from the Server . class Position Represents a 3-dimensional position in a dimension within a level. class Scheduler Represents a scheduler that executes various tasks. class Server Represents a server implementation. class ServerCommandEvent Called when the console runs a command, early in the process. class ServerEvent Represents an Server-related event. class ServerListPingEvent Called when a server ping is coming in. class ServerLoadEvent Called when either the server startup or reload has completed. class SocketAddress Represents an IP Socket Address (hostname + port number). class Task Represents a task being executed by the scheduler. class ThunderChangeEvent Called when the thunder state in a world is changing. class Translatable Represents an object with a text representation that can be translated by the Minecraft client. class UUID Implementation of Universally Unique Identifier ( UUID ) class Vector &lt;typename T&gt;Represents a 3-dimensional vector. class WeatherChangeEvent Called when the weather (rain) state in a world is changing. class WeatherEvent Represents a Weather-related event."},{"location":"reference/cpp/namespaceendstone/#public-types","title":"Public Types","text":"Type Name enum EventPriority Represents an event's priority in execution. enum GameMode Represents the various type of game modes that Players may have. enum PermissionDefault Represents the possible default values for permissions. typedef std::function&lt; void(const PermissionAttachment &amp;)&gt; PermissionRemovedExecutor enum PluginLoadOrder Represents the order in which a plugin should be initialized and enabled. typedef std::uint32_t TaskId"},{"location":"reference/cpp/namespaceendstone/#public-functions","title":"Public Functions","text":"Type Name std::size_t hash_value (UUID const &amp; u) noexcept bool operator!= (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&lt; (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&lt;= (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator== (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&gt; (UUID const &amp; lhs, UUID const &amp; rhs) noexcept bool operator&gt;= (UUID const &amp; lhs, UUID const &amp; rhs) noexcept void swap (UUID &amp; lhs, UUID &amp; rhs) noexcept"},{"location":"reference/cpp/namespaceendstone/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/namespaceendstone/#enum-eventpriority","title":"enum EventPriority","text":"<p>Represents an event's priority in execution. <pre><code>enum endstone::EventPriority {\n    Lowest = 0,\n    Low = 1,\n    Normal = 2,\n    High = 3,\n    Highest = 4,\n    Monitor = 5\n};\n</code></pre></p> <p>Listeners with lower priority are called first will listeners with higher priority are called last. Listeners are called in following order: LOWEST -&gt; LOW -&gt; NORMAL -&gt; HIGH -&gt; HIGHEST -&gt; MONITOR </p>"},{"location":"reference/cpp/namespaceendstone/#enum-gamemode","title":"enum GameMode","text":"<pre><code>enum endstone::GameMode {\n    Survival = 0,\n    Creative = 1,\n    Adventure = 2,\n    Spectator = 3\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-permissiondefault","title":"enum PermissionDefault","text":"<pre><code>enum endstone::PermissionDefault {\n    True,\n    False,\n    Operator,\n    NotOperator\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#typedef-permissionremovedexecutor","title":"typedef PermissionRemovedExecutor","text":"<pre><code>using endstone::PermissionRemovedExecutor = typedef std::function&lt;void(const PermissionAttachment &amp;)&gt;;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#enum-pluginloadorder","title":"enum PluginLoadOrder","text":"<pre><code>enum endstone::PluginLoadOrder {\n    Startup,\n    PostWorld\n};\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#typedef-taskid","title":"typedef TaskId","text":"<pre><code>using endstone::TaskId = typedef std::uint32_t;\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/namespaceendstone/#function-hash_value","title":"function hash_value","text":"<pre><code>inline std::size_t endstone::hash_value (\n    UUID const &amp; u\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator","title":"function operator!=","text":"<pre><code>inline bool endstone::operator!= (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_1","title":"function operator&lt;","text":"<pre><code>inline bool endstone::operator&lt; (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_2","title":"function operator&lt;=","text":"<pre><code>inline bool endstone::operator&lt;= (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_3","title":"function operator==","text":"<pre><code>inline bool endstone::operator== (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_4","title":"function operator&gt;","text":"<pre><code>inline bool endstone::operator&gt; (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-operator_5","title":"function operator&gt;=","text":"<pre><code>inline bool endstone::operator&gt;= (\n    UUID const &amp; lhs,\n    UUID const &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/namespaceendstone/#function-swap","title":"function swap","text":"<pre><code>inline void endstone::swap (\n    UUID &amp; lhs,\n    UUID &amp; rhs\n) noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Actor/","title":"Class endstone::Actor","text":"<p>ClassList &gt; endstone &gt; Actor</p> <p>Represents a base actor in the level. </p> <ul> <li><code>#include &lt;endstone/actor/actor.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandSender</p> <p>Inherited by the following classes: endstone::Player</p>"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions","title":"Public Functions","text":"Type Name Actor () = default Actor (const Actor &amp;) = delete Actor (Actor &amp;&amp;) = delete virtual Dimension &amp; getDimension () const = 0 virtual Level &amp; getLevel () const = 0 virtual Location getLocation () const = 0 virtual std::uint64_t getRuntimeId () const = 0 virtual Vector&lt; float &gt; getVelocity () const = 0 virtual bool isInLava () const = 0 virtual bool isInWater () const = 0 virtual bool isOnGround () const = 0 Actor &amp; operator= (const Actor &amp;) = delete Actor &amp; operator= (Actor &amp;&amp;) = delete ~Actor () override"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name CommandSender () = default virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual CommandSender * asConsole () constGets a CommandSender as Console. virtual Player * asPlayer () constGets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const std::string &amp; message) const = 0Sends this sender a error message. virtual void sendErrorMessage (const Translatable &amp; message) const = 0Sends this sender a translatable error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const std::string &amp; message) const = 0Sends this sender a message. virtual void sendMessage (const Translatable &amp; message) const = 0Sends this sender a translatable message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const ~CommandSender () override"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0 virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0 virtual CommandSender * asCommandSender () const = 0 virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0 virtual bool hasPermission (std::string name) const = 0 virtual bool hasPermission (const Permission &amp; perm) const = 0 virtual bool isOp () const = 0Checks if this object is a server operator. virtual bool isPermissionSet (std::string name) const = 0 virtual bool isPermissionSet (const Permission &amp; perm) const = 0 virtual void recalculatePermissions () = 0 virtual bool removeAttachment (PermissionAttachment &amp; attachment) = 0 virtual void setOp (bool value) = 0Sets the operator status of this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Actor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Actor/#function-actor-13","title":"function Actor [\u2153]","text":"<pre><code>endstone::Actor::Actor () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-actor-23","title":"function Actor [\u2154]","text":"<pre><code>endstone::Actor::Actor (\n    const Actor &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-actor-33","title":"function Actor [3/3]","text":"<pre><code>endstone::Actor::Actor (\n    Actor &amp;&amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getdimension","title":"function getDimension","text":"<pre><code>virtual Dimension &amp; endstone::Actor::getDimension () const = 0\n</code></pre> <p>Gets the current Dimension this actor resides in</p> <p>Returns:</p> <p>The current Dimension this actor resides in </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getlevel","title":"function getLevel","text":"<pre><code>virtual Level &amp; endstone::Actor::getLevel () const = 0\n</code></pre> <p>Gets the current Level this actor resides in</p> <p>Returns:</p> <p>The current Level this actor resides in </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getlocation","title":"function getLocation","text":"<pre><code>virtual Location endstone::Actor::getLocation () const = 0\n</code></pre> <p>Gets the actor's current position</p> <p>Returns:</p> <p>a new copy of Location containing the position of this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getruntimeid","title":"function getRuntimeId","text":"<pre><code>virtual std::uint64_t endstone::Actor::getRuntimeId () const = 0\n</code></pre> <p>Returns the runtime id for this actor</p> <p>Returns:</p> <p>Runtime id for this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-getvelocity","title":"function getVelocity","text":"<pre><code>virtual Vector &lt; float &gt; endstone::Actor::getVelocity () const = 0\n</code></pre> <p>Gets this actor's current velocity</p> <p>Returns:</p> <p>Current traveling velocity of this actor </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isinlava","title":"function isInLava","text":"<pre><code>virtual bool endstone::Actor::isInLava () const = 0\n</code></pre> <p>Returns true if the actor is in lava.</p> <p>Returns:</p> <p>True if the actor is in lava. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isinwater","title":"function isInWater","text":"<pre><code>virtual bool endstone::Actor::isInWater () const = 0\n</code></pre> <p>Returns true if the actor is in water.</p> <p>Returns:</p> <p>True if the actor is in water. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-isonground","title":"function isOnGround","text":"<pre><code>virtual bool endstone::Actor::isOnGround () const = 0\n</code></pre> <p>Returns true if the actor is supported by a block.</p> <p>Returns:</p> <p>True if actor is on ground. </p>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-operator","title":"function operator=","text":"<pre><code>Actor &amp; endstone::Actor::operator= (\n    const Actor &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-operator_1","title":"function operator=","text":"<pre><code>Actor &amp; endstone::Actor::operator= (\n    Actor &amp;&amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Actor/#function-actor","title":"function ~Actor","text":"<pre><code>endstone::Actor::~Actor () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/","title":"Class endstone::ActorDeathEvent","text":"<p>ClassList &gt; endstone &gt; ActorDeathEvent</p> <p>Called when an Actor dies.</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_death_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorEvent</p> <p>Inherited by the following classes: endstone::PlayerDeathEvent</p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ActorDeathEvent\""},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions","title":"Public Functions","text":"Type Name ActorDeathEvent (Actor &amp; actor)  virtual std::string getEventName () override const virtual bool isCancellable () override const ~ActorDeathEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (Actor &amp; actor)  Actor &amp; getActor () const ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorDeathEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-actordeathevent","title":"function ActorDeathEvent","text":"<pre><code>inline explicit endstone::ActorDeathEvent::ActorDeathEvent (\n    Actor &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorDeathEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ActorDeathEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorDeathEvent/#function-actordeathevent_1","title":"function ~ActorDeathEvent","text":"<pre><code>endstone::ActorDeathEvent::~ActorDeathEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_death_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/","title":"Class endstone::ActorEvent","text":"<p>ClassList &gt; endstone &gt; ActorEvent</p> <p>Represents an Actor-related event. </p> <ul> <li><code>#include &lt;endstone/event/actor/actor_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::ActorDeathEvent,  endstone::ActorRemoveEvent,  endstone::ActorSpawnEvent</p>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#public-functions","title":"Public Functions","text":"Type Name ActorEvent (Actor &amp; actor)  Actor &amp; getActor () const ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorEvent/#function-actorevent","title":"function ActorEvent","text":"<pre><code>inline explicit endstone::ActorEvent::ActorEvent (\n    Actor &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#function-getactor","title":"function getActor","text":"<pre><code>inline Actor &amp; endstone::ActorEvent::getActor () const\n</code></pre> <p>Returns the Actor involved in this event</p> <p>Returns:</p> <p>Actor which is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1ActorEvent/#function-actorevent_1","title":"function ~ActorEvent","text":"<pre><code>endstone::ActorEvent::~ActorEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/","title":"Class endstone::ActorRemoveEvent","text":"<p>ClassList &gt; endstone &gt; ActorRemoveEvent</p> <p>Called when an Actor is removed.More...</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_remove_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorEvent</p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ActorRemoveEvent\""},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions","title":"Public Functions","text":"Type Name ActorRemoveEvent (Actor &amp; actor)  virtual std::string getEventName () override const virtual bool isCancellable () override const ~ActorRemoveEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (Actor &amp; actor)  Actor &amp; getActor () const ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#detailed-description","title":"Detailed Description","text":"<p>This event should only be used for monitoring. Modifying the actor during or after this event leads to undefined behaviours. This event will not be called for Players. </p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorRemoveEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#function-actorremoveevent","title":"function ActorRemoveEvent","text":"<pre><code>inline explicit endstone::ActorRemoveEvent::ActorRemoveEvent (\n    Actor &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorRemoveEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ActorRemoveEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorRemoveEvent/#function-actorremoveevent_1","title":"function ~ActorRemoveEvent","text":"<pre><code>endstone::ActorRemoveEvent::~ActorRemoveEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_remove_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/","title":"Class endstone::ActorSpawnEvent","text":"<p>ClassList &gt; endstone &gt; ActorSpawnEvent</p> <p>Called when an Actor is spawned into a world.More...</p> <ul> <li><code>#include &lt;endstone/event/actor/actor_spawn_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorEvent</p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ActorSpawnEvent\""},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions","title":"Public Functions","text":"Type Name ActorSpawnEvent (Actor &amp; actor)  virtual std::string getEventName () override const virtual bool isCancellable () override const ~ActorSpawnEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (Actor &amp; actor)  Actor &amp; getActor () const ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#detailed-description","title":"Detailed Description","text":"<p>If an Actor Spawn event is cancelled, the actor will not spawn. </p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ActorSpawnEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-actorspawnevent","title":"function ActorSpawnEvent","text":"<pre><code>inline explicit endstone::ActorSpawnEvent::ActorSpawnEvent (\n    Actor &amp; actor\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ActorSpawnEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ActorSpawnEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1ActorSpawnEvent/#function-actorspawnevent_1","title":"function ~ActorSpawnEvent","text":"<pre><code>endstone::ActorSpawnEvent::~ActorSpawnEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_spawn_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/","title":"Class endstone::BroadcastMessageEvent","text":"<p>ClassList &gt; endstone &gt; BroadcastMessageEvent</p> <p>Event triggered for server broadcast messages such as fromServer::broadcast .More...</p> <ul> <li><code>#include &lt;endstone/event/server/broadcast_message_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"BroadcastMessageEvent\""},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions","title":"Public Functions","text":"Type Name BroadcastMessageEvent (bool async, std::string message, std::unordered_set&lt; const CommandSender * &gt; recipients)  virtual std::string getEventName () override const const std::string &amp; getMessage () const const std::unordered_set&lt; const CommandSender * &gt; &amp; getRecipients () const virtual bool isCancellable () override const void setMessage (std::string message)"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#detailed-description","title":"Detailed Description","text":"<p>This event should be async if fired from an async thread. </p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::BroadcastMessageEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-broadcastmessageevent","title":"function BroadcastMessageEvent","text":"<pre><code>inline endstone::BroadcastMessageEvent::BroadcastMessageEvent (\n    bool async,\n    std::string message,\n    std::unordered_set&lt; const CommandSender * &gt; recipients\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::BroadcastMessageEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-getmessage","title":"function getMessage","text":"<pre><code>inline const std::string &amp; endstone::BroadcastMessageEvent::getMessage () const\n</code></pre> <p>Get the message to broadcast.</p> <p>Returns:</p> <p>Message to broadcast </p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-getrecipients","title":"function getRecipients","text":"<pre><code>inline const std::unordered_set&lt; const CommandSender * &gt; &amp; endstone::BroadcastMessageEvent::getRecipients () const\n</code></pre> <p>Gets a set of recipients that this broadcast message will be displayed to.</p> <p>Returns:</p> <p>All CommandSenders who will see this broadcast message </p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::BroadcastMessageEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1BroadcastMessageEvent/#function-setmessage","title":"function setMessage","text":"<pre><code>inline void endstone::BroadcastMessageEvent::setMessage (\n    std::string message\n) \n</code></pre> <p>Set the message to broadcast.</p> <p>Parameters:</p> <ul> <li><code>message</code> New message to broadcast </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/broadcast_message_event.h</code></p>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/","title":"Struct endstone::ColorFormat","text":"<p>ClassList &gt; endstone &gt; ColorFormat</p> <p>All supported color and format codes. </p> <ul> <li><code>#include &lt;endstone/color_format.h&gt;</code></li> </ul>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string Aqua   = = Escape + 'b' const std::string Black   = = Escape + '0' const std::string Blue   = = Escape + '9' const std::string Bold   = = Escape + 'l' const std::string DarkAqua   = = Escape + '3' const std::string DarkBlue   = = Escape + '1' const std::string DarkGray   = = Escape + '8' const std::string DarkGreen   = = Escape + '2' const std::string DarkPurple   = = Escape + '5' const std::string DarkRed   = = Escape + '4' const std::string Escape   = = \"\u00a7\" const std::string Gold   = = Escape + '6' const std::string Gray   = = Escape + '7' const std::string Green   = = Escape + 'a' const std::string Italic   = = Escape + 'o' const std::string LightPurple   = = Escape + 'd' const std::string MaterialAmethyst   = = Escape + 'u' const std::string MaterialCopper   = = Escape + 'n' const std::string MaterialDiamond   = = Escape + 's' const std::string MaterialEmerald   = = Escape + 'q' const std::string MaterialGold   = = Escape + 'p' const std::string MaterialIron   = = Escape + 'i' const std::string MaterialLapis   = = Escape + 't' const std::string MaterialNetherite   = = Escape + 'j' const std::string MaterialQuartz   = = Escape + 'h' const std::string MaterialRedstone   = = Escape + 'm' const std::string MinecoinGold   = = Escape + 'g' const std::string Obfuscated   = = Escape + 'k' const std::string Red   = = Escape + 'c' const std::string Reset   = = Escape + 'r' const std::string White   = = Escape + 'f' const std::string Yellow   = = Escape + 'e'"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-aqua","title":"variable Aqua","text":"<pre><code>const std::string endstone::ColorFormat::Aqua;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-black","title":"variable Black","text":"<pre><code>const std::string endstone::ColorFormat::Black;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-blue","title":"variable Blue","text":"<pre><code>const std::string endstone::ColorFormat::Blue;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-bold","title":"variable Bold","text":"<pre><code>const std::string endstone::ColorFormat::Bold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkaqua","title":"variable DarkAqua","text":"<pre><code>const std::string endstone::ColorFormat::DarkAqua;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkblue","title":"variable DarkBlue","text":"<pre><code>const std::string endstone::ColorFormat::DarkBlue;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkgray","title":"variable DarkGray","text":"<pre><code>const std::string endstone::ColorFormat::DarkGray;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkgreen","title":"variable DarkGreen","text":"<pre><code>const std::string endstone::ColorFormat::DarkGreen;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkpurple","title":"variable DarkPurple","text":"<pre><code>const std::string endstone::ColorFormat::DarkPurple;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-darkred","title":"variable DarkRed","text":"<pre><code>const std::string endstone::ColorFormat::DarkRed;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-escape","title":"variable Escape","text":"<pre><code>const std::string endstone::ColorFormat::Escape;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-gold","title":"variable Gold","text":"<pre><code>const std::string endstone::ColorFormat::Gold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-gray","title":"variable Gray","text":"<pre><code>const std::string endstone::ColorFormat::Gray;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-green","title":"variable Green","text":"<pre><code>const std::string endstone::ColorFormat::Green;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-italic","title":"variable Italic","text":"<pre><code>const std::string endstone::ColorFormat::Italic;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-lightpurple","title":"variable LightPurple","text":"<pre><code>const std::string endstone::ColorFormat::LightPurple;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialamethyst","title":"variable MaterialAmethyst","text":"<pre><code>const std::string endstone::ColorFormat::MaterialAmethyst;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialcopper","title":"variable MaterialCopper","text":"<pre><code>const std::string endstone::ColorFormat::MaterialCopper;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialdiamond","title":"variable MaterialDiamond","text":"<pre><code>const std::string endstone::ColorFormat::MaterialDiamond;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialemerald","title":"variable MaterialEmerald","text":"<pre><code>const std::string endstone::ColorFormat::MaterialEmerald;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialgold","title":"variable MaterialGold","text":"<pre><code>const std::string endstone::ColorFormat::MaterialGold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialiron","title":"variable MaterialIron","text":"<pre><code>const std::string endstone::ColorFormat::MaterialIron;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materiallapis","title":"variable MaterialLapis","text":"<pre><code>const std::string endstone::ColorFormat::MaterialLapis;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialnetherite","title":"variable MaterialNetherite","text":"<pre><code>const std::string endstone::ColorFormat::MaterialNetherite;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialquartz","title":"variable MaterialQuartz","text":"<pre><code>const std::string endstone::ColorFormat::MaterialQuartz;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-materialredstone","title":"variable MaterialRedstone","text":"<pre><code>const std::string endstone::ColorFormat::MaterialRedstone;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-minecoingold","title":"variable MinecoinGold","text":"<pre><code>const std::string endstone::ColorFormat::MinecoinGold;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-obfuscated","title":"variable Obfuscated","text":"<pre><code>const std::string endstone::ColorFormat::Obfuscated;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-red","title":"variable Red","text":"<pre><code>const std::string endstone::ColorFormat::Red;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-reset","title":"variable Reset","text":"<pre><code>const std::string endstone::ColorFormat::Reset;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-white","title":"variable White","text":"<pre><code>const std::string endstone::ColorFormat::White;\n</code></pre>"},{"location":"reference/cpp/structendstone_1_1ColorFormat/#variable-yellow","title":"variable Yellow","text":"<pre><code>const std::string endstone::ColorFormat::Yellow;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/color_format.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Command/","title":"Class endstone::Command","text":"<p>ClassList &gt; endstone &gt; Command</p> <p>Represents a Command , which executes various tasks upon user input.</p> <ul> <li><code>#include &lt;endstone/command/command.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::PluginCommand</p>"},{"location":"reference/cpp/classendstone_1_1Command/#public-functions","title":"Public Functions","text":"Type Name Command (std::string name, std::string description=\"\", std::vector&lt; std::string &gt; usages={}, std::vector&lt; std::string &gt; aliases={}, std::vector&lt; std::string &gt; permissions={})  virtual PluginCommand * asPluginCommand ()  virtual bool execute (CommandSender &amp; sender, const std::vector&lt; std::string &gt; &amp; args) const std::vector&lt; std::string &gt; getAliases () const std::string getDescription () const std::string getName () const std::vector&lt; std::string &gt; getPermissions () const std::vector&lt; std::string &gt; getUsages () const bool isRegistered () const bool registerTo (CommandMap &amp; command_map)  void setAliases (Alias... aliases)  void setDescription (std::string description)  void setName (std::string name)  void setPermissions (Permission... permissions)  void setUsages (Usage... usages)  bool testPermission (const CommandSender &amp; target) const bool testPermissionSilently (const CommandSender &amp; target) const bool unregisterFrom (CommandMap &amp; command_map)  virtual ~Command () = default"},{"location":"reference/cpp/classendstone_1_1Command/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Command/#function-command","title":"function Command","text":"<pre><code>inline explicit endstone::Command::Command (\n    std::string name,\n    std::string description=\"\",\n    std::vector&lt; std::string &gt; usages={},\n    std::vector&lt; std::string &gt; aliases={},\n    std::vector&lt; std::string &gt; permissions={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Command/#function-asplugincommand","title":"function asPluginCommand","text":"<pre><code>inline virtual PluginCommand * endstone::Command::asPluginCommand () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Command/#function-execute","title":"function execute","text":"<pre><code>inline virtual bool endstone::Command::execute (\n    CommandSender &amp; sender,\n    const std::vector&lt; std::string &gt; &amp; args\n) const\n</code></pre> <p>Executes the command, returning its success</p> <p>Parameters:</p> <ul> <li><code>sender</code> Source of the command </li> <li><code>args</code> Arguments passed to the command </li> </ul> <p>Returns:</p> <p>true if the execution was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getaliases","title":"function getAliases","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::Command::getAliases () const\n</code></pre> <p>Returns a list of aliases of this command</p> <p>Returns:</p> <p>List of aliases </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getdescription","title":"function getDescription","text":"<pre><code>inline std::string endstone::Command::getDescription () const\n</code></pre> <p>Gets a brief description of this command</p> <p>Returns:</p> <p>Description of this command </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getname","title":"function getName","text":"<pre><code>inline std::string endstone::Command::getName () const\n</code></pre> <p>Returns the name of this command</p> <p>Returns:</p> <p>Name of this command </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getpermissions","title":"function getPermissions","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::Command::getPermissions () const\n</code></pre> <p>Gets the permissions required by users to be able to perform this command</p> <p>Returns:</p> <p>List of permission names, or empty if none </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-getusages","title":"function getUsages","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::Command::getUsages () const\n</code></pre> <p>Returns a list of usages of this command</p> <p>Returns:</p> <p>List of usages </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-isregistered","title":"function isRegistered","text":"<pre><code>inline bool endstone::Command::isRegistered () const\n</code></pre> <p>Returns the current registered state of this command</p> <p>Returns:</p> <p>true if this command is currently registered false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-registerto","title":"function registerTo","text":"<pre><code>inline bool endstone::Command::registerTo (\n    CommandMap &amp; command_map\n) \n</code></pre> <p>Registers this command to a CommandMap.</p> <p>Parameters:</p> <ul> <li><code>command_map</code> the CommandMap to register to </li> </ul> <p>Returns:</p> <p>true if the registration was successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setaliases","title":"function setAliases","text":"<pre><code>template&lt;typename... Alias&gt;\ninline void endstone::Command::setAliases (\n    Alias... aliases\n) \n</code></pre> <p>Sets the list of aliases to request on registration for this command.</p> <p>Parameters:</p> <ul> <li><code>aliases</code> aliases to register to this command </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setdescription","title":"function setDescription","text":"<pre><code>inline void endstone::Command::setDescription (\n    std::string description\n) \n</code></pre> <p>Sets a brief description of this command.</p> <p>Parameters:</p> <ul> <li><code>description</code> new command description </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setname","title":"function setName","text":"<pre><code>inline void endstone::Command::setName (\n    std::string name\n) \n</code></pre> <p>Sets the name of this command.</p> <p>May only be used before registering the command.</p> <p>Parameters:</p> <ul> <li><code>name</code> New command name </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setpermissions","title":"function setPermissions","text":"<pre><code>template&lt;typename... Permission&gt;\ninline void endstone::Command::setPermissions (\n    Permission... permissions\n) \n</code></pre> <p>Sets the permissions required by users to be able to perform this command</p> <p>Parameters:</p> <ul> <li><code>permissions</code> List of permission names </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-setusages","title":"function setUsages","text":"<pre><code>template&lt;typename... Usage&gt;\ninline void endstone::Command::setUsages (\n    Usage... usages\n) \n</code></pre> <p>Sets the usages of this command</p> <p>Parameters:</p> <ul> <li><code>usages</code> List of usages </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Command/#function-testpermission","title":"function testPermission","text":"<pre><code>inline bool endstone::Command::testPermission (\n    const CommandSender &amp; target\n) const\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command. If they do not have permission, they will be informed that they cannot do this.</p> <p>Parameters:</p> <ul> <li><code>target</code> User to test </li> </ul> <p>Returns:</p> <p>true if they can use it, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-testpermissionsilently","title":"function testPermissionSilently","text":"<pre><code>inline bool endstone::Command::testPermissionSilently (\n    const CommandSender &amp; target\n) const\n</code></pre> <p>Tests the given CommandSender to see if they can perform this command. No error is sent to the sender.</p> <p>Parameters:</p> <ul> <li><code>target</code> User to test </li> </ul> <p>Returns:</p> <p>true if they can use it, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-unregisterfrom","title":"function unregisterFrom","text":"<pre><code>inline bool endstone::Command::unregisterFrom (\n    CommandMap &amp; command_map\n) \n</code></pre> <p>Unregisters this command from a CommandMap</p> <p>Parameters:</p> <ul> <li><code>command_map</code> the CommandMap to unregister from </li> </ul> <p>Returns:</p> <p>true if the unregistration was successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Command/#function-command_1","title":"function ~Command","text":"<pre><code>virtual endstone::Command::~Command () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/","title":"Class endstone::CommandExecutor","text":"<p>ClassList &gt; endstone &gt; CommandExecutor</p> <p>Represents a class which contains a single method for executing commands. </p> <ul> <li><code>#include &lt;endstone/command/command_executor.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::Plugin</p>"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#public-functions","title":"Public Functions","text":"Type Name virtual bool onCommand (CommandSender &amp; sender, const Command &amp; command, const std::vector&lt; std::string &gt; &amp; args)  virtual ~CommandExecutor () = default"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#function-oncommand","title":"function onCommand","text":"<pre><code>inline virtual bool endstone::CommandExecutor::onCommand (\n    CommandSender &amp; sender,\n    const Command &amp; command,\n    const std::vector&lt; std::string &gt; &amp; args\n) \n</code></pre> <p>Executes the given command, returning its success.</p> <p>Parameters:</p> <ul> <li><code>sender</code> Source of the command </li> <li><code>command</code> Command which was executed </li> <li><code>args</code> Passed command arguments </li> </ul> <p>Returns:</p> <p>true if the execution is successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1CommandExecutor/#function-commandexecutor","title":"function ~CommandExecutor","text":"<pre><code>virtual endstone::CommandExecutor::~CommandExecutor () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_executor.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/","title":"Class endstone::CommandMap","text":"<p>ClassList &gt; endstone &gt; CommandMap</p> <p>Represents a command map that manages all commands of the Server .</p> <ul> <li><code>#include &lt;endstone/command/command_map.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#public-functions","title":"Public Functions","text":"Type Name CommandMap () = default CommandMap (const CommandMap &amp;) = delete CommandMap (CommandMap &amp;&amp;) = default virtual void clearCommands () = 0 virtual Command * getCommand (std::string name) const = 0 CommandMap &amp; operator= (const CommandMap &amp;) = delete CommandMap &amp; operator= (CommandMap &amp;&amp;) = default virtual bool registerCommand (std::shared_ptr&lt; Command &gt; command) = 0 virtual ~CommandMap () = default"},{"location":"reference/cpp/classendstone_1_1CommandMap/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap-13","title":"function CommandMap [\u2153]","text":"<pre><code>endstone::CommandMap::CommandMap () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap-23","title":"function CommandMap [\u2154]","text":"<pre><code>endstone::CommandMap::CommandMap (\n    const CommandMap &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap-33","title":"function CommandMap [3/3]","text":"<pre><code>endstone::CommandMap::CommandMap (\n    CommandMap &amp;&amp;\n) = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-clearcommands","title":"function clearCommands","text":"<pre><code>virtual void endstone::CommandMap::clearCommands () = 0\n</code></pre> <p>Clears all registered commands. </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-getcommand","title":"function getCommand","text":"<pre><code>virtual Command * endstone::CommandMap::getCommand (\n    std::string name\n) const = 0\n</code></pre> <p>Gets the command registered to the specified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the command to retrieve </li> </ul> <p>Returns:</p> <p>Command with the specified name or nullptr if a command with that label doesn't exist </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-operator","title":"function operator=","text":"<pre><code>CommandMap &amp; endstone::CommandMap::operator= (\n    const CommandMap &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-operator_1","title":"function operator=","text":"<pre><code>CommandMap &amp; endstone::CommandMap::operator= (\n    CommandMap &amp;&amp;\n) = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-registercommand","title":"function registerCommand","text":"<pre><code>virtual bool endstone::CommandMap::registerCommand (\n    std::shared_ptr&lt; Command &gt; command\n) = 0\n</code></pre> <p>Registers a command.</p> <p>Parameters:</p> <ul> <li><code>command</code> the command to register </li> </ul> <p>Returns:</p> <p>true on success, false if a command with the same name is already registered </p>"},{"location":"reference/cpp/classendstone_1_1CommandMap/#function-commandmap","title":"function ~CommandMap","text":"<pre><code>virtual endstone::CommandMap::~CommandMap () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_map.h</code></p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/","title":"Class endstone::CommandSender","text":"<p>ClassList &gt; endstone &gt; CommandSender</p> <p>Represents a command sender. </p> <ul> <li><code>#include &lt;endstone/command/command_sender.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Permissible</p> <p>Inherited by the following classes: endstone::Actor</p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#public-functions","title":"Public Functions","text":"Type Name CommandSender () = default virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual CommandSender * asConsole () constGets a CommandSender as Console. virtual Player * asPlayer () constGets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const std::string &amp; message) const = 0Sends this sender a error message. virtual void sendErrorMessage (const Translatable &amp; message) const = 0Sends this sender a translatable error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const std::string &amp; message) const = 0Sends this sender a message. virtual void sendMessage (const Translatable &amp; message) const = 0Sends this sender a translatable message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const ~CommandSender () override"},{"location":"reference/cpp/classendstone_1_1CommandSender/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0 virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0 virtual CommandSender * asCommandSender () const = 0 virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0 virtual bool hasPermission (std::string name) const = 0 virtual bool hasPermission (const Permission &amp; perm) const = 0 virtual bool isOp () const = 0Checks if this object is a server operator. virtual bool isPermissionSet (std::string name) const = 0 virtual bool isPermissionSet (const Permission &amp; perm) const = 0 virtual void recalculatePermissions () = 0 virtual bool removeAttachment (PermissionAttachment &amp; attachment) = 0 virtual void setOp (bool value) = 0Sets the operator status of this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1CommandSender/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-commandsender","title":"function CommandSender","text":"<pre><code>endstone::CommandSender::CommandSender () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-ascommandsender","title":"function asCommandSender","text":"<p>Casts a Permissible asCommandSender . <pre><code>inline virtual CommandSender * endstone::CommandSender::asCommandSender () override const\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a CommandSender </p> <p>Implements endstone::Permissible::asCommandSender</p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-asconsole","title":"function asConsole","text":"<p>Gets a CommandSender as Console. <pre><code>inline virtual CommandSender * endstone::CommandSender::asConsole () const\n</code></pre></p> <p>Returns:</p> <p>CommandSender, nullptr if not a Console </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-asplayer","title":"function asPlayer","text":"<p>Gets a CommandSender asPlayer . <pre><code>inline virtual Player * endstone::CommandSender::asPlayer () const\n</code></pre></p> <p>Returns:</p> <p>Player, nullptr if not a Player </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-getname","title":"function getName","text":"<p>Gets the name of this command sender. <pre><code>virtual std::string endstone::CommandSender::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Name of the sender </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-getserver","title":"function getServer","text":"<p>Returns the server instance that this command is running on. <pre><code>virtual Server &amp; endstone::CommandSender::getServer () const = 0\n</code></pre></p> <p>Returns:</p> <p>Server instance </p>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-senderrormessage-13","title":"function sendErrorMessage [\u2153]","text":"<p>Sends this sender a error message. <pre><code>virtual void endstone::CommandSender::sendErrorMessage (\n    const std::string &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Error message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-senderrormessage-23","title":"function sendErrorMessage [\u2154]","text":"<p>Sends this sender a translatable error message. <pre><code>virtual void endstone::CommandSender::sendErrorMessage (\n    const Translatable &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Error message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-senderrormessage-33","title":"function sendErrorMessage [3/3]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::CommandSender::sendErrorMessage (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-sendmessage-13","title":"function sendMessage [\u2153]","text":"<p>Sends this sender a message. <pre><code>virtual void endstone::CommandSender::sendMessage (\n    const std::string &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-sendmessage-23","title":"function sendMessage [\u2154]","text":"<p>Sends this sender a translatable message. <pre><code>virtual void endstone::CommandSender::sendMessage (\n    const Translatable &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-sendmessage-33","title":"function sendMessage [3/3]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::CommandSender::sendMessage (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1CommandSender/#function-commandsender_1","title":"function ~CommandSender","text":"<pre><code>endstone::CommandSender::~CommandSender () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_sender.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Dimension/","title":"Class endstone::Dimension","text":"<p>ClassList &gt; endstone &gt; Dimension</p> <p>Represents a dimension within a Level .</p> <ul> <li><code>#include &lt;endstone/level/dimension.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Dimension/#public-types","title":"Public Types","text":"Type Name enum Type Represents various dimension types."},{"location":"reference/cpp/classendstone_1_1Dimension/#public-functions","title":"Public Functions","text":"Type Name virtual Level &amp; getLevel () const = 0Gets the level to which this dimension belongs. virtual std::string getName () const = 0Gets the name of this dimension. virtual Type getType () const = 0Gets the type of this dimension. virtual ~Dimension () = default"},{"location":"reference/cpp/classendstone_1_1Dimension/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Dimension/#enum-type","title":"enum Type","text":"<pre><code>enum endstone::Dimension::Type {\n    Overworld = 0,\n    Nether = 1,\n    TheEnd = 2,\n    Custom = 999\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Dimension/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getlevel","title":"function getLevel","text":"<p>Gets the level to which this dimension belongs. <pre><code>virtual Level &amp; endstone::Dimension::getLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Level containing this dimension. </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-getname","title":"function getName","text":"<p>Gets the name of this dimension. <pre><code>virtual std::string endstone::Dimension::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Name of this dimension </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-gettype","title":"function getType","text":"<p>Gets the type of this dimension. <pre><code>virtual Type endstone::Dimension::getType () const = 0\n</code></pre></p> <p>Returns:</p> <p>Type of this dimension </p>"},{"location":"reference/cpp/classendstone_1_1Dimension/#function-dimension","title":"function ~Dimension","text":"<pre><code>virtual endstone::Dimension::~Dimension () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/dimension.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Event/","title":"Class endstone::Event","text":"<p>ClassList &gt; endstone &gt; Event</p> <p>Represents an event. </p> <ul> <li><code>#include &lt;endstone/event/event.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::ActorEvent,  endstone::PlayerEvent,  endstone::ServerEvent,  endstone::WeatherEvent</p>"},{"location":"reference/cpp/classendstone_1_1Event/#public-functions","title":"Public Functions","text":"Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1Event/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Event/#function-event-12","title":"function Event [\u00bd]","text":"<pre><code>inline explicit endstone::Event::Event (\n    bool async=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Event/#function-event-22","title":"function Event [2/2]","text":"<pre><code>endstone::Event::Event (\n    const Event &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Event/#function-geteventname","title":"function getEventName","text":"<pre><code>virtual std::string endstone::Event::getEventName () const = 0\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p>"},{"location":"reference/cpp/classendstone_1_1Event/#function-isasynchronous","title":"function isAsynchronous","text":"<pre><code>inline bool endstone::Event::isAsynchronous () const\n</code></pre> <p>Any custom event that should not by synchronized with other events must use the specific constructor.</p> <p>Returns:</p> <p>false by default, true if the event fires asynchronously </p>"},{"location":"reference/cpp/classendstone_1_1Event/#function-iscancellable","title":"function isCancellable","text":"<pre><code>virtual bool endstone::Event::isCancellable () const = 0\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p>"},{"location":"reference/cpp/classendstone_1_1Event/#function-iscancelled","title":"function isCancelled","text":"<pre><code>inline bool endstone::Event::isCancelled () const\n</code></pre> <p>Gets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins</p> <p>Returns:</p> <p>true if this event is cancelled </p>"},{"location":"reference/cpp/classendstone_1_1Event/#function-operator","title":"function operator=","text":"<pre><code>Event &amp; endstone::Event::operator= (\n    const Event &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Event/#function-setcancelled","title":"function setCancelled","text":"<pre><code>inline void endstone::Event::setCancelled (\n    bool cancel\n) \n</code></pre> <p>Sets the cancellation state of this event. A cancelled event will not be executed in the server, but will still pass to other plugins.</p> <p>Parameters:</p> <ul> <li><code>cancel</code> true if you wish to cancel this event </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Event/#function-event","title":"function ~Event","text":"<pre><code>virtual endstone::Event::~Event () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/","title":"Class endstone::EventHandler","text":"<p>ClassList &gt; endstone &gt; EventHandler</p> <p>Represents a registered EventHandler which associates with aPlugin .</p> <ul> <li><code>#include &lt;endstone/event/event_handler.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#public-functions","title":"Public Functions","text":"Type Name EventHandler (std::string event, std::function&lt; void(Event &amp;)&gt; executor, EventPriority priority, Plugin &amp; plugin, bool ignore_cancelled)  void callEvent (Event &amp; event)  std::string getEventType () const Plugin &amp; getPlugin () const EventPriority getPriority () const bool isIgnoreCancelled () const"},{"location":"reference/cpp/classendstone_1_1EventHandler/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-eventhandler","title":"function EventHandler","text":"<pre><code>inline endstone::EventHandler::EventHandler (\n    std::string event,\n    std::function&lt; void( Event &amp;)&gt; executor,\n    EventPriority priority,\n    Plugin &amp; plugin,\n    bool ignore_cancelled\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-callevent","title":"function callEvent","text":"<pre><code>inline void endstone::EventHandler::callEvent (\n    Event &amp; event\n) \n</code></pre> <p>Calls the event executor</p> <p>Parameters:</p> <ul> <li><code>event</code> The event </li> </ul>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-geteventtype","title":"function getEventType","text":"<pre><code>inline std::string endstone::EventHandler::getEventType () const\n</code></pre> <p>Gets the event type for this registration</p> <p>Returns:</p> <p>Registered event type </p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::EventHandler::getPlugin () const\n</code></pre> <p>Gets the plugin for this registration</p> <p>Returns:</p> <p>Registered Plugin </p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-getpriority","title":"function getPriority","text":"<pre><code>inline EventPriority endstone::EventHandler::getPriority () const\n</code></pre> <p>Gets the priority for this registration</p> <p>Returns:</p> <p>Registered Priority </p>"},{"location":"reference/cpp/classendstone_1_1EventHandler/#function-isignorecancelled","title":"function isIgnoreCancelled","text":"<pre><code>inline bool endstone::EventHandler::isIgnoreCancelled () const\n</code></pre> <p>Whether this listener accepts cancelled events</p> <p>Returns:</p> <p>True when ignoring cancelled events </p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/event_handler.h</code></p>"},{"location":"reference/cpp/classendstone_1_1HandlerList/","title":"Class endstone::HandlerList","text":"<p>ClassList &gt; endstone &gt; HandlerList</p> <p>A list of event handlers. Should be instantiated on a per event basis. </p> <ul> <li><code>#include &lt;endstone/event/handler_list.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#public-functions","title":"Public Functions","text":"Type Name HandlerList (std::string event)  std::vector&lt; EventHandler * &gt; getHandlers () const EventHandler * registerHandler (std::unique_ptr&lt; EventHandler &gt; handler)  void unregister (EventHandler &amp; handler)  void unregister (Plugin &amp; plugin)"},{"location":"reference/cpp/classendstone_1_1HandlerList/#protected-functions","title":"Protected Functions","text":"Type Name void bake () const"},{"location":"reference/cpp/classendstone_1_1HandlerList/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-handlerlist","title":"function HandlerList","text":"<pre><code>inline explicit endstone::HandlerList::HandlerList (\n    std::string event\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-gethandlers","title":"function getHandlers","text":"<pre><code>inline std::vector&lt; EventHandler * &gt; endstone::HandlerList::getHandlers () const\n</code></pre> <p>Get the baked registered handlers associated with this handler list</p> <p>Returns:</p> <p>the array of registered handlers </p>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-registerhandler","title":"function registerHandler","text":"<pre><code>inline EventHandler * endstone::HandlerList::registerHandler (\n    std::unique_ptr&lt; EventHandler &gt; handler\n) \n</code></pre> <p>Register a new handler</p> <p>Parameters:</p> <ul> <li><code>handler</code> Event handler to register </li> </ul> <p>Returns:</p> <p>the pointer to the registered handler </p>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-unregister-12","title":"function unregister [\u00bd]","text":"<pre><code>inline void endstone::HandlerList::unregister (\n    EventHandler &amp; handler\n) \n</code></pre> <p>Remove a handler from a specific order slot</p> <p>Parameters:</p> <ul> <li><code>handler</code> Event handler to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-unregister-22","title":"function unregister [2/2]","text":"<pre><code>inline void endstone::HandlerList::unregister (\n    Plugin &amp; plugin\n) \n</code></pre> <p>Remove a specific plugin's handlers from this handler</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1HandlerList/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1HandlerList/#function-bake","title":"function bake","text":"<pre><code>inline void endstone::HandlerList::bake () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/handler_list.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Inventory/","title":"Class endstone::Inventory","text":"<p>ClassList &gt; endstone &gt; Inventory</p> <p>Interface to the various inventories. </p> <ul> <li><code>#include &lt;endstone/inventory/inventory.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::PlayerInventory</p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#public-functions","title":"Public Functions","text":"Type Name virtual int getMaxStackSize () const = 0Returns the maximum stack size for an ItemStack in this inventory. virtual int getSize () const = 0Returns the size of the inventory. virtual ~Inventory () = default"},{"location":"reference/cpp/classendstone_1_1Inventory/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Inventory/#function-getmaxstacksize","title":"function getMaxStackSize","text":"<p>Returns the maximum stack size for an ItemStack in this inventory. <pre><code>virtual int endstone::Inventory::getMaxStackSize () const = 0\n</code></pre></p> <p>Returns:</p> <p>The maximum size for an ItemStack in this inventory. </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-getsize","title":"function getSize","text":"<p>Returns the size of the inventory. <pre><code>virtual int endstone::Inventory::getSize () const = 0\n</code></pre></p> <p>Returns:</p> <p>The size of the inventory </p>"},{"location":"reference/cpp/classendstone_1_1Inventory/#function-inventory","title":"function ~Inventory","text":"<pre><code>virtual endstone::Inventory::~Inventory () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/inventory.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Level/","title":"Class endstone::Level","text":"<p>ClassList &gt; endstone &gt; Level</p> <p>Represents a level, which may contain actors, chunks and blocks. </p> <ul> <li><code>#include &lt;endstone/level/level.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Level/#public-functions","title":"Public Functions","text":"Type Name virtual std::vector&lt; Actor * &gt; getActors () const = 0Get a list of all actors in this level. virtual Dimension * getDimension (std::string name) const = 0Gets the dimension with the given name. virtual std::vector&lt; Dimension * &gt; getDimensions () const = 0Gets a list of all dimensions within this level. virtual std::string getName () const = 0Gets the unique name of this level. virtual int getTime () const = 0Gets the relative in-game time of this level. virtual void setTime (int time) = 0Sets the relative in-game time on the server. virtual ~Level () = default"},{"location":"reference/cpp/classendstone_1_1Level/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Level/#function-getactors","title":"function getActors","text":"<p>Get a list of all actors in this level. <pre><code>virtual std::vector&lt; Actor * &gt; endstone::Level::getActors () const = 0\n</code></pre></p> <p>Returns:</p> <p>A List of all actors currently residing in this level </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getdimension","title":"function getDimension","text":"<p>Gets the dimension with the given name. <pre><code>virtual Dimension * endstone::Level::getDimension (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the dimension to retrieve </li> </ul> <p>Returns:</p> <p>The Dimension with the given name, or nullptr if none exists </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getdimensions","title":"function getDimensions","text":"<p>Gets a list of all dimensions within this level. <pre><code>virtual std::vector&lt; Dimension * &gt; endstone::Level::getDimensions () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of dimensions </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-getname","title":"function getName","text":"<p>Gets the unique name of this level. <pre><code>virtual std::string endstone::Level::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>Name of this level </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-gettime","title":"function getTime","text":"<p>Gets the relative in-game time of this level. <pre><code>virtual int endstone::Level::getTime () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current relative time </p>"},{"location":"reference/cpp/classendstone_1_1Level/#function-settime","title":"function setTime","text":"<p>Sets the relative in-game time on the server. <pre><code>virtual void endstone::Level::setTime (\n    int time\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>time</code> The new relative time to set the in-game time to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Level/#function-level","title":"function ~Level","text":"<pre><code>virtual endstone::Level::~Level () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/level/level.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Location/","title":"Class endstone::Location","text":"<p>ClassList &gt; endstone &gt; Location</p> <p>Represents a 3-dimensional location in a dimension within a level. </p> <ul> <li><code>#include &lt;endstone/level/location.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Position</p>"},{"location":"reference/cpp/classendstone_1_1Location/#public-functions","title":"Public Functions","text":"Type Name Location (Dimension * dimension, float x, float y, float z, float pitch=0.0, float yaw=0.0)  float getPitch () const float getYaw () const void setPitch (float pitch)  void setYaw (float yaw)"},{"location":"reference/cpp/classendstone_1_1Location/#public-functions-inherited-from-endstoneposition","title":"Public Functions inherited from endstone::Position","text":"<p>See endstone::Position</p> Type Name Position (Dimension * dimension, float x, float y, float z)  Dimension * getDimension () const void setDimension (Dimension &amp; dimension)"},{"location":"reference/cpp/classendstone_1_1Location/#public-functions-inherited-from-endstonevector","title":"Public Functions inherited from endstone::Vector","text":"<p>See endstone::Vector</p> Type Name constexpr Vector ()  constexpr Vector (T x, T y, T z)  constexpr T distance (const Vector&lt; T &gt; &amp; other) const constexpr T distanceSquared (const Vector&lt; T &gt; &amp; other) const constexpr T getX () const constexpr T getY () const constexpr T getZ () const constexpr T length () const constexpr T lengthSquared () const constexpr Vector&lt; T &gt; operator* (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator* (T scalar) const Vector&lt; T &gt; &amp; operator*= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator+ (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator+ (T scalar) const Vector&lt; T &gt; &amp; operator+= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator- (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator- (T scalar) const Vector&lt; T &gt; &amp; operator-= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator/ (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator/ (T scalar) const Vector&lt; T &gt; &amp; operator/= (const Vector&lt; T &gt; &amp; other)  constexpr void setX (T x)  constexpr void setY (T y)  constexpr void setZ (T z)  std::string toString () const"},{"location":"reference/cpp/classendstone_1_1Location/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Location/#function-location","title":"function Location","text":"<pre><code>inline endstone::Location::Location (\n    Dimension * dimension,\n    float x,\n    float y,\n    float z,\n    float pitch=0.0,\n    float yaw=0.0\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getpitch","title":"function getPitch","text":"<pre><code>inline float endstone::Location::getPitch () const\n</code></pre> <p>Gets the pitch of this location, measured in degrees.</p> <p>Returns:</p> <p>the incline's pitch </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-getyaw","title":"function getYaw","text":"<pre><code>inline float endstone::Location::getYaw () const\n</code></pre> <p>Gets the yaw of this location, measured in degrees.</p> <p>Returns:</p> <p>the rotation's yaw </p>"},{"location":"reference/cpp/classendstone_1_1Location/#function-setpitch","title":"function setPitch","text":"<pre><code>inline void endstone::Location::setPitch (\n    float pitch\n) \n</code></pre> <p>Sets the pitch of this location, measured in degrees.  * A pitch of 0 represents level forward facing.  * A pitch of 90 represents downward facing, or negative y direction.  * A pitch of -90 represents upward facing, or positive y direction. </p> <p>Increasing pitch values the equivalent of looking down.</p> <p>Parameters:</p> <ul> <li><code>pitch</code> new incline's pitch </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Location/#function-setyaw","title":"function setYaw","text":"<pre><code>inline void endstone::Location::setYaw (\n    float yaw\n) \n</code></pre> <p>Sets the yaw of this location, measured in degrees.  * A yaw of 0 or 360 represents the positive z direction.  * A yaw of 180 represents the negative z direction.  * A yaw of 90 represents the negative x direction.  * A yaw of 270 represents the positive x direction. </p> <p>Increasing yaw values are the equivalent of turning to your right-facing, increasing the scale of the next respective axis, and decreasing the scale of the previous axis.</p> <p>Parameters:</p> <ul> <li><code>yaw</code> new rotation's yaw </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/level/location.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Logger/","title":"Class endstone::Logger","text":"<p>ClassList &gt; endstone &gt; Logger</p> <p>Logger class which can format and output varies levels of logs.</p> <ul> <li><code>#include &lt;endstone/logger.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Logger/#public-types","title":"Public Types","text":"Type Name enum std::uint8_t Level Specifies the log level."},{"location":"reference/cpp/classendstone_1_1Logger/#public-functions","title":"Public Functions","text":"Type Name Logger () = default void critical (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const void debug (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const void error (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual std::string_view getName () const = 0Get the name of this Logger instance. void info (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual bool isEnabledFor (Level level) const = 0Check if the Logger instance is enabled for the given logLevel . virtual void log (Level level, const std::string &amp; message) const = 0Log a message at the given level. void log (Level level, const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void setLevel (Level level) = 0Set the logging level for this Logger instance. void trace (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const void warning (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual ~Logger () = default"},{"location":"reference/cpp/classendstone_1_1Logger/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Logger/#enum-level","title":"enum Level","text":"<pre><code>enum endstone::Logger::Level {\n    Trace = 0,\n    Debug = 1,\n    Info = 2,\n    Warning = 3,\n    Error = 4,\n    Critical = 5,\n    Off = 6\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Logger/#function-logger","title":"function Logger","text":"<pre><code>endstone::Logger::Logger () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-critical","title":"function critical","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::critical (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-debug","title":"function debug","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::debug (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-error","title":"function error","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::error (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-getname","title":"function getName","text":"<p>Get the name of this Logger instance. <pre><code>virtual std::string_view endstone::Logger::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>The name of this Logger instance. </p>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-info","title":"function info","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::info (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-isenabledfor","title":"function isEnabledFor","text":"<p>Check if the Logger instance is enabled for the given logLevel . <pre><code>virtual bool endstone::Logger::isEnabledFor (\n    Level level\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> The log level to check </li> </ul> <p>Returns:</p> <p>true if the logger is enabled for the Level, false otherwise. </p>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-log-12","title":"function log [\u00bd]","text":"<p>Log a message at the given level. <pre><code>virtual void endstone::Logger::log (\n    Level level,\n    const std::string &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> The level at which the message should be logged. </li> <li><code>message</code> The message to log. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-log-22","title":"function log [2/2]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::log (\n    Level level,\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-setlevel","title":"function setLevel","text":"<p>Set the logging level for this Logger instance. <pre><code>virtual void endstone::Logger::setLevel (\n    Level level\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> The desired log level </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-trace","title":"function trace","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::trace (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-warning","title":"function warning","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Logger::warning (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Logger/#function-logger_1","title":"function ~Logger","text":"<pre><code>virtual endstone::Logger::~Logger () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/logger.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Permissible/","title":"Class endstone::Permissible","text":"<p>ClassList &gt; endstone &gt; Permissible</p> <p>Represents an object that may become a server operator and can be assigned permissions. </p> <ul> <li><code>#include &lt;endstone/permissions/permissible.h&gt;</code></li> </ul> <p>Inherited by the following classes: endstone::CommandSender</p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#public-functions","title":"Public Functions","text":"Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0 virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0 virtual CommandSender * asCommandSender () const = 0 virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0 virtual bool hasPermission (std::string name) const = 0 virtual bool hasPermission (const Permission &amp; perm) const = 0 virtual bool isOp () const = 0Checks if this object is a server operator. virtual bool isPermissionSet (std::string name) const = 0 virtual bool isPermissionSet (const Permission &amp; perm) const = 0 virtual void recalculatePermissions () = 0 virtual bool removeAttachment (PermissionAttachment &amp; attachment) = 0 virtual void setOp (bool value) = 0Sets the operator status of this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Permissible/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Permissible/#function-addattachment-12","title":"function addAttachment [\u00bd]","text":"<pre><code>virtual PermissionAttachment * endstone::Permissible::addAttachment (\n    Plugin &amp; plugin,\n    const std::string &amp; name,\n    bool value\n) = 0\n</code></pre> <p>Adds a new PermissionAttachment with a single permission by name and value</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin responsible for this attachment, may not be null or disabled </li> <li><code>name</code> Name of the permission to attach </li> <li><code>value</code> Value of the permission </li> </ul> <p>Returns:</p> <p>The PermissionAttachment that was just created </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-addattachment-22","title":"function addAttachment [2/2]","text":"<pre><code>virtual PermissionAttachment * endstone::Permissible::addAttachment (\n    Plugin &amp; plugin\n) = 0\n</code></pre> <p>Adds a new empty PermissionAttachment to this object</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin responsible for this attachment, may not be null or disabled </li> </ul> <p>Returns:</p> <p>The PermissionAttachment that was just created </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-ascommandsender","title":"function asCommandSender","text":"<pre><code>virtual CommandSender * endstone::Permissible::asCommandSender () const = 0\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-geteffectivepermissions","title":"function getEffectivePermissions","text":"<pre><code>virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; endstone::Permissible::getEffectivePermissions () const = 0\n</code></pre> <p>Gets a set containing all of the permissions currently in effect by this object</p> <p>Returns:</p> <p>Set of currently effective permissions </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-haspermission-12","title":"function hasPermission [\u00bd]","text":"<pre><code>virtual bool endstone::Permissible::hasPermission (\n    std::string name\n) const = 0\n</code></pre> <p>Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>Value of the permission </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-haspermission-22","title":"function hasPermission [2/2]","text":"<pre><code>virtual bool endstone::Permissible::hasPermission (\n    const Permission &amp; perm\n) const = 0\n</code></pre> <p>Gets the value of the specified permission, if set. If a permission override is not set on this object, the default value of the permission will be returned.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to get </li> </ul> <p>Returns:</p> <p>Value of the permission </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-isop","title":"function isOp","text":"<p>Checks if this object is a server operator. <pre><code>virtual bool endstone::Permissible::isOp () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if this is an operator, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-ispermissionset-12","title":"function isPermissionSet [\u00bd]","text":"<pre><code>virtual bool endstone::Permissible::isPermissionSet (\n    std::string name\n) const = 0\n</code></pre> <p>Checks if this object contains an override for the specified permission, by fully qualified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>true if the permission is set, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-ispermissionset-22","title":"function isPermissionSet [2/2]","text":"<pre><code>virtual bool endstone::Permissible::isPermissionSet (\n    const Permission &amp; perm\n) const = 0\n</code></pre> <p>Checks if this object contains an override for the specified Permission</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to check </li> </ul> <p>Returns:</p> <p>true if the permission is set, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-recalculatepermissions","title":"function recalculatePermissions","text":"<pre><code>virtual void endstone::Permissible::recalculatePermissions () = 0\n</code></pre> <p>Recalculates the permissions for this object, if the attachments have changed values. This should very rarely need to be called from a plugin. </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-removeattachment","title":"function removeAttachment","text":"<pre><code>virtual bool endstone::Permissible::removeAttachment (\n    PermissionAttachment &amp; attachment\n) = 0\n</code></pre> <p>Removes the given PermissionAttachment from this object</p> <p>Parameters:</p> <ul> <li><code>attachment</code> Attachment to remove </li> </ul> <p>Returns:</p> <p>true if the specified attachment was removed successfully, false when it isn't part of this object </p>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-setop","title":"function setOp","text":"<p>Sets the operator status of this object. <pre><code>virtual void endstone::Permissible::setOp (\n    bool value\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>value</code> New operator value </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permissible/#function-permissible","title":"function ~Permissible","text":"<pre><code>virtual endstone::Permissible::~Permissible () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permissible.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Permission/","title":"Class endstone::Permission","text":"<p>ClassList &gt; endstone &gt; Permission</p> <p>Represents a unique permission that may be attached to a Permissible .</p> <ul> <li><code>#include &lt;endstone/permissions/permission.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permission/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const PermissionDefault DefaultPermission   = = PermissionDefault::Operator"},{"location":"reference/cpp/classendstone_1_1Permission/#public-functions","title":"Public Functions","text":"Type Name Permission (std::string name, std::string description=\"\", PermissionDefault default_value=DefaultPermission, std::unordered_map&lt; std::string, bool &gt; children={})  Permission * addParent (std::string name, bool value)  void addParent (Permission &amp; perm, bool value) const std::unordered_map&lt; std::string, bool &gt; &amp; getChildren ()  PermissionDefault getDefault () const std::string getDescription () const std::string getName () const std::unordered_set&lt; Permissible * &gt; getPermissibles () const void init (PluginManager &amp; plugin_manager)  void recalculatePermissibles ()  void setDefault (PermissionDefault value)  void setDescription (std::string value)"},{"location":"reference/cpp/classendstone_1_1Permission/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Permission/#variable-defaultpermission","title":"variable DefaultPermission","text":"<pre><code>const PermissionDefault endstone::Permission::DefaultPermission;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permission/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Permission/#function-permission","title":"function Permission","text":"<pre><code>inline explicit endstone::Permission::Permission (\n    std::string name,\n    std::string description=\"\",\n    PermissionDefault default_value=DefaultPermission,\n    std::unordered_map&lt; std::string, bool &gt; children={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-addparent-12","title":"function addParent [\u00bd]","text":"<pre><code>inline Permission * endstone::Permission::addParent (\n    std::string name,\n    bool value\n) \n</code></pre> <p>Adds this permission to the specified parent permission.</p> <p>If the parent permission does not exist, it will be created and registered.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the parent permission </li> <li><code>value</code> The value to set this permission to </li> </ul> <p>Returns:</p> <p>Parent permission it created or loaded </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-addparent-22","title":"function addParent [2/2]","text":"<pre><code>inline void endstone::Permission::addParent (\n    Permission &amp; perm,\n    bool value\n) const\n</code></pre> <p>Adds this permission to the specified parent permission.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Parent permission to register with </li> <li><code>value</code> The value to set this permission to </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getchildren","title":"function getChildren","text":"<pre><code>inline std::unordered_map&lt; std::string, bool &gt; &amp; endstone::Permission::getChildren () \n</code></pre> <p>Gets the children of this permission. If you change this map in any form, you must call recalculatePermissibles() to recalculate all Permissibles</p> <p>Returns:</p> <p>Permission children </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getdefault","title":"function getDefault","text":"<pre><code>inline PermissionDefault endstone::Permission::getDefault () const\n</code></pre> <p>Gets the default value of this permission.</p> <p>Returns:</p> <p>Default value of this permission. </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getdescription","title":"function getDescription","text":"<pre><code>inline std::string endstone::Permission::getDescription () const\n</code></pre> <p>Gets a brief description of this permission, may be empty</p> <p>Returns:</p> <p>Brief description of this permission </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getname","title":"function getName","text":"<pre><code>inline std::string endstone::Permission::getName () const\n</code></pre> <p>Returns the unique fully qualified name of this Permission</p> <p>Returns:</p> <p>Fully qualified name </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-getpermissibles","title":"function getPermissibles","text":"<pre><code>inline std::unordered_set&lt; Permissible * &gt; endstone::Permission::getPermissibles () const\n</code></pre> <p>Gets a set containing every Permissible that has this permission. This set cannot be modified.</p> <p>Returns:</p> <p>Set containing permissibles with this permission </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-init","title":"function init","text":"<pre><code>inline void endstone::Permission::init (\n    PluginManager &amp; plugin_manager\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-recalculatepermissibles","title":"function recalculatePermissibles","text":"<pre><code>inline void endstone::Permission::recalculatePermissibles () \n</code></pre> <p>Recalculates all Permissibles that contain this permission.</p> <p>This should be called after modifying the children, and is automatically called after modifying the default value </p>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-setdefault","title":"function setDefault","text":"<pre><code>inline void endstone::Permission::setDefault (\n    PermissionDefault value\n) \n</code></pre> <p>Sets the default value of this permission.</p> <p>This will not be saved to disk, and is a temporary operation until the server reloads permissions. Changing this default will cause all Permissibles that contain this permission to recalculate their permissions</p> <p>Parameters:</p> <ul> <li><code>value</code> The new default to set </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Permission/#function-setdescription","title":"function setDescription","text":"<pre><code>inline void endstone::Permission::setDescription (\n    std::string value\n) \n</code></pre> <p>Sets the description of this permission.</p> <p>This will not be saved to disk, and is a temporary operation until the server reloads permissions.</p> <p>Parameters:</p> <ul> <li><code>value</code> The new description to set </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/","title":"Class endstone::PermissionAttachment","text":"<p>ClassList &gt; endstone &gt; PermissionAttachment</p> <p>Holds information about a permission attachment on a Permissible object.</p> <ul> <li><code>#include &lt;endstone/permissions/permission_attachment.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#public-functions","title":"Public Functions","text":"Type Name PermissionAttachment (Plugin &amp; plugin, Permissible &amp; permissible)  Permissible &amp; getPermissible () const std::unordered_map&lt; std::string, bool &gt; getPermissions () const Plugin &amp; getPlugin () const PermissionRemovedExecutor getRemovalCallback () const bool remove ()  void setPermission (std::string name, bool value)  void setPermission (Permission &amp; perm, bool value)  void setRemovalCallback (PermissionRemovedExecutor ex)  void unsetPermission (std::string name)  void unsetPermission (Permission &amp; perm)"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-permissionattachment","title":"function PermissionAttachment","text":"<pre><code>inline endstone::PermissionAttachment::PermissionAttachment (\n    Plugin &amp; plugin,\n    Permissible &amp; permissible\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getpermissible","title":"function getPermissible","text":"<pre><code>inline Permissible &amp; endstone::PermissionAttachment::getPermissible () const\n</code></pre> <p>Gets the Permissible that this is attached to</p> <p>Returns:</p> <p>Permissible containing this attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getpermissions","title":"function getPermissions","text":"<pre><code>inline std::unordered_map&lt; std::string, bool &gt; endstone::PermissionAttachment::getPermissions () const\n</code></pre> <p>Gets a copy of all set permissions and values contained within this attachment. This map may be modified but will not affect the attachment, as it is a copy.</p> <p>Returns:</p> <p>Copy of all permissions and values expressed by this attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PermissionAttachment::getPlugin () const\n</code></pre> <p>Gets the plugin responsible for this attachment</p> <p>Returns:</p> <p>Plugin responsible for this permission attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-getremovalcallback","title":"function getRemovalCallback","text":"<pre><code>inline PermissionRemovedExecutor endstone::PermissionAttachment::getRemovalCallback () const\n</code></pre> <p>Gets the class that was previously set to be called when this attachment was removed from a Permissible. May be empty.</p> <p>Returns:</p> <p>Executor to be called when this is removed </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-remove","title":"function remove","text":"<pre><code>inline bool endstone::PermissionAttachment::remove () \n</code></pre> <p>Removes this attachment from its registered Permissible</p> <p>Returns:</p> <p>true if the permissible was removed successfully, false if it did not exist </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-setpermission-12","title":"function setPermission [\u00bd]","text":"<pre><code>inline void endstone::PermissionAttachment::setPermission (\n    std::string name,\n    bool value\n) \n</code></pre> <p>Sets a permission to the given value, by its fully qualified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> <li><code>value</code> New value of the permission </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-setpermission-22","title":"function setPermission [2/2]","text":"<pre><code>inline void endstone::PermissionAttachment::setPermission (\n    Permission &amp; perm,\n    bool value\n) \n</code></pre> <p>Sets a permission to the given value</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to set </li> <li><code>value</code> New value of the permission </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-setremovalcallback","title":"function setRemovalCallback","text":"<pre><code>inline void endstone::PermissionAttachment::setRemovalCallback (\n    PermissionRemovedExecutor ex\n) \n</code></pre> <p>Sets an executor to be called for when this attachment is removed from a Permissible. May be empty.</p> <p>Parameters:</p> <ul> <li><code>ex</code> Executor to be called when this is removed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-unsetpermission-12","title":"function unsetPermission [\u00bd]","text":"<pre><code>inline void endstone::PermissionAttachment::unsetPermission (\n    std::string name\n) \n</code></pre> <p>Removes the specified permission from this attachment. If the permission does not exist in this attachment, nothing will happen.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachment/#function-unsetpermission-22","title":"function unsetPermission [2/2]","text":"<pre><code>inline void endstone::PermissionAttachment::unsetPermission (\n    Permission &amp; perm\n) \n</code></pre> <p>Removes the specified permission from this attachment. If the permission does not exist in this attachment, nothing will happen.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to remove </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/","title":"Class endstone::PermissionAttachmentInfo","text":"<p>ClassList &gt; endstone &gt; PermissionAttachmentInfo</p> <p>Holds information on a permission and which PermissionAttachment provides it.</p> <ul> <li><code>#include &lt;endstone/permissions/permission_attachment_info.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#public-functions","title":"Public Functions","text":"Type Name PermissionAttachmentInfo (Permissible &amp; permissible, std::string permission, PermissionAttachment * attachment, bool value)  PermissionAttachment * getAttachment () const Permissible &amp; getPermissible () const std::string getPermission () const bool getValue () const"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-permissionattachmentinfo","title":"function PermissionAttachmentInfo","text":"<pre><code>inline endstone::PermissionAttachmentInfo::PermissionAttachmentInfo (\n    Permissible &amp; permissible,\n    std::string permission,\n    PermissionAttachment * attachment,\n    bool value\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getattachment","title":"function getAttachment","text":"<pre><code>inline PermissionAttachment * endstone::PermissionAttachmentInfo::getAttachment () const\n</code></pre> <p>Gets the attachment providing this permission. This may be null for default permissions (usually parent permissions).</p> <p>Returns:</p> <p>Attachment </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getpermissible","title":"function getPermissible","text":"<pre><code>inline Permissible &amp; endstone::PermissionAttachmentInfo::getPermissible () const\n</code></pre> <p>Gets the permissible this is attached to</p> <p>Returns:</p> <p>Permissible this permission is for </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getpermission","title":"function getPermission","text":"<pre><code>inline std::string endstone::PermissionAttachmentInfo::getPermission () const\n</code></pre> <p>Gets the permission being set</p> <p>Returns:</p> <p>Name of the permission </p>"},{"location":"reference/cpp/classendstone_1_1PermissionAttachmentInfo/#function-getvalue","title":"function getValue","text":"<pre><code>inline bool endstone::PermissionAttachmentInfo::getValue () const\n</code></pre> <p>Gets the value of this permission</p> <p>Returns:</p> <p>Value of the permission </p> <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment_info.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Player/","title":"Class endstone::Player","text":"<p>ClassList &gt; endstone &gt; Player</p> <p>Represents a player. </p> <ul> <li><code>#include &lt;endstone/player.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Actor</p>"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions","title":"Public Functions","text":"Type Name Player () = default Player (const Player &amp;) = delete Player (Player &amp;&amp;) = delete virtual Player * asPlayer () override constGets a CommandSender asPlayer . virtual const SocketAddress &amp; getAddress () const = 0Gets the socket address of this player. virtual bool getAllowFlight () const = 0Determines if the Player is allowed to fly via jump key double-tap. virtual endstone::UUID getDeviceId () const = 0Gets the player's current device id. virtual std::string getDeviceOS () const = 0Gets the player's current device's operation system (OS). virtual int getExpLevel () const = 0Gets the players current experience level. virtual float getExpProgress () const = 0Gets the players current experience progress towards the next level. virtual float getFlySpeed () const = 0Gets the current allowed speed that a client can fly. virtual GameMode getGameMode () const = 0Gets this player's current GameMode. virtual PlayerInventory &amp; getInventory () const = 0Get the player's inventory. virtual std::string getLocale () const = 0Gets the player's current locale. virtual std::chrono::milliseconds getPing () const = 0Gets the player's average ping. virtual int getTotalExp () const = 0Gets the players total experience points. virtual endstone::UUID getUniqueId () const = 0Returns the UUID of this player. virtual float getWalkSpeed () const = 0Gets the current allowed speed that a client can walk. virtual void giveExp (int amount) = 0Gives the player the amount of experience specified. virtual void giveExpLevels (int amount) = 0Gives the player the amount of experience levels specified. virtual bool isFlying () const = 0Checks to see if this player is currently flying or not. virtual void kick (std::string message) const = 0Kicks player with custom kick message. Player &amp; operator= (const Player &amp;) = delete Player &amp; operator= (Player &amp;&amp;) = delete virtual bool performCommand (std::string command) const = 0Makes the player perform the given command. virtual void sendPopup (std::string message) const = 0Sends this player a popup message. virtual void sendTip (std::string message) const = 0Sends this player a tip message. virtual void setAllowFlight (bool flight) = 0Sets if the Player is allowed to fly via jump key double-tap. virtual void setExpLevel (int level) = 0Sets the players current experience level. virtual void setExpProgress (float progress) = 0Sets the players current experience progress towards the next level. virtual void setFlySpeed (float value) const = 0 virtual void setFlying (bool value) = 0Makes this player start or stop flying. virtual void setGameMode (GameMode mode) = 0Sets this player's current GameMode. virtual void setWalkSpeed (float value) const = 0 virtual void updateCommands () const = 0Send the list of commands to the client. ~Player () override"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstoneactor","title":"Public Functions inherited from endstone::Actor","text":"<p>See endstone::Actor</p> Type Name Actor () = default Actor (const Actor &amp;) = delete Actor (Actor &amp;&amp;) = delete virtual Dimension &amp; getDimension () const = 0 virtual Level &amp; getLevel () const = 0 virtual Location getLocation () const = 0 virtual std::uint64_t getRuntimeId () const = 0 virtual Vector&lt; float &gt; getVelocity () const = 0 virtual bool isInLava () const = 0 virtual bool isInWater () const = 0 virtual bool isOnGround () const = 0 Actor &amp; operator= (const Actor &amp;) = delete Actor &amp; operator= (Actor &amp;&amp;) = delete ~Actor () override"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstonecommandsender","title":"Public Functions inherited from endstone::CommandSender","text":"<p>See endstone::CommandSender</p> Type Name CommandSender () = default virtual CommandSender * asCommandSender () override constCasts a Permissible asCommandSender . virtual CommandSender * asConsole () constGets a CommandSender as Console. virtual Player * asPlayer () constGets a CommandSender asPlayer . virtual std::string getName () const = 0Gets the name of this command sender. virtual Server &amp; getServer () const = 0Returns the server instance that this command is running on. virtual void sendErrorMessage (const std::string &amp; message) const = 0Sends this sender a error message. virtual void sendErrorMessage (const Translatable &amp; message) const = 0Sends this sender a translatable error message. void sendErrorMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual void sendMessage (const std::string &amp; message) const = 0Sends this sender a message. virtual void sendMessage (const Translatable &amp; message) const = 0Sends this sender a translatable message. void sendMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const ~CommandSender () override"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-inherited-from-endstonepermissible","title":"Public Functions inherited from endstone::Permissible","text":"<p>See endstone::Permissible</p> Type Name virtual PermissionAttachment * addAttachment (Plugin &amp; plugin, const std::string &amp; name, bool value) = 0 virtual PermissionAttachment * addAttachment (Plugin &amp; plugin) = 0 virtual CommandSender * asCommandSender () const = 0 virtual std::unordered_set&lt; PermissionAttachmentInfo * &gt; getEffectivePermissions () const = 0 virtual bool hasPermission (std::string name) const = 0 virtual bool hasPermission (const Permission &amp; perm) const = 0 virtual bool isOp () const = 0Checks if this object is a server operator. virtual bool isPermissionSet (std::string name) const = 0 virtual bool isPermissionSet (const Permission &amp; perm) const = 0 virtual void recalculatePermissions () = 0 virtual bool removeAttachment (PermissionAttachment &amp; attachment) = 0 virtual void setOp (bool value) = 0Sets the operator status of this object. virtual ~Permissible () = default"},{"location":"reference/cpp/classendstone_1_1Player/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Player/#function-player-13","title":"function Player [\u2153]","text":"<pre><code>endstone::Player::Player () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Player/#function-player-23","title":"function Player [\u2154]","text":"<pre><code>endstone::Player::Player (\n    const Player &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Player/#function-player-33","title":"function Player [3/3]","text":"<pre><code>endstone::Player::Player (\n    Player &amp;&amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Player/#function-asplayer","title":"function asPlayer","text":"<p>Gets a CommandSender asPlayer . <pre><code>inline virtual Player * endstone::Player::asPlayer () override const\n</code></pre></p> <p>Returns:</p> <p>Player, nullptr if not a Player </p> <p>Implements endstone::CommandSender::asPlayer</p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getaddress","title":"function getAddress","text":"<p>Gets the socket address of this player. <pre><code>virtual const SocketAddress &amp; endstone::Player::getAddress () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's socket address </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getallowflight","title":"function getAllowFlight","text":"<p>Determines if the Player is allowed to fly via jump key double-tap. <pre><code>virtual bool endstone::Player::getAllowFlight () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the player is allowed to fly. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getdeviceid","title":"function getDeviceId","text":"<p>Gets the player's current device id. <pre><code>virtual endstone::UUID endstone::Player::getDeviceId () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's device id </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getdeviceos","title":"function getDeviceOS","text":"<p>Gets the player's current device's operation system (OS). <pre><code>virtual std::string endstone::Player::getDeviceOS () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's device OS </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getexplevel","title":"function getExpLevel","text":"<p>Gets the players current experience level. <pre><code>virtual int endstone::Player::getExpLevel () const = 0\n</code></pre></p> <p>Returns:</p> <p>Current experience level </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getexpprogress","title":"function getExpProgress","text":"<p>Gets the players current experience progress towards the next level. <pre><code>virtual float endstone::Player::getExpProgress () const = 0\n</code></pre></p> <p>This is a percentage value. 0.0 is \"no progress\" and 1.0 is \"next level\".</p> <p>Returns:</p> <p>Current experience points </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getflyspeed","title":"function getFlySpeed","text":"<p>Gets the current allowed speed that a client can fly. <pre><code>virtual float endstone::Player::getFlySpeed () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current allowed speed, default is 0.05. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getgamemode","title":"function getGameMode","text":"<p>Gets this player's current GameMode. <pre><code>virtual GameMode endstone::Player::getGameMode () const = 0\n</code></pre></p> <p>Returns:</p> <p>Current game mode </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getinventory","title":"function getInventory","text":"<p>Get the player's inventory. <pre><code>virtual PlayerInventory &amp; endstone::Player::getInventory () const = 0\n</code></pre></p> <p>Returns:</p> <p>The inventory of the player, this also contains the armor slots. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getlocale","title":"function getLocale","text":"<p>Gets the player's current locale. <pre><code>virtual std::string endstone::Player::getLocale () const = 0\n</code></pre></p> <p>Returns:</p> <p>the player's locale </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getping","title":"function getPing","text":"<p>Gets the player's average ping. <pre><code>virtual std::chrono::milliseconds endstone::Player::getPing () const = 0\n</code></pre></p> <p>Returns:</p> <p>player ping </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-gettotalexp","title":"function getTotalExp","text":"<p>Gets the players total experience points. <pre><code>virtual int endstone::Player::getTotalExp () const = 0\n</code></pre></p> <p>This refers to the total amount of experience the player has collected over time and is not currently displayed to the client.</p> <p>Returns:</p> <p>Current total experience points </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getuniqueid","title":"function getUniqueId","text":"<p>Returns the UUID of this player. <pre><code>virtual endstone::UUID endstone::Player::getUniqueId () const = 0\n</code></pre></p> <p>Returns:</p> <p>Player UUID </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-getwalkspeed","title":"function getWalkSpeed","text":"<p>Gets the current allowed speed that a client can walk. <pre><code>virtual float endstone::Player::getWalkSpeed () const = 0\n</code></pre></p> <p>Returns:</p> <p>The current allowed speed, default is 0.10. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-giveexp","title":"function giveExp","text":"<p>Gives the player the amount of experience specified. <pre><code>virtual void endstone::Player::giveExp (\n    int amount\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>amount</code> Exp amount to give </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-giveexplevels","title":"function giveExpLevels","text":"<p>Gives the player the amount of experience levels specified. <pre><code>virtual void endstone::Player::giveExpLevels (\n    int amount\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>amount</code> amount of experience levels to give or take </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-isflying","title":"function isFlying","text":"<p>Checks to see if this player is currently flying or not. <pre><code>virtual bool endstone::Player::isFlying () const = 0\n</code></pre></p> <p>Returns:</p> <p>True if the player is flying, else false. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-kick","title":"function kick","text":"<p>Kicks player with custom kick message. <pre><code>virtual void endstone::Player::kick (\n    std::string message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> kick message </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-operator","title":"function operator=","text":"<pre><code>Player &amp; endstone::Player::operator= (\n    const Player &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Player/#function-operator_1","title":"function operator=","text":"<pre><code>Player &amp; endstone::Player::operator= (\n    Player &amp;&amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Player/#function-performcommand","title":"function performCommand","text":"<p>Makes the player perform the given command. <pre><code>virtual bool endstone::Player::performCommand (\n    std::string command\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>command</code> Command to perform </li> </ul> <p>Returns:</p> <p>true if the command was successful, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendpopup","title":"function sendPopup","text":"<p>Sends this player a popup message. <pre><code>virtual void endstone::Player::sendPopup (\n    std::string message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-sendtip","title":"function sendTip","text":"<p>Sends this player a tip message. <pre><code>virtual void endstone::Player::sendTip (\n    std::string message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> Message to be displayed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setallowflight","title":"function setAllowFlight","text":"<p>Sets if the Player is allowed to fly via jump key double-tap. <pre><code>virtual void endstone::Player::setAllowFlight (\n    bool flight\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>flight</code> If flight should be allowed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setexplevel","title":"function setExpLevel","text":"<p>Sets the players current experience level. <pre><code>virtual void endstone::Player::setExpLevel (\n    int level\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>level</code> New experience level </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setexpprogress","title":"function setExpProgress","text":"<p>Sets the players current experience progress towards the next level. <pre><code>virtual void endstone::Player::setExpProgress (\n    float progress\n) = 0\n</code></pre></p> <p>This is a percentage value. 0.0 is \"no progress\" and 1.0 is \"next level\".</p> <p>Parameters:</p> <ul> <li><code>progress</code> New experience progress </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setflyspeed","title":"function setFlySpeed","text":"<pre><code>virtual void endstone::Player::setFlySpeed (\n    float value\n) const = 0\n</code></pre> <p>Sets the speed at which a client will fly.</p> <p>Parameters:</p> <ul> <li><code>value</code> The new speed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setflying","title":"function setFlying","text":"<p>Makes this player start or stop flying. <pre><code>virtual void endstone::Player::setFlying (\n    bool value\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>value</code> True to fly. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setgamemode","title":"function setGameMode","text":"<p>Sets this player's current GameMode. <pre><code>virtual void endstone::Player::setGameMode (\n    GameMode mode\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>mode</code> New game mode </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-setwalkspeed","title":"function setWalkSpeed","text":"<pre><code>virtual void endstone::Player::setWalkSpeed (\n    float value\n) const = 0\n</code></pre> <p>Sets the speed at which a client will walk.</p> <p>Parameters:</p> <ul> <li><code>value</code> The new speed. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Player/#function-updatecommands","title":"function updateCommands","text":"<p>Send the list of commands to the client. <pre><code>virtual void endstone::Player::updateCommands () const = 0\n</code></pre></p> <p>Generally useful to ensure the client has a complete list of commands after permission changes are done. </p>"},{"location":"reference/cpp/classendstone_1_1Player/#function-player","title":"function ~Player","text":"<pre><code>endstone::Player::~Player () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/player.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/","title":"Class endstone::PlayerChatEvent","text":"<p>ClassList &gt; endstone &gt; PlayerChatEvent</p> <p>Called when a player sends a chat message. </p> <ul> <li><code>#include &lt;endstone/event/player/player_chat_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PlayerChatEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerChatEvent (Player &amp; player, std::string message)  virtual std::string getEventName () override const std::string getMessage () const virtual bool isCancellable () override const void setMessage (std::string message)  ~PlayerChatEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerChatEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-playerchatevent","title":"function PlayerChatEvent","text":"<pre><code>inline explicit endstone::PlayerChatEvent::PlayerChatEvent (\n    Player &amp; player,\n    std::string message\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerChatEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-getmessage","title":"function getMessage","text":"<pre><code>inline std::string endstone::PlayerChatEvent::getMessage () const\n</code></pre> <p>Gets the message that the player is attempting to send.</p> <p>Returns:</p> <p>Message the player is attempting to send </p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PlayerChatEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-setmessage","title":"function setMessage","text":"<pre><code>inline void endstone::PlayerChatEvent::setMessage (\n    std::string message\n) \n</code></pre> <p>Sets the message that the player will send.</p> <p>Parameters:</p> <ul> <li><code>message</code> New message that the player will send </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerChatEvent/#function-playerchatevent_1","title":"function ~PlayerChatEvent","text":"<pre><code>endstone::PlayerChatEvent::~PlayerChatEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_chat_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/","title":"Class endstone::PlayerCommandEvent","text":"<p>ClassList &gt; endstone &gt; PlayerCommandEvent</p> <p>Called whenever a player runs a command. </p> <ul> <li><code>#include &lt;endstone/event/player/player_command_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PlayerCommandEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerCommandEvent (Player &amp; player, std::string command)  std::string getCommand () const virtual std::string getEventName () override const virtual bool isCancellable () override const void setCommand (std::string command)  ~PlayerCommandEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerCommandEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-playercommandevent","title":"function PlayerCommandEvent","text":"<pre><code>inline explicit endstone::PlayerCommandEvent::PlayerCommandEvent (\n    Player &amp; player,\n    std::string command\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-getcommand","title":"function getCommand","text":"<pre><code>inline std::string endstone::PlayerCommandEvent::getCommand () const\n</code></pre> <p>Gets the command that the player is attempting to send.</p> <p>Returns:</p> <p>Command the player is attempting to send </p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerCommandEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PlayerCommandEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-setcommand","title":"function setCommand","text":"<pre><code>inline void endstone::PlayerCommandEvent::setCommand (\n    std::string command\n) \n</code></pre> <p>Sets the command that the player will send.</p> <p>Parameters:</p> <ul> <li><code>command</code> New command that the player will send </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerCommandEvent/#function-playercommandevent_1","title":"function ~PlayerCommandEvent","text":"<pre><code>endstone::PlayerCommandEvent::~PlayerCommandEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_command_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/","title":"Class endstone::PlayerDeathEvent","text":"<p>ClassList &gt; endstone &gt; PlayerDeathEvent</p> <p>Called when a Player dies.</p> <ul> <li><code>#include &lt;endstone/event/player/player_death_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ActorDeathEvent,  endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PlayerDeathEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-static-attributes-inherited-from-endstoneactordeathevent","title":"Public Static Attributes inherited from endstone::ActorDeathEvent","text":"<p>See endstone::ActorDeathEvent</p> Type Name const std::string NAME   = = \"ActorDeathEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerDeathEvent (Player &amp; player, std::string death_message)  const std::string &amp; getDeathMessage () constGet the death message that will appear to everyone on the server. virtual std::string getEventName () override const virtual bool isCancellable () override const void setDeathMessage (const std::string &amp; death_message) Set the death message that will appear to everyone on the server. ~PlayerDeathEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneactordeathevent","title":"Public Functions inherited from endstone::ActorDeathEvent","text":"<p>See endstone::ActorDeathEvent</p> Type Name ActorDeathEvent (Actor &amp; actor)  virtual std::string getEventName () override const virtual bool isCancellable () override const ~ActorDeathEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneactorevent","title":"Public Functions inherited from endstone::ActorEvent","text":"<p>See endstone::ActorEvent</p> Type Name ActorEvent (Actor &amp; actor)  Actor &amp; getActor () const ~ActorEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-inherited-from-endstoneevent_1","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerDeathEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-playerdeathevent","title":"function PlayerDeathEvent","text":"<pre><code>inline explicit endstone::PlayerDeathEvent::PlayerDeathEvent (\n    Player &amp; player,\n    std::string death_message\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-getdeathmessage","title":"function getDeathMessage","text":"<p>Get the death message that will appear to everyone on the server. <pre><code>inline const std::string &amp; endstone::PlayerDeathEvent::getDeathMessage () const\n</code></pre></p> <p>Returns:</p> <p>Message to appear to other players on the server. </p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerDeathEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::ActorDeathEvent::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PlayerDeathEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::ActorDeathEvent::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-setdeathmessage","title":"function setDeathMessage","text":"<p>Set the death message that will appear to everyone on the server. <pre><code>inline void endstone::PlayerDeathEvent::setDeathMessage (\n    const std::string &amp; death_message\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>death_message</code> Message to appear to other players on the server. </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerDeathEvent/#function-playerdeathevent_1","title":"function ~PlayerDeathEvent","text":"<pre><code>endstone::PlayerDeathEvent::~PlayerDeathEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_death_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/","title":"Class endstone::PlayerEvent","text":"<p>ClassList &gt; endstone &gt; PlayerEvent</p> <p>Represents a player related event. </p> <ul> <li><code>#include &lt;endstone/event/player/player_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::PlayerChatEvent,  endstone::PlayerCommandEvent,  endstone::PlayerDeathEvent,  endstone::PlayerJoinEvent,  endstone::PlayerLoginEvent,  endstone::PlayerQuitEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#function-playerevent","title":"function PlayerEvent","text":"<pre><code>inline explicit endstone::PlayerEvent::PlayerEvent (\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#function-getplayer","title":"function getPlayer","text":"<pre><code>inline Player &amp; endstone::PlayerEvent::getPlayer () const\n</code></pre> <p>Returns the player involved in this event</p> <p>Returns:</p> <p>Player who is involved in this event </p>"},{"location":"reference/cpp/classendstone_1_1PlayerEvent/#function-playerevent_1","title":"function ~PlayerEvent","text":"<pre><code>endstone::PlayerEvent::~PlayerEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/","title":"Class endstone::PlayerInventory","text":"<p>ClassList &gt; endstone &gt; PlayerInventory</p> <p>Interface to the inventory of a Player , including the four armor slots and any extra slots.</p> <ul> <li><code>#include &lt;endstone/inventory/player_inventory.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Inventory</p>"},{"location":"reference/cpp/classendstone_1_1PlayerInventory/#public-functions-inherited-from-endstoneinventory","title":"Public Functions inherited from endstone::Inventory","text":"<p>See endstone::Inventory</p> Type Name virtual int getMaxStackSize () const = 0Returns the maximum stack size for an ItemStack in this inventory. virtual int getSize () const = 0Returns the size of the inventory. virtual ~Inventory () = default <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/player_inventory.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/","title":"Class endstone::PlayerJoinEvent","text":"<p>ClassList &gt; endstone &gt; PlayerJoinEvent</p> <p>Called when a player joins a server. </p> <ul> <li><code>#include &lt;endstone/event/player/player_join_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PlayerJoinEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerJoinEvent (Player &amp; player)  virtual std::string getEventName () override const virtual bool isCancellable () override const ~PlayerJoinEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerJoinEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-playerjoinevent","title":"function PlayerJoinEvent","text":"<pre><code>inline explicit endstone::PlayerJoinEvent::PlayerJoinEvent (\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerJoinEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PlayerJoinEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerJoinEvent/#function-playerjoinevent_1","title":"function ~PlayerJoinEvent","text":"<pre><code>endstone::PlayerJoinEvent::~PlayerJoinEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_join_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/","title":"Class endstone::PlayerLoginEvent","text":"<p>ClassList &gt; endstone &gt; PlayerLoginEvent</p> <p>Called when a player attempts to login in. </p> <ul> <li><code>#include &lt;endstone/event/player/player_login_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PlayerLoginEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerLoginEvent (Player &amp; player, std::string message=\"\")  virtual std::string getEventName () override const const std::string &amp; getKickMessage () const virtual bool isCancellable () override const void setKickMessage (const std::string &amp; message)  ~PlayerLoginEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerLoginEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-playerloginevent","title":"function PlayerLoginEvent","text":"<pre><code>inline explicit endstone::PlayerLoginEvent::PlayerLoginEvent (\n    Player &amp; player,\n    std::string message=\"\"\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerLoginEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-getkickmessage","title":"function getKickMessage","text":"<pre><code>inline const std::string &amp; endstone::PlayerLoginEvent::getKickMessage () const\n</code></pre> <p>Gets the current kick message that will be used if event is cancelled</p> <p>Returns:</p> <p>Current kick message </p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PlayerLoginEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-setkickmessage","title":"function setKickMessage","text":"<pre><code>inline void endstone::PlayerLoginEvent::setKickMessage (\n    const std::string &amp; message\n) \n</code></pre> <p>Sets the kick message to display if event is cancelled</p> <p>Parameters:</p> <ul> <li><code>message</code> New kick message </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PlayerLoginEvent/#function-playerloginevent_1","title":"function ~PlayerLoginEvent","text":"<pre><code>endstone::PlayerLoginEvent::~PlayerLoginEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_login_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/","title":"Class endstone::PlayerQuitEvent","text":"<p>ClassList &gt; endstone &gt; PlayerQuitEvent</p> <p>Called when a player leaves a server. </p> <ul> <li><code>#include &lt;endstone/event/player/player_quit_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::PlayerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PlayerQuitEvent\""},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions","title":"Public Functions","text":"Type Name PlayerQuitEvent (Player &amp; player)  virtual std::string getEventName () override const virtual bool isCancellable () override const ~PlayerQuitEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions-inherited-from-endstoneplayerevent","title":"Public Functions inherited from endstone::PlayerEvent","text":"<p>See endstone::PlayerEvent</p> Type Name PlayerEvent (Player &amp; player)  Player &amp; getPlayer () const ~PlayerEvent () override"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PlayerQuitEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-playerquitevent","title":"function PlayerQuitEvent","text":"<pre><code>inline explicit endstone::PlayerQuitEvent::PlayerQuitEvent (\n    Player &amp; player\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PlayerQuitEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PlayerQuitEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1PlayerQuitEvent/#function-playerquitevent_1","title":"function ~PlayerQuitEvent","text":"<pre><code>endstone::PlayerQuitEvent::~PlayerQuitEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_quit_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Plugin/","title":"Class endstone::Plugin","text":"<p>ClassList &gt; endstone &gt; Plugin</p> <p>Represents a Plugin .</p> <ul> <li><code>#include &lt;endstone/plugin/plugin.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::CommandExecutor</p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#public-functions","title":"Public Functions","text":"Type Name Plugin () = default Plugin (const Plugin &amp;) = delete PluginCommand * getCommand (std::string name) constGets the command with the given name, specific to this plugin. const std::filesystem::path &amp; getDataFolder () constReturns the folder that the plugin data's files are located in. The folder may not yet exist. virtual const PluginDescription &amp; getDescription () const = 0Returns the details of this plugin. Logger &amp; getLogger () constReturns the plugin logger associated with this server's logger. The returned logger automatically tags all log messages with the plugin's name. std::string getName () constReturns the name of the plugin. PluginLoader &amp; getPluginLoader () constGets the associated PluginLoader responsible for this plugin. Server &amp; getServer () constReturns the Server instance currently running this plugin. bool isEnabled () constReturns a value indicating whether this plugin is currently enabled. virtual void onDisable () Called when this plugin is disabled. virtual void onEnable () Called when this plugin is enabled. virtual void onLoad () Called after a plugin is loaded but before it has been enabled. Plugin &amp; operator= (const Plugin &amp;) = delete void registerEvent (void(T::*)(EventType &amp;) func, T &amp; instance, EventPriority priority=EventPriority::Normal, bool ignore_cancelled=false)  void registerEvent (std::function&lt; void(EventType &amp;)&gt; func, EventPriority priority=EventPriority::Normal, bool ignore_cancelled=false)  ~Plugin () override"},{"location":"reference/cpp/classendstone_1_1Plugin/#public-functions-inherited-from-endstonecommandexecutor","title":"Public Functions inherited from endstone::CommandExecutor","text":"<p>See endstone::CommandExecutor</p> Type Name virtual bool onCommand (CommandSender &amp; sender, const Command &amp; command, const std::vector&lt; std::string &gt; &amp; args)  virtual ~CommandExecutor () = default"},{"location":"reference/cpp/classendstone_1_1Plugin/#protected-functions","title":"Protected Functions","text":"Type Name void setEnabled (bool enabled)"},{"location":"reference/cpp/classendstone_1_1Plugin/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Plugin/#function-plugin-12","title":"function Plugin [\u00bd]","text":"<pre><code>endstone::Plugin::Plugin () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-plugin-22","title":"function Plugin [2/2]","text":"<pre><code>endstone::Plugin::Plugin (\n    const Plugin &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getcommand","title":"function getCommand","text":"<p>Gets the command with the given name, specific to this plugin. <pre><code>inline PluginCommand * endstone::Plugin::getCommand (\n    std::string name\n) const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> name or alias of the command </li> </ul> <p>Returns:</p> <p>the plugin command if found, otherwise null </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getdatafolder","title":"function getDataFolder","text":"<p>Returns the folder that the plugin data's files are located in. The folder may not yet exist. <pre><code>inline const std::filesystem::path &amp; endstone::Plugin::getDataFolder () const\n</code></pre></p> <p>Returns:</p> <p>The folder </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getdescription","title":"function getDescription","text":"<p>Returns the details of this plugin. <pre><code>virtual const PluginDescription &amp; endstone::Plugin::getDescription () const = 0\n</code></pre></p> <p>Returns:</p> <p>Details of this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getlogger","title":"function getLogger","text":"<p>Returns the plugin logger associated with this server's logger. The returned logger automatically tags all log messages with the plugin's name. <pre><code>inline Logger &amp; endstone::Plugin::getLogger () const\n</code></pre></p> <p>Returns:</p> <p>Logger associated with this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getname","title":"function getName","text":"<p>Returns the name of the plugin. <pre><code>inline std::string endstone::Plugin::getName () const\n</code></pre></p> <p>This should return the bare name of the plugin and should be used for comparison.</p> <p>Returns:</p> <p>name of the plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getpluginloader","title":"function getPluginLoader","text":"<p>Gets the associated PluginLoader responsible for this plugin. <pre><code>inline PluginLoader &amp; endstone::Plugin::getPluginLoader () const\n</code></pre></p> <p>Returns:</p> <p>PluginLoader that controls this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-getserver","title":"function getServer","text":"<p>Returns the Server instance currently running this plugin. <pre><code>inline Server &amp; endstone::Plugin::getServer () const\n</code></pre></p> <p>Returns:</p> <p>Server running this plugin </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-isenabled","title":"function isEnabled","text":"<p>Returns a value indicating whether this plugin is currently enabled. <pre><code>inline bool endstone::Plugin::isEnabled () const\n</code></pre></p> <p>Returns:</p> <p>true if this plugin is enabled, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-ondisable","title":"function onDisable","text":"<pre><code>inline virtual void endstone::Plugin::onDisable () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-onenable","title":"function onEnable","text":"<pre><code>inline virtual void endstone::Plugin::onEnable () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-onload","title":"function onLoad","text":"<p>Called after a plugin is loaded but before it has been enabled. <pre><code>inline virtual void endstone::Plugin::onLoad () \n</code></pre></p> <p>When multiple plugins are loaded, the onLoad() for all plugins is called before any onEnable() is called. </p>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-operator","title":"function operator=","text":"<pre><code>Plugin &amp; endstone::Plugin::operator= (\n    const Plugin &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-registerevent-12","title":"function registerEvent [\u00bd]","text":"<pre><code>template&lt;typename EventType, typename T&gt;\ninline void endstone::Plugin::registerEvent (\n    void(T::*)(EventType &amp;) func,\n    T &amp; instance,\n    EventPriority priority=EventPriority::Normal,\n    bool ignore_cancelled=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-registerevent-22","title":"function registerEvent [2/2]","text":"<pre><code>template&lt;typename EventType&gt;\ninline void endstone::Plugin::registerEvent (\n    std::function&lt; void(EventType &amp;)&gt; func,\n    EventPriority priority=EventPriority::Normal,\n    bool ignore_cancelled=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#function-plugin","title":"function ~Plugin","text":"<pre><code>endstone::Plugin::~Plugin () override\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Plugin/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Plugin/#function-setenabled","title":"function setEnabled","text":"<pre><code>inline void endstone::Plugin::setEnabled (\n    bool enabled\n) \n</code></pre> <p>Sets the enabled state of this plugin</p> <p>Parameters:</p> <ul> <li><code>enabled</code> true if enabled, otherwise false </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/","title":"Class endstone::PluginCommand","text":"<p>ClassList &gt; endstone &gt; PluginCommand</p> <p>Represents a Command belonging to aPlugin .</p> <ul> <li><code>#include &lt;endstone/command/plugin_command.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Command</p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#public-functions","title":"Public Functions","text":"Type Name PluginCommand (const Command &amp; command, Plugin &amp; owner)  virtual PluginCommand * asPluginCommand () override virtual bool execute (CommandSender &amp; sender, const std::vector&lt; std::string &gt; &amp; args) override const virtual CommandExecutor &amp; getExecutor () const Plugin &amp; getPlugin () const virtual void setExecutor (std::shared_ptr&lt; CommandExecutor &gt; executor)"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#public-functions-inherited-from-endstonecommand","title":"Public Functions inherited from endstone::Command","text":"<p>See endstone::Command</p> Type Name Command (std::string name, std::string description=\"\", std::vector&lt; std::string &gt; usages={}, std::vector&lt; std::string &gt; aliases={}, std::vector&lt; std::string &gt; permissions={})  virtual PluginCommand * asPluginCommand ()  virtual bool execute (CommandSender &amp; sender, const std::vector&lt; std::string &gt; &amp; args) const std::vector&lt; std::string &gt; getAliases () const std::string getDescription () const std::string getName () const std::vector&lt; std::string &gt; getPermissions () const std::vector&lt; std::string &gt; getUsages () const bool isRegistered () const bool registerTo (CommandMap &amp; command_map)  void setAliases (Alias... aliases)  void setDescription (std::string description)  void setName (std::string name)  void setPermissions (Permission... permissions)  void setUsages (Usage... usages)  bool testPermission (const CommandSender &amp; target) const bool testPermissionSilently (const CommandSender &amp; target) const bool unregisterFrom (CommandMap &amp; command_map)  virtual ~Command () = default"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-plugincommand","title":"function PluginCommand","text":"<pre><code>inline endstone::PluginCommand::PluginCommand (\n    const Command &amp; command,\n    Plugin &amp; owner\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-asplugincommand","title":"function asPluginCommand","text":"<pre><code>inline virtual PluginCommand * endstone::PluginCommand::asPluginCommand () override\n</code></pre> <p>Implements endstone::Command::asPluginCommand</p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-execute","title":"function execute","text":"<pre><code>inline virtual bool endstone::PluginCommand::execute (\n    CommandSender &amp; sender,\n    const std::vector&lt; std::string &gt; &amp; args\n) override const\n</code></pre> <p>Executes the command, returning its success</p> <p>Parameters:</p> <ul> <li><code>sender</code> Source of the command </li> <li><code>args</code> Arguments passed to the command </li> </ul> <p>Returns:</p> <p>true if the execution was successful, otherwise false </p> <p>Implements endstone::Command::execute</p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-getexecutor","title":"function getExecutor","text":"<pre><code>inline virtual CommandExecutor &amp; endstone::PluginCommand::getExecutor () const\n</code></pre> <p>Gets the CommandExecutor associated with this command</p> <p>Returns:</p> <p>CommandExecutor object linked to this command </p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PluginCommand::getPlugin () const\n</code></pre> <p>Gets the owner of this PluginCommand</p> <p>Returns:</p> <p>Plugin that owns this command </p>"},{"location":"reference/cpp/classendstone_1_1PluginCommand/#function-setexecutor","title":"function setExecutor","text":"<pre><code>inline virtual void endstone::PluginCommand::setExecutor (\n    std::shared_ptr&lt; CommandExecutor &gt; executor\n) \n</code></pre> <p>Sets the CommandExecutor to run when parsing this command</p> <p>Parameters:</p> <ul> <li><code>executor</code> New executor to run </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/command/plugin_command.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/","title":"Class endstone::PluginDescription","text":"<p>ClassList &gt; endstone &gt; PluginDescription</p> <p>Represents the basic information about a plugin that the plugin loader needs to know. </p> <ul> <li><code>#include &lt;endstone/plugin/plugin_description.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#public-functions","title":"Public Functions","text":"Type Name PluginDescription (std::string name, std::string version, std::string description=\"\", PluginLoadOrder load=PluginLoadOrder::PostWorld, std::vector&lt; std::string &gt; authors={}, std::vector&lt; std::string &gt; contributors={}, std::string website=\"\", std::string prefix=\"\", std::vector&lt; std::string &gt; provides={}, std::vector&lt; std::string &gt; depend={}, std::vector&lt; std::string &gt; soft_depend={}, std::vector&lt; std::string &gt; load_before={}, PermissionDefault default_permission=PermissionDefault::Operator, std::vector&lt; Command &gt; commands={}, std::vector&lt; Permission &gt; permissions={})  std::string getAPIVersion () const std::vector&lt; std::string &gt; getAuthors () const std::vector&lt; Command &gt; getCommands () const std::vector&lt; std::string &gt; getContributors () const PermissionDefault getDefaultPermission () const std::vector&lt; std::string &gt; getDepend () const std::string getDescription () const std::string getFullName () const PluginLoadOrder getLoad () const std::vector&lt; std::string &gt; getLoadBefore () const std::string getName () const std::vector&lt; Permission &gt; getPermissions () const std::string getPrefix () const std::vector&lt; std::string &gt; getProvides () const std::vector&lt; std::string &gt; getSoftDepend () const std::string getVersion () const std::string getWebsite () const"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-plugindescription","title":"function PluginDescription","text":"<pre><code>inline endstone::PluginDescription::PluginDescription (\n    std::string name,\n    std::string version,\n    std::string description=\"\",\n    PluginLoadOrder load=PluginLoadOrder::PostWorld,\n    std::vector&lt; std::string &gt; authors={},\n    std::vector&lt; std::string &gt; contributors={},\n    std::string website=\"\",\n    std::string prefix=\"\",\n    std::vector&lt; std::string &gt; provides={},\n    std::vector&lt; std::string &gt; depend={},\n    std::vector&lt; std::string &gt; soft_depend={},\n    std::vector&lt; std::string &gt; load_before={},\n    PermissionDefault default_permission=PermissionDefault::Operator,\n    std::vector&lt; Command &gt; commands={},\n    std::vector&lt; Permission &gt; permissions={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getapiversion","title":"function getAPIVersion","text":"<pre><code>inline std::string endstone::PluginDescription::getAPIVersion () const\n</code></pre> <p>Gives the API version which this plugin is designed to support.</p> <p>Returns:</p> <p>the API version supported by the plugin </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getauthors","title":"function getAuthors","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getAuthors () const\n</code></pre> <p>Gives the list of authors for the plugin.</p> <p>Returns:</p> <p>an immutable list of the plugin's authors </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getcommands","title":"function getCommands","text":"<pre><code>inline std::vector&lt; Command &gt; endstone::PluginDescription::getCommands () const\n</code></pre> <p>Gives the list of commands the plugin will register at runtime.</p> <p>Returns:</p> <p>the commands this plugin will register </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getcontributors","title":"function getContributors","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getContributors () const\n</code></pre> <p>Gives the list of contributors for the plugin.</p> <p>Returns:</p> <p>an immutable list of the plugin's contributions </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getdefaultpermission","title":"function getDefaultPermission","text":"<pre><code>inline PermissionDefault endstone::PluginDescription::getDefaultPermission () const\n</code></pre> <p>Gives the default value of permissions registered for the plugin.</p> <p>Returns:</p> <p>the default value for the plugin's permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getdepend","title":"function getDepend","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getDepend () const\n</code></pre> <p>Gives a list of other plugins that the plugin requires.</p> <p>Returns:</p> <p>immutable list of the plugin's dependencies </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getdescription","title":"function getDescription","text":"<pre><code>inline std::string endstone::PluginDescription::getDescription () const\n</code></pre> <p>Gives a human-friendly description of the functionality the plugin provides. </p> <p>Returns:</p> <p>description of this plugin, or empty if not specified </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getfullname","title":"function getFullName","text":"<pre><code>inline std::string endstone::PluginDescription::getFullName () const\n</code></pre> <p>Returns the name of a plugin, including the version.</p> <p>Returns:</p> <p>a descriptive name of the plugin and respective version </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getload","title":"function getLoad","text":"<pre><code>inline PluginLoadOrder endstone::PluginDescription::getLoad () const\n</code></pre> <p>Gives the phase of server startup that the plugin should be loaded.</p> <p>Returns:</p> <p>the phase when the plugin should be loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getloadbefore","title":"function getLoadBefore","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getLoadBefore () const\n</code></pre> <p>Gets the list of plugins that should consider this plugin a soft-dependency.</p> <p>Returns:</p> <p>immutable list of plugins that should consider this plugin a soft-dependency </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getname","title":"function getName","text":"<pre><code>inline std::string endstone::PluginDescription::getName () const\n</code></pre> <p>Gives the name of the plugin. This name is a unique identifier for plugins.</p> <p>Returns:</p> <p>the name of the plugin </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getpermissions","title":"function getPermissions","text":"<pre><code>inline std::vector&lt; Permission &gt; endstone::PluginDescription::getPermissions () const\n</code></pre> <p>Gives the list of permissions the plugin will register at runtime, immediately proceeding enabling.</p> <p>Returns:</p> <p>the permissions this plugin will register </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getprefix","title":"function getPrefix","text":"<pre><code>inline std::string endstone::PluginDescription::getPrefix () const\n</code></pre> <p>Gives the token to prefix plugin-specific logging messages with.</p> <p>Returns:</p> <p>the prefixed logging token, or empty if not specified </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getprovides","title":"function getProvides","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getProvides () const\n</code></pre> <p>Gives the list of other plugin APIs which this plugin provides. These are usable for other plugins to depend on.</p> <p>Returns:</p> <p>immutable list of the plugin APIs which this plugin provides </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getsoftdepend","title":"function getSoftDepend","text":"<pre><code>inline std::vector&lt; std::string &gt; endstone::PluginDescription::getSoftDepend () const\n</code></pre> <p>Gives a list of other plugins that the plugin requires for full functionality.</p> <p>Returns:</p> <p>immutable list of the plugin's preferred dependencies </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getversion","title":"function getVersion","text":"<pre><code>inline std::string endstone::PluginDescription::getVersion () const\n</code></pre> <p>Gives the version of the plugin.</p> <p>Returns:</p> <p>the version of the plugin </p>"},{"location":"reference/cpp/classendstone_1_1PluginDescription/#function-getwebsite","title":"function getWebsite","text":"<pre><code>inline std::string endstone::PluginDescription::getWebsite () const\n</code></pre> <p>Gives the plugin's or plugin's author's website.</p> <p>Returns:</p> <p>the website of this plugin, or empty if not specified </p> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_description.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/","title":"Class endstone::PluginDisableEvent","text":"<p>ClassList &gt; endstone &gt; PluginDisableEvent</p> <p>Called when a plugin is disabled. </p> <ul> <li><code>#include &lt;endstone/event/server/plugin_disable_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PluginDisableEvent\""},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions","title":"Public Functions","text":"Type Name PluginDisableEvent (Plugin &amp; plugin)  virtual std::string getEventName () override const Plugin &amp; getPlugin () const virtual bool isCancellable () override const"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PluginDisableEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-plugindisableevent","title":"function PluginDisableEvent","text":"<pre><code>inline explicit endstone::PluginDisableEvent::PluginDisableEvent (\n    Plugin &amp; plugin\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PluginDisableEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PluginDisableEvent::getPlugin () const\n</code></pre> <p>Gets the plugin involved in this event</p> <p>Returns:</p> <p>Plugin for this event </p>"},{"location":"reference/cpp/classendstone_1_1PluginDisableEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PluginDisableEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_disable_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/","title":"Class endstone::PluginEnableEvent","text":"<p>ClassList &gt; endstone &gt; PluginEnableEvent</p> <p>Called when a plugin is enabled. </p> <ul> <li><code>#include &lt;endstone/event/server/plugin_enable_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"PluginEnableEvent\""},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions","title":"Public Functions","text":"Type Name PluginEnableEvent (Plugin &amp; plugin)  virtual std::string getEventName () override const Plugin &amp; getPlugin () const virtual bool isCancellable () override const"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::PluginEnableEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-pluginenableevent","title":"function PluginEnableEvent","text":"<pre><code>inline explicit endstone::PluginEnableEvent::PluginEnableEvent (\n    Plugin &amp; plugin\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::PluginEnableEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-getplugin","title":"function getPlugin","text":"<pre><code>inline Plugin &amp; endstone::PluginEnableEvent::getPlugin () const\n</code></pre> <p>Gets the plugin involved in this event</p> <p>Returns:</p> <p>Plugin for this event </p>"},{"location":"reference/cpp/classendstone_1_1PluginEnableEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::PluginEnableEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_enable_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/","title":"Class endstone::PluginLoader","text":"<p>ClassList &gt; endstone &gt; PluginLoader</p> <p>Represents a plugin loader, which handles direct access to specific types of plugins. </p> <ul> <li><code>#include &lt;endstone/plugin/plugin_loader.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#public-functions","title":"Public Functions","text":"Type Name PluginLoader (Server &amp; server)  PluginLoader (const PluginLoader &amp;) = delete virtual void disablePlugin (Plugin &amp; plugin) const virtual void enablePlugin (Plugin &amp; plugin) const Server &amp; getServer () constRetrieves the Server object associated with thePluginLoader . virtual std::vector&lt; Plugin * &gt; loadPlugins (const std::string &amp; directory) = 0 PluginLoader &amp; operator= (const PluginLoader &amp;) = delete virtual ~PluginLoader () = default"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#protected-attributes","title":"Protected Attributes","text":"Type Name Server &amp; server_"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#protected-functions","title":"Protected Functions","text":"Type Name void initPlugin (Plugin &amp; plugin, Logger &amp; logger, std::filesystem::path data_folder)"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-pluginloader-12","title":"function PluginLoader [\u00bd]","text":"<pre><code>inline explicit endstone::PluginLoader::PluginLoader (\n    Server &amp; server\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-pluginloader-22","title":"function PluginLoader [2/2]","text":"<pre><code>endstone::PluginLoader::PluginLoader (\n    const PluginLoader &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-disableplugin","title":"function disablePlugin","text":"<pre><code>inline virtual void endstone::PluginLoader::disablePlugin (\n    Plugin &amp; plugin\n) const\n</code></pre> <p>Disables the specified plugin Attempting to disable a plugin that is not enabled will have no effect</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to disable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-enableplugin","title":"function enablePlugin","text":"<pre><code>inline virtual void endstone::PluginLoader::enablePlugin (\n    Plugin &amp; plugin\n) const\n</code></pre> <p>Enables the specified plugin Attempting to enable a plugin that is already enabled will have no effect</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to enable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-getserver","title":"function getServer","text":"<p>Retrieves the Server object associated with thePluginLoader . <pre><code>inline Server &amp; endstone::PluginLoader::getServer () const\n</code></pre></p> <p>This function returns a reference to the Server object that the PluginLoader is associated with.</p> <p>Returns:</p> <p>The Server reference. </p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-loadplugins","title":"function loadPlugins","text":"<pre><code>virtual std::vector&lt; Plugin * &gt; endstone::PluginLoader::loadPlugins (\n    const std::string &amp; directory\n) = 0\n</code></pre> <p>Loads the plugin contained within the specified directory</p> <p>Parameters:</p> <ul> <li><code>directory</code> Directory to check for plugins </li> </ul> <p>Returns:</p> <p>A list of all plugins loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-operator","title":"function operator=","text":"<pre><code>PluginLoader &amp; endstone::PluginLoader::operator= (\n    const PluginLoader &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-pluginloader","title":"function ~PluginLoader","text":"<pre><code>virtual endstone::PluginLoader::~PluginLoader () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginLoader/#variable-server_","title":"variable server_","text":"<pre><code>Server&amp; endstone::PluginLoader::server_;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginLoader/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginLoader/#function-initplugin","title":"function initPlugin","text":"<pre><code>inline void endstone::PluginLoader::initPlugin (\n    Plugin &amp; plugin,\n    Logger &amp; logger,\n    std::filesystem::path data_folder\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_loader.h</code></p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/","title":"Class endstone::PluginManager","text":"<p>ClassList &gt; endstone &gt; PluginManager</p> <p>Represents a plugin manager that handles all plugins from the Server .</p> <ul> <li><code>#include &lt;endstone/plugin/plugin_manager.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#public-functions","title":"Public Functions","text":"Type Name PluginManager () = default PluginManager (PluginManager const &amp;) = delete virtual Permission * addPermission (std::unique_ptr&lt; Permission &gt; perm) = 0 virtual void callEvent (Event &amp; event) = 0 virtual void clearPlugins () = 0 virtual void disablePlugin (Plugin &amp; plugin) const = 0 virtual void disablePlugins () const = 0 virtual void enablePlugin (Plugin &amp; plugin) const = 0 virtual void enablePlugins () const = 0 virtual std::unordered_set&lt; Permissible * &gt; getDefaultPermSubscriptions (bool op) const = 0 virtual std::unordered_set&lt; Permission * &gt; getDefaultPermissions (bool op) const = 0 virtual Permission * getPermission (std::string name) const = 0 virtual std::unordered_set&lt; Permissible * &gt; getPermissionSubscriptions (std::string permission) const = 0 virtual std::unordered_set&lt; Permission * &gt; getPermissions () const = 0 virtual Plugin * getPlugin (const std::string &amp; name) const = 0 virtual std::vector&lt; Plugin * &gt; getPlugins () const = 0 virtual bool isPluginEnabled (const std::string &amp; name) const = 0 virtual bool isPluginEnabled (Plugin * plugin) const = 0 virtual std::vector&lt; Plugin * &gt; loadPlugins (const std::string &amp; directory) = 0 PluginManager &amp; operator= (PluginManager const &amp;) = delete virtual void recalculatePermissionDefaults (Permission &amp; perm) = 0 virtual void registerEvent (std::string event, std::function&lt; void(Event &amp;)&gt; executor, EventPriority priority, Plugin &amp; plugin, bool ignore_cancelled) = 0 virtual void registerLoader (std::unique_ptr&lt; PluginLoader &gt; loader) = 0 virtual void removePermission (Permission &amp; perm) = 0 virtual void removePermission (std::string name) = 0 virtual void subscribeToDefaultPerms (bool op, Permissible &amp; permissible) = 0 virtual void subscribeToPermission (std::string permission, Permissible &amp; permissible) = 0 virtual void unsubscribeFromDefaultPerms (bool op, Permissible &amp; permissible) = 0 virtual void unsubscribeFromPermission (std::string permission, Permissible &amp; permissible) = 0 virtual ~PluginManager () = default"},{"location":"reference/cpp/classendstone_1_1PluginManager/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-pluginmanager-12","title":"function PluginManager [\u00bd]","text":"<pre><code>endstone::PluginManager::PluginManager () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-pluginmanager-22","title":"function PluginManager [2/2]","text":"<pre><code>endstone::PluginManager::PluginManager (\n    PluginManager const &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-addpermission","title":"function addPermission","text":"<pre><code>virtual Permission * endstone::PluginManager::addPermission (\n    std::unique_ptr&lt; Permission &gt; perm\n) = 0\n</code></pre> <p>Adds a Permission to this plugin manager.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to add </li> </ul> <p>Returns:</p> <p>Permission, or nullptr if a permission is already defined with the given name of the new permission </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-callevent","title":"function callEvent","text":"<pre><code>virtual void endstone::PluginManager::callEvent (\n    Event &amp; event\n) = 0\n</code></pre> <p>Calls an event which will be passed to plugins.</p> <p>Parameters:</p> <ul> <li><code>event</code> Event to be called </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-clearplugins","title":"function clearPlugins","text":"<pre><code>virtual void endstone::PluginManager::clearPlugins () = 0\n</code></pre> <p>Disables and removes all plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-disableplugin","title":"function disablePlugin","text":"<pre><code>virtual void endstone::PluginManager::disablePlugin (\n    Plugin &amp; plugin\n) const = 0\n</code></pre> <p>Disables the specified plugin Attempting to disable a plugin that is not enabled will have no effect</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to disable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-disableplugins","title":"function disablePlugins","text":"<pre><code>virtual void endstone::PluginManager::disablePlugins () const = 0\n</code></pre> <p>Disables all the loaded plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-enableplugin","title":"function enablePlugin","text":"<pre><code>virtual void endstone::PluginManager::enablePlugin (\n    Plugin &amp; plugin\n) const = 0\n</code></pre> <p>Enables the specified plugin Attempting to enable a plugin that is already enabled will have no effect</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to enable </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-enableplugins","title":"function enablePlugins","text":"<pre><code>virtual void endstone::PluginManager::enablePlugins () const = 0\n</code></pre> <p>Enable all the loaded plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getdefaultpermsubscriptions","title":"function getDefaultPermSubscriptions","text":"<pre><code>virtual std::unordered_set&lt; Permissible * &gt; endstone::PluginManager::getDefaultPermSubscriptions (\n    bool op\n) const = 0\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given default list, by op status</p> <p>Parameters:</p> <ul> <li><code>op</code> Default list to query for </li> </ul> <p>Returns:</p> <p>Set containing all subscribed permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getdefaultpermissions","title":"function getDefaultPermissions","text":"<pre><code>virtual std::unordered_set&lt; Permission * &gt; endstone::PluginManager::getDefaultPermissions (\n    bool op\n) const = 0\n</code></pre> <p>Gets the default permissions for the given op status</p> <p>Parameters:</p> <ul> <li><code>op</code> Which set of default permissions to get </li> </ul> <p>Returns:</p> <p>The default permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getpermission","title":"function getPermission","text":"<pre><code>virtual Permission * endstone::PluginManager::getPermission (\n    std::string name\n) const = 0\n</code></pre> <p>Gets a Permission from its fully qualified name</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the permission </li> </ul> <p>Returns:</p> <p>Permission, or null if none </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getpermissionsubscriptions","title":"function getPermissionSubscriptions","text":"<pre><code>virtual std::unordered_set&lt; Permissible * &gt; endstone::PluginManager::getPermissionSubscriptions (\n    std::string permission\n) const = 0\n</code></pre> <p>Gets a set containing all subscribed Permissibles to the given permission, by name</p> <p>Parameters:</p> <ul> <li><code>permission</code> Permission to query for </li> </ul> <p>Returns:</p> <p>Set containing all subscribed permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getpermissions","title":"function getPermissions","text":"<pre><code>virtual std::unordered_set&lt; Permission * &gt; endstone::PluginManager::getPermissions () const = 0\n</code></pre> <p>Gets a set of all registered permissions.</p> <p>This set is a copy and will not be modified live.</p> <p>Returns:</p> <p>Set containing all current registered permissions </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getplugin","title":"function getPlugin","text":"<pre><code>virtual Plugin * endstone::PluginManager::getPlugin (\n    const std::string &amp; name\n) const = 0\n</code></pre> <p>Checks if the given plugin is loaded and returns it when applicable. Please note that the name of the plugin is case-sensitive</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the plugin to check </li> </ul> <p>Returns:</p> <p>Plugin if it exists, otherwise nullptr </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-getplugins","title":"function getPlugins","text":"<pre><code>virtual std::vector&lt; Plugin * &gt; endstone::PluginManager::getPlugins () const = 0\n</code></pre> <p>Gets a list of all currently loaded plugins</p> <p>Returns:</p> <p>List of Plugins </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-ispluginenabled-12","title":"function isPluginEnabled [\u00bd]","text":"<pre><code>virtual bool endstone::PluginManager::isPluginEnabled (\n    const std::string &amp; name\n) const = 0\n</code></pre> <p>Checks if the given plugin is enabled or not Please note that the name of the plugin is case-sensitive.</p> <p>Parameters:</p> <ul> <li><code>name</code> Name of the plugin to check </li> </ul> <p>Returns:</p> <p>true if the plugin is enabled, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-ispluginenabled-22","title":"function isPluginEnabled [2/2]","text":"<pre><code>virtual bool endstone::PluginManager::isPluginEnabled (\n    Plugin * plugin\n) const = 0\n</code></pre> <p>Checks if the given plugin is enabled or not</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Plugin to check </li> </ul> <p>Returns:</p> <p>true if the plugin is enabled, otherwise false </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-loadplugins","title":"function loadPlugins","text":"<pre><code>virtual std::vector&lt; Plugin * &gt; endstone::PluginManager::loadPlugins (\n    const std::string &amp; directory\n) = 0\n</code></pre> <p>Loads the plugin contained within the specified directory</p> <p>Parameters:</p> <ul> <li><code>directory</code> Directory to check for plugins </li> </ul> <p>Returns:</p> <p>A list of all plugins loaded </p>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-operator","title":"function operator=","text":"<pre><code>PluginManager &amp; endstone::PluginManager::operator= (\n    PluginManager const &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-recalculatepermissiondefaults","title":"function recalculatePermissionDefaults","text":"<pre><code>virtual void endstone::PluginManager::recalculatePermissionDefaults (\n    Permission &amp; perm\n) = 0\n</code></pre> <p>Recalculates the defaults for the given Permission.</p> <p>This will have no effect if the specified permission is not registered here.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to recalculate </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-registerevent","title":"function registerEvent","text":"<pre><code>virtual void endstone::PluginManager::registerEvent (\n    std::string event,\n    std::function&lt; void( Event &amp;)&gt; executor,\n    EventPriority priority,\n    Plugin &amp; plugin,\n    bool ignore_cancelled\n) = 0\n</code></pre> <p>Registers the given event</p> <p>Parameters:</p> <ul> <li><code>event</code> Event name to register </li> <li><code>executor</code> EventExecutor to register </li> <li><code>priority</code> Priority of this event </li> <li><code>plugin</code> Plugin to register </li> <li><code>ignore_cancelled</code> Do not call executor if event was already cancelled </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-registerloader","title":"function registerLoader","text":"<pre><code>virtual void endstone::PluginManager::registerLoader (\n    std::unique_ptr&lt; PluginLoader &gt; loader\n) = 0\n</code></pre> <p>Registers the specified plugin loader</p> <p>Parameters:</p> <ul> <li><code>loader</code> PluginLoader to register </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-removepermission-12","title":"function removePermission [\u00bd]","text":"<pre><code>virtual void endstone::PluginManager::removePermission (\n    Permission &amp; perm\n) = 0\n</code></pre> <p>Removes a Permission registration from this plugin manager.</p> <p>If the specified permission does not exist in this plugin manager, nothing will happen. Removing a permission registration will not remove the permission from any Permissibles that have it.</p> <p>Parameters:</p> <ul> <li><code>perm</code> Permission to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-removepermission-22","title":"function removePermission [2/2]","text":"<pre><code>virtual void endstone::PluginManager::removePermission (\n    std::string name\n) = 0\n</code></pre> <p>Removes a Permission registration from this plugin manager.</p> <p>If the specified permission does not exist in this plugin manager, nothing will happen. Removing a permission registration will not remove the permission from any Permissibles that have it.</p> <p>Parameters:</p> <ul> <li><code>name</code> Permission to remove </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-subscribetodefaultperms","title":"function subscribeToDefaultPerms","text":"<pre><code>virtual void endstone::PluginManager::subscribeToDefaultPerms (\n    bool op,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Subscribes to the given Default permissions by operator status</p> <p>If the specified defaults change in any form, the Permissible will be asked to recalculate.</p> <p>Parameters:</p> <ul> <li><code>op</code> Default list to subscribe to </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-subscribetopermission","title":"function subscribeToPermission","text":"<pre><code>virtual void endstone::PluginManager::subscribeToPermission (\n    std::string permission,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Subscribes the given Permissible for information about the requested Permission, by name. If the specified Permission changes in any form, the Permissible will be asked to recalculate.</p> <p>Parameters:</p> <ul> <li><code>permission</code> Permission to subscribe to </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-unsubscribefromdefaultperms","title":"function unsubscribeFromDefaultPerms","text":"<pre><code>virtual void endstone::PluginManager::unsubscribeFromDefaultPerms (\n    bool op,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Unsubscribes from the given Default permissions by operator status</p> <p>Parameters:</p> <ul> <li><code>op</code> Default list to unsubscribe from </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-unsubscribefrompermission","title":"function unsubscribeFromPermission","text":"<pre><code>virtual void endstone::PluginManager::unsubscribeFromPermission (\n    std::string permission,\n    Permissible &amp; permissible\n) = 0\n</code></pre> <p>Unsubscribes the given Permissible for information about the requested Permission, by name.</p> <p>Parameters:</p> <ul> <li><code>permission</code> Permission to unsubscribe from </li> <li><code>permissible</code> Permissible subscribing </li> </ul>"},{"location":"reference/cpp/classendstone_1_1PluginManager/#function-pluginmanager","title":"function ~PluginManager","text":"<pre><code>virtual endstone::PluginManager::~PluginManager () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_manager.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Position/","title":"Class endstone::Position","text":"<p>ClassList &gt; endstone &gt; Position</p> <p>Represents a 3-dimensional position in a dimension within a level. </p> <ul> <li><code>#include &lt;endstone/level/position.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Vector</p> <p>Inherited by the following classes: endstone::Location</p>"},{"location":"reference/cpp/classendstone_1_1Position/#public-functions","title":"Public Functions","text":"Type Name Position (Dimension * dimension, float x, float y, float z)  Dimension * getDimension () const void setDimension (Dimension &amp; dimension)"},{"location":"reference/cpp/classendstone_1_1Position/#public-functions-inherited-from-endstonevector","title":"Public Functions inherited from endstone::Vector","text":"<p>See endstone::Vector</p> Type Name constexpr Vector ()  constexpr Vector (T x, T y, T z)  constexpr T distance (const Vector&lt; T &gt; &amp; other) const constexpr T distanceSquared (const Vector&lt; T &gt; &amp; other) const constexpr T getX () const constexpr T getY () const constexpr T getZ () const constexpr T length () const constexpr T lengthSquared () const constexpr Vector&lt; T &gt; operator* (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator* (T scalar) const Vector&lt; T &gt; &amp; operator*= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator+ (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator+ (T scalar) const Vector&lt; T &gt; &amp; operator+= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator- (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator- (T scalar) const Vector&lt; T &gt; &amp; operator-= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator/ (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator/ (T scalar) const Vector&lt; T &gt; &amp; operator/= (const Vector&lt; T &gt; &amp; other)  constexpr void setX (T x)  constexpr void setY (T y)  constexpr void setZ (T z)  std::string toString () const"},{"location":"reference/cpp/classendstone_1_1Position/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Position/#function-position","title":"function Position","text":"<pre><code>inline endstone::Position::Position (\n    Dimension * dimension,\n    float x,\n    float y,\n    float z\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Position/#function-getdimension","title":"function getDimension","text":"<pre><code>inline Dimension * endstone::Position::getDimension () const\n</code></pre> <p>Gets the dimension that this position resides in</p> <p>Returns:</p> <p>Dimension that contains this position, or nullptr if the dimension is not set. </p>"},{"location":"reference/cpp/classendstone_1_1Position/#function-setdimension","title":"function setDimension","text":"<pre><code>inline void endstone::Position::setDimension (\n    Dimension &amp; dimension\n) \n</code></pre> <p>Sets the dimension that this position resides in</p> <p>Parameters:</p> <ul> <li><code>dimension</code> New dimension that this position resides in </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/level/position.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/","title":"Class endstone::Scheduler","text":"<p>ClassList &gt; endstone &gt; Scheduler</p> <p>Represents a scheduler that executes various tasks. </p> <ul> <li><code>#include &lt;endstone/scheduler/scheduler.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#public-functions","title":"Public Functions","text":"Type Name virtual void cancelTask (TaskId id) = 0 virtual void cancelTasks (Plugin &amp; plugin) = 0 virtual std::vector&lt; Task * &gt; getPendingTasks () = 0 virtual bool isQueued (TaskId id) = 0 virtual bool isRunning (TaskId id) = 0 virtual std::shared_ptr&lt; Task &gt; runTask (Plugin &amp; plugin, std::function&lt; void()&gt; task) = 0 virtual std::shared_ptr&lt; Task &gt; runTaskLater (Plugin &amp; plugin, std::function&lt; void()&gt; task, std::uint64_t delay) = 0 virtual std::shared_ptr&lt; Task &gt; runTaskTimer (Plugin &amp; plugin, std::function&lt; void()&gt; task, std::uint64_t delay, std::uint64_t period) = 0 virtual ~Scheduler () = default"},{"location":"reference/cpp/classendstone_1_1Scheduler/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-canceltask","title":"function cancelTask","text":"<pre><code>virtual void endstone::Scheduler::cancelTask (\n    TaskId id\n) = 0\n</code></pre> <p>Removes task from scheduler.</p> <p>Parameters:</p> <ul> <li><code>taskId</code> Id number of task to be removed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-canceltasks","title":"function cancelTasks","text":"<pre><code>virtual void endstone::Scheduler::cancelTasks (\n    Plugin &amp; plugin\n) = 0\n</code></pre> <p>Removes all tasks associated with a particular plugin from the scheduler.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> Owner of tasks to be removed </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-getpendingtasks","title":"function getPendingTasks","text":"<pre><code>virtual std::vector&lt; Task * &gt; endstone::Scheduler::getPendingTasks () = 0\n</code></pre> <p>Returns a vector of all pending tasks.</p> <p>The ordering of the tasks is NOT related to their order of execution.</p> <p>Returns:</p> <p>Pending tasks </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-isqueued","title":"function isQueued","text":"<pre><code>virtual bool endstone::Scheduler::isQueued (\n    TaskId id\n) = 0\n</code></pre> <p>Check if the task queued to be run later.</p> <p>Parameters:</p> <ul> <li><code>taskId</code> The task to check.</li> </ul> <p>Returns:</p> <p>If the task is queued to be run. </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-isrunning","title":"function isRunning","text":"<pre><code>virtual bool endstone::Scheduler::isRunning (\n    TaskId id\n) = 0\n</code></pre> <p>Check if the task currently running.</p> <p>Parameters:</p> <ul> <li><code>taskId</code> The task to check.</li> </ul> <p>Returns:</p> <p>If the task is currently running. </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtask","title":"function runTask","text":"<pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTask (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task\n) = 0\n</code></pre> <p>Returns a task that will be executed synchronously on the next server tick.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtasklater","title":"function runTaskLater","text":"<pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskLater (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task,\n    std::uint64_t delay\n) = 0\n</code></pre> <p>Returns a task that will be executed synchronously after the specified number of server ticks.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> <li><code>delay</code> the ticks to wait before running the task </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-runtasktimer","title":"function runTaskTimer","text":"<pre><code>virtual std::shared_ptr&lt; Task &gt; endstone::Scheduler::runTaskTimer (\n    Plugin &amp; plugin,\n    std::function&lt; void()&gt; task,\n    std::uint64_t delay,\n    std::uint64_t period\n) = 0\n</code></pre> <p>Returns a task that will be executed repeatedly (and synchronously) until cancelled, starting after the specified number of server ticks.</p> <p>Parameters:</p> <ul> <li><code>plugin</code> the reference to the plugin scheduling task </li> <li><code>task</code> the task to be run </li> <li><code>delay</code> the ticks to wait before running the task </li> <li><code>period</code> the ticks to wait between runs </li> </ul> <p>Returns:</p> <p>a Task that contains the id number (nullptr if task is empty) </p>"},{"location":"reference/cpp/classendstone_1_1Scheduler/#function-scheduler","title":"function ~Scheduler","text":"<pre><code>virtual endstone::Scheduler::~Scheduler () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/scheduler.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Server/","title":"Class endstone::Server","text":"<p>ClassList &gt; endstone &gt; Server</p> <p>Represents a server implementation. </p> <ul> <li><code>#include &lt;endstone/server.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string BroadcastChannelAdmin   = = \"endstone.broadcast.admin\"Used for all administrative messages, such as an operator using a command. const std::string BroadcastChannelUser   = = \"endstone.broadcast.user\"Used for all announcement messages, such as informing users that a player has joined."},{"location":"reference/cpp/classendstone_1_1Server/#public-functions","title":"Public Functions","text":"Type Name Server () = default Server (const Server &amp;) = delete virtual void broadcast (const std::string &amp; message, const std::string &amp; permission) const = 0Broadcasts the specified message to every user with the given permission name. virtual void broadcastMessage (const std::string &amp; message) const = 0Broadcasts the specified message to every user with permission endstone.broadcast.user. void broadcastMessage (const fmt::format_string&lt; Args... &gt; format, Args &amp;&amp;... args) const virtual bool dispatchCommand (CommandSender &amp; sender, std::string command) const = 0Dispatches a command on this server, and executes it if found. virtual CommandSender &amp; getCommandSender () const = 0Gets a CommandSender for this server. virtual Level * getLevel (std::string name) const = 0Gets the level with the given name. virtual std::vector&lt; Level * &gt; getLevels () const = 0Gets a list of all levels on this server. virtual Logger &amp; getLogger () const = 0Returns the primary logger associated with this server instance. virtual int getMaxPlayers () const = 0Get the maximum amount of players which can login to this server. virtual std::string getMinecraftVersion () const = 0Gets the Minecraft version that this server is running. virtual std::string getName () const = 0Gets the name of this server implementation. virtual std::vector&lt; Player * &gt; getOnlinePlayers () const = 0Gets a list of all currently online players. virtual Player * getPlayer (endstone::UUID id) const = 0Gets the player with the given UUID . virtual Player * getPlayer (std::string name) const = 0Gets the player with the exact given name, case insensitive. virtual PluginCommand * getPluginCommand (std::string name) const = 0Gets a PluginCommand with the given name or alias. virtual PluginManager &amp; getPluginManager () const = 0Gets the plugin manager for interfacing with plugins. virtual Scheduler &amp; getScheduler () const = 0Gets the scheduler for managing scheduled events. virtual std::string getVersion () const = 0Gets the version string of this server implementation. virtual bool isPrimaryThread () const = 0Checks the current thread against the expected primary server thread. Server &amp; operator= (const Server &amp;) = delete virtual void setMaxPlayers (int max_players) = 0Set the maximum amount of players allowed to be logged in at once. virtual ~Server () = default"},{"location":"reference/cpp/classendstone_1_1Server/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Server/#variable-broadcastchanneladmin","title":"variable BroadcastChannelAdmin","text":"<pre><code>const std::string endstone::Server::BroadcastChannelAdmin;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#variable-broadcastchanneluser","title":"variable BroadcastChannelUser","text":"<pre><code>const std::string endstone::Server::BroadcastChannelUser;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Server/#function-server-12","title":"function Server [\u00bd]","text":"<pre><code>endstone::Server::Server () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-server-22","title":"function Server [2/2]","text":"<pre><code>endstone::Server::Server (\n    const Server &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-broadcast","title":"function broadcast","text":"<p>Broadcasts the specified message to every user with the given permission name. <pre><code>virtual void endstone::Server::broadcast (\n    const std::string &amp; message,\n    const std::string &amp; permission\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> message to broadcast </li> <li><code>permission</code> the required permission Permissibles must have to receive the broadcast </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#function-broadcastmessage-12","title":"function broadcastMessage [\u00bd]","text":"<p>Broadcasts the specified message to every user with permission endstone.broadcast.user. <pre><code>virtual void endstone::Server::broadcastMessage (\n    const std::string &amp; message\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>message</code> the message </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#function-broadcastmessage-22","title":"function broadcastMessage [2/2]","text":"<pre><code>template&lt;typename... Args&gt;\ninline void endstone::Server::broadcastMessage (\n    const fmt::format_string&lt; Args... &gt; format,\n    Args &amp;&amp;... args\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-dispatchcommand","title":"function dispatchCommand","text":"<p>Dispatches a command on this server, and executes it if found. <pre><code>virtual bool endstone::Server::dispatchCommand (\n    CommandSender &amp; sender,\n    std::string command\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>sender</code> the apparent sender of the command </li> <li><code>command</code> the command + arguments. </li> </ul> <p>Returns:</p> <p>true if execution is successful, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getcommandsender","title":"function getCommandSender","text":"<p>Gets a CommandSender for this server. <pre><code>virtual CommandSender &amp; endstone::Server::getCommandSender () const = 0\n</code></pre></p> <p>Returns:</p> <p>a console command sender </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getlevel","title":"function getLevel","text":"<p>Gets the level with the given name. <pre><code>virtual Level * endstone::Server::getLevel (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the level to retrieve </li> </ul> <p>Returns:</p> <p>a level with the given name, or nullptr if none exists </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getlevels","title":"function getLevels","text":"<p>Gets a list of all levels on this server. <pre><code>virtual std::vector&lt; Level * &gt; endstone::Server::getLevels () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of levels </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getlogger","title":"function getLogger","text":"<p>Returns the primary logger associated with this server instance. <pre><code>virtual Logger &amp; endstone::Server::getLogger () const = 0\n</code></pre></p> <p>Returns:</p> <p>Logger associated with this server </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getmaxplayers","title":"function getMaxPlayers","text":"<p>Get the maximum amount of players which can login to this server. <pre><code>virtual int endstone::Server::getMaxPlayers () const = 0\n</code></pre></p> <p>Returns:</p> <p>the amount of players this server allows </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getminecraftversion","title":"function getMinecraftVersion","text":"<p>Gets the Minecraft version that this server is running. <pre><code>virtual std::string endstone::Server::getMinecraftVersion () const = 0\n</code></pre></p> <p>Returns:</p> <p>version of Minecraft </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getname","title":"function getName","text":"<p>Gets the name of this server implementation. <pre><code>virtual std::string endstone::Server::getName () const = 0\n</code></pre></p> <p>Returns:</p> <p>name of this server implementation </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getonlineplayers","title":"function getOnlinePlayers","text":"<p>Gets a list of all currently online players. <pre><code>virtual std::vector&lt; Player * &gt; endstone::Server::getOnlinePlayers () const = 0\n</code></pre></p> <p>Returns:</p> <p>a list of currently online players. </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getplayer-12","title":"function getPlayer [\u00bd]","text":"<p>Gets the player with the given UUID . <pre><code>virtual Player * endstone::Server::getPlayer (\n    endstone::UUID id\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>id</code> UUID of the player to retrieve </li> </ul> <p>Returns:</p> <p>a player object if one was found, null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getplayer-22","title":"function getPlayer [2/2]","text":"<p>Gets the player with the exact given name, case insensitive. <pre><code>virtual Player * endstone::Server::getPlayer (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> Exact name of the player to retrieve </li> </ul> <p>Returns:</p> <p>a player object if one was found, null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getplugincommand","title":"function getPluginCommand","text":"<p>Gets a PluginCommand with the given name or alias. <pre><code>virtual PluginCommand * endstone::Server::getPluginCommand (\n    std::string name\n) const = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>name</code> the name of the command to retrieve </li> </ul> <p>Returns:</p> <p>a plugin command if found, null otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getpluginmanager","title":"function getPluginManager","text":"<p>Gets the plugin manager for interfacing with plugins. <pre><code>virtual PluginManager &amp; endstone::Server::getPluginManager () const = 0\n</code></pre></p> <p>Returns:</p> <p>a plugin manager for this Server instance </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getscheduler","title":"function getScheduler","text":"<p>Gets the scheduler for managing scheduled events. <pre><code>virtual Scheduler &amp; endstone::Server::getScheduler () const = 0\n</code></pre></p> <p>Returns:</p> <p>a scheduling service for this server </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-getversion","title":"function getVersion","text":"<p>Gets the version string of this server implementation. <pre><code>virtual std::string endstone::Server::getVersion () const = 0\n</code></pre></p> <p>Returns:</p> <p>version of this server implementation </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-isprimarythread","title":"function isPrimaryThread","text":"<p>Checks the current thread against the expected primary server thread. <pre><code>virtual bool endstone::Server::isPrimaryThread () const = 0\n</code></pre></p> <p>Returns:</p> <p>true if the current thread matches the expected primary thread, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1Server/#function-operator","title":"function operator=","text":"<pre><code>Server &amp; endstone::Server::operator= (\n    const Server &amp;\n) = delete\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Server/#function-setmaxplayers","title":"function setMaxPlayers","text":"<p>Set the maximum amount of players allowed to be logged in at once. <pre><code>virtual void endstone::Server::setMaxPlayers (\n    int max_players\n) = 0\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>maxPlayers</code> The maximum amount of concurrent players </li> </ul>"},{"location":"reference/cpp/classendstone_1_1Server/#function-server","title":"function ~Server","text":"<pre><code>virtual endstone::Server::~Server () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/server.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/","title":"Class endstone::ServerCommandEvent","text":"<p>ClassList &gt; endstone &gt; ServerCommandEvent</p> <p>Called when the console runs a command, early in the process. More...</p> <ul> <li><code>#include &lt;endstone/event/server/server_command_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ServerCommandEvent\""},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions","title":"Public Functions","text":"Type Name ServerCommandEvent (CommandSender &amp; sender, std::string command)  std::string getCommand () const virtual std::string getEventName () override const CommandSender &amp; getSender () const virtual bool isCancellable () override const void setCommand (std::string message)"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#detailed-description","title":"Detailed Description","text":"<p>You should not use this except for a few cases like logging commands, blocking commands on certain places, or applying modifiers.</p> <p>The command message contains a slash at the start </p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ServerCommandEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-servercommandevent","title":"function ServerCommandEvent","text":"<pre><code>inline endstone::ServerCommandEvent::ServerCommandEvent (\n    CommandSender &amp; sender,\n    std::string command\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-getcommand","title":"function getCommand","text":"<pre><code>inline std::string endstone::ServerCommandEvent::getCommand () const\n</code></pre> <p>Gets the command that the server is attempting to execute from the console</p> <p>Returns:</p> <p>Command the server is attempting to execute </p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ServerCommandEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-getsender","title":"function getSender","text":"<pre><code>inline CommandSender &amp; endstone::ServerCommandEvent::getSender () const\n</code></pre> <p>Get the command sender.</p> <p>Returns:</p> <p>The sender </p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ServerCommandEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1ServerCommandEvent/#function-setcommand","title":"function setCommand","text":"<pre><code>inline void endstone::ServerCommandEvent::setCommand (\n    std::string message\n) \n</code></pre> <p>Sets the command that the server will execute</p> <p>Parameters:</p> <ul> <li><code>message</code> New message that the server will execute </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_command_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerEvent/","title":"Class endstone::ServerEvent","text":"<p>ClassList &gt; endstone &gt; ServerEvent</p> <p>Represents an Server-related event. </p> <ul> <li><code>#include &lt;endstone/event/server/server_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::BroadcastMessageEvent,  endstone::PluginDisableEvent,  endstone::PluginEnableEvent,  endstone::ServerCommandEvent,  endstone::ServerListPingEvent,  endstone::ServerLoadEvent</p>"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#public-functions","title":"Public Functions","text":"Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerEvent/#function-event-12","title":"function Event [\u00bd]","text":"<pre><code>inline explicit endstone::ServerEvent::Event (\n    bool async=false\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerEvent/#function-event-22","title":"function Event [2/2]","text":"<pre><code>endstone::ServerEvent::Event (\n    const Event &amp;\n) = delete\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/","title":"Class endstone::ServerListPingEvent","text":"<p>ClassList &gt; endstone &gt; ServerListPingEvent</p> <p>Called when a server ping is coming in. </p> <ul> <li><code>#include &lt;endstone/event/server/server_list_ping_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ServerListPingEvent\""},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions","title":"Public Functions","text":"Type Name ServerListPingEvent (std::string remote_host, int remote_port, std::string ping_response)  bool deserialize ()  virtual std::string getEventName () override const GameMode getGameMode () const std::string getLevelName () const int getLocalPort () const int getLocalPortV6 () const int getMaxPlayers () const std::string getMinecraftVersionNetwork () const std::string getMotd () const int getNetworkProtocolVersion () const int getNumPlayers () const std::string getRemoteHost () const int getRemotePort () const std::string getServerGuid () const virtual bool isCancellable () override const std::string serialize ()  void setGameMode (GameMode game_mode)  void setLevelName (std::string level_name)  void setMaxPlayers (int max_players)  void setMinecraftVersionNetwork (std::string minecraft_version_network)  void setMotd (std::string motd)  void setNumPlayers (int num_players)"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ServerListPingEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-serverlistpingevent","title":"function ServerListPingEvent","text":"<pre><code>inline endstone::ServerListPingEvent::ServerListPingEvent (\n    std::string remote_host,\n    int remote_port,\n    std::string ping_response\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-deserialize","title":"function deserialize","text":"<pre><code>bool endstone::ServerListPingEvent::deserialize () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ServerListPingEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getgamemode","title":"function getGameMode","text":"<pre><code>inline GameMode endstone::ServerListPingEvent::getGameMode () const\n</code></pre> <p>Get the current game mode.</p> <p>Returns:</p> <p>the game mode </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getlevelname","title":"function getLevelName","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getLevelName () const\n</code></pre> <p>Get the level name.</p> <p>Returns:</p> <p>the level name </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getlocalport","title":"function getLocalPort","text":"<pre><code>inline int endstone::ServerListPingEvent::getLocalPort () const\n</code></pre> <p>Get the local port of the server.</p> <p>Returns:</p> <p>The local port </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getlocalportv6","title":"function getLocalPortV6","text":"<pre><code>inline int endstone::ServerListPingEvent::getLocalPortV6 () const\n</code></pre> <p>Get the local port of the server for IPv6 support</p> <p>Returns:</p> <p>The local port for IPv6 </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getmaxplayers","title":"function getMaxPlayers","text":"<pre><code>inline int endstone::ServerListPingEvent::getMaxPlayers () const\n</code></pre> <p>Get the maximum number of players allowed.</p> <p>Returns:</p> <p>the maximum number of players </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getminecraftversionnetwork","title":"function getMinecraftVersionNetwork","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getMinecraftVersionNetwork () const\n</code></pre> <p>Get the network version of Minecraft that is supported by this server</p> <p>Returns:</p> <p>the network version of Minecraft </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getmotd","title":"function getMotd","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getMotd () const\n</code></pre> <p>Get the message of the day message.</p> <p>Returns:</p> <p>the message of the day </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getnetworkprotocolversion","title":"function getNetworkProtocolVersion","text":"<pre><code>inline int endstone::ServerListPingEvent::getNetworkProtocolVersion () const\n</code></pre> <p>Get the network protocol version of this server</p> <p>Returns:</p> <p>the network protocol version </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getnumplayers","title":"function getNumPlayers","text":"<pre><code>inline int endstone::ServerListPingEvent::getNumPlayers () const\n</code></pre> <p>Get the number of players online</p> <p>Returns:</p> <p>the number of players </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getremotehost","title":"function getRemoteHost","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getRemoteHost () const\n</code></pre> <p>Get the host the ping is coming from.</p> <p>Returns:</p> <p>The host </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getremoteport","title":"function getRemotePort","text":"<pre><code>inline int endstone::ServerListPingEvent::getRemotePort () const\n</code></pre> <p>Get the port the ping is coming from.</p> <p>Returns:</p> <p>The port </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-getserverguid","title":"function getServerGuid","text":"<pre><code>inline std::string endstone::ServerListPingEvent::getServerGuid () const\n</code></pre> <p>Get the unique identifier of the server.</p> <p>Returns:</p> <p>The server guid </p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ServerListPingEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-serialize","title":"function serialize","text":"<pre><code>std::string endstone::ServerListPingEvent::serialize () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setgamemode","title":"function setGameMode","text":"<pre><code>inline void endstone::ServerListPingEvent::setGameMode (\n    GameMode game_mode\n) \n</code></pre> <p>Set the current game mode.</p> <p>Parameters:</p> <ul> <li><code>game_mode</code> the game mode </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setlevelname","title":"function setLevelName","text":"<pre><code>inline void endstone::ServerListPingEvent::setLevelName (\n    std::string level_name\n) \n</code></pre> <p>Set the level name.</p> <p>Parameters:</p> <ul> <li><code>level_name</code> the level name </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setmaxplayers","title":"function setMaxPlayers","text":"<pre><code>inline void endstone::ServerListPingEvent::setMaxPlayers (\n    int max_players\n) \n</code></pre> <p>Set the maximum number of players allowed.</p> <p>Parameters:</p> <ul> <li><code>max_players</code> the maximum number of players </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setminecraftversionnetwork","title":"function setMinecraftVersionNetwork","text":"<pre><code>inline void endstone::ServerListPingEvent::setMinecraftVersionNetwork (\n    std::string minecraft_version_network\n) \n</code></pre> <p>Set the network version of Minecraft that is supported by this server</p> <p>Parameters:</p> <ul> <li><code>minecraft_version_network</code> the network version of Minecraft </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setmotd","title":"function setMotd","text":"<pre><code>inline void endstone::ServerListPingEvent::setMotd (\n    std::string motd\n) \n</code></pre> <p>Change the message of the day message.</p> <p>Parameters:</p> <ul> <li><code>motd</code> the message of the day </li> </ul>"},{"location":"reference/cpp/classendstone_1_1ServerListPingEvent/#function-setnumplayers","title":"function setNumPlayers","text":"<pre><code>inline void endstone::ServerListPingEvent::setNumPlayers (\n    int num_players\n) \n</code></pre> <p>Set the number of players online.</p> <p>Parameters:</p> <ul> <li><code>num_players</code> the number of players </li> </ul> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_list_ping_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/","title":"Class endstone::ServerLoadEvent","text":"<p>ClassList &gt; endstone &gt; ServerLoadEvent</p> <p>Called when either the server startup or reload has completed. </p> <ul> <li><code>#include &lt;endstone/event/server/server_load_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::ServerEvent</p>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-types","title":"Public Types","text":"Type Name enum LoadType"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ServerLoadEvent\""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions","title":"Public Functions","text":"Type Name ServerLoadEvent (LoadType type)  virtual std::string getEventName () override const LoadType getType () const virtual bool isCancellable () override const"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions-inherited-from-endstoneserverevent","title":"Public Functions inherited from endstone::ServerEvent","text":"<p>See endstone::ServerEvent</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#enum-loadtype","title":"enum LoadType","text":"<pre><code>enum endstone::ServerLoadEvent::LoadType {\n    Startup\n};\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ServerLoadEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-serverloadevent","title":"function ServerLoadEvent","text":"<pre><code>inline explicit endstone::ServerLoadEvent::ServerLoadEvent (\n    LoadType type\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ServerLoadEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-gettype","title":"function getType","text":"<pre><code>inline LoadType endstone::ServerLoadEvent::getType () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ServerLoadEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ServerLoadEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p> <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_load_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/","title":"Class endstone::SocketAddress","text":"<p>ClassList &gt; endstone &gt; SocketAddress</p> <p>Represents an IP Socket Address (hostname + port number). </p> <ul> <li><code>#include &lt;endstone/util/socket_address.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#public-functions","title":"Public Functions","text":"Type Name SocketAddress () = default SocketAddress (std::string hostname, std::uint32_t port)  const std::string &amp; getHostname () const std::uint32_t getPort () const"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-socketaddress-12","title":"function SocketAddress [\u00bd]","text":"<pre><code>endstone::SocketAddress::SocketAddress () = default\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-socketaddress-22","title":"function SocketAddress [2/2]","text":"<pre><code>inline endstone::SocketAddress::SocketAddress (\n    std::string hostname,\n    std::uint32_t port\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-gethostname","title":"function getHostname","text":"<pre><code>inline const std::string &amp; endstone::SocketAddress::getHostname () const\n</code></pre> <p>Gets the hostname.</p> <p>Returns:</p> <p>The hostname of this socket address </p>"},{"location":"reference/cpp/classendstone_1_1SocketAddress/#function-getport","title":"function getPort","text":"<pre><code>inline std::uint32_t endstone::SocketAddress::getPort () const\n</code></pre> <p>Gets the port number.</p> <p>Returns:</p> <p>The port number of this socket address </p> <p>The documentation for this class was generated from the following file <code>include/endstone/util/socket_address.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Task/","title":"Class endstone::Task","text":"<p>ClassList &gt; endstone &gt; Task</p> <p>Represents a task being executed by the scheduler. </p> <ul> <li><code>#include &lt;endstone/scheduler/task.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Task/#public-functions","title":"Public Functions","text":"Type Name virtual void cancel () = 0 virtual Plugin &amp; getOwner () const = 0 virtual TaskId getTaskId () const = 0 virtual bool isCancelled () const = 0 virtual bool isSync () const = 0 virtual ~Task () = default"},{"location":"reference/cpp/classendstone_1_1Task/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Task/#function-cancel","title":"function cancel","text":"<pre><code>virtual void endstone::Task::cancel () = 0\n</code></pre> <p>Attempts to cancel this task. </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-getowner","title":"function getOwner","text":"<pre><code>virtual Plugin &amp; endstone::Task::getOwner () const = 0\n</code></pre> <p>Returns the Plugin that owns this task.</p> <p>Returns:</p> <p>The Plugin that owns the task </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-gettaskid","title":"function getTaskId","text":"<pre><code>virtual TaskId endstone::Task::getTaskId () const = 0\n</code></pre> <p>Returns the taskId for the task.</p> <p>Returns:</p> <p>Task id number </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-iscancelled","title":"function isCancelled","text":"<pre><code>virtual bool endstone::Task::isCancelled () const = 0\n</code></pre> <p>Returns true if this task has been cancelled.</p> <p>Returns:</p> <p>true if the task has been cancelled </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-issync","title":"function isSync","text":"<pre><code>virtual bool endstone::Task::isSync () const = 0\n</code></pre> <p>Returns true if the Task is a sync task.</p> <p>Returns:</p> <p>true if the task is run by server thread </p>"},{"location":"reference/cpp/classendstone_1_1Task/#function-task","title":"function ~Task","text":"<pre><code>virtual endstone::Task::~Task () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/task.h</code></p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/","title":"Class endstone::ThunderChangeEvent","text":"<p>ClassList &gt; endstone &gt; ThunderChangeEvent</p> <p>Called when the thunder state in a world is changing. </p> <ul> <li><code>#include &lt;endstone/event/weather/thunder_change_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::WeatherEvent</p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"ThunderChangeEvent\""},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions","title":"Public Functions","text":"Type Name ThunderChangeEvent (Level &amp; level, bool to)  virtual std::string getEventName () override const virtual bool isCancellable () override const bool toThunderState () const ~ThunderChangeEvent () override"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions-inherited-from-endstoneweatherevent","title":"Public Functions inherited from endstone::WeatherEvent","text":"<p>See endstone::WeatherEvent</p> Type Name WeatherEvent (Level &amp; level)  Level &amp; getLevel () const ~WeatherEvent () override"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::ThunderChangeEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-thunderchangeevent","title":"function ThunderChangeEvent","text":"<pre><code>inline endstone::ThunderChangeEvent::ThunderChangeEvent (\n    Level &amp; level,\n    bool to\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::ThunderChangeEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::ThunderChangeEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-tothunderstate","title":"function toThunderState","text":"<pre><code>inline bool endstone::ThunderChangeEvent::toThunderState () const\n</code></pre> <p>Gets the state of thunder that the world is being set to</p> <p>Returns:</p> <p>true if the weather is being set to thundering, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1ThunderChangeEvent/#function-thunderchangeevent_1","title":"function ~ThunderChangeEvent","text":"<pre><code>endstone::ThunderChangeEvent::~ThunderChangeEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/thunder_change_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Translatable/","title":"Class endstone::Translatable","text":"<p>ClassList &gt; endstone &gt; Translatable</p> <p>Represents an object with a text representation that can be translated by the Minecraft client. </p> <ul> <li><code>#include &lt;endstone/translatable.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Translatable/#public-functions","title":"Public Functions","text":"Type Name Translatable (std::string translate, std::vector&lt; std::string &gt; with={})  const std::vector&lt; std::string &gt; &amp; getParameters () constGet the translation parameters. const std::string &amp; getTranslationKey () constGet the translation key for use in a translation component."},{"location":"reference/cpp/classendstone_1_1Translatable/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Translatable/#function-translatable","title":"function Translatable","text":"<pre><code>inline endstone::Translatable::Translatable (\n    std::string translate,\n    std::vector&lt; std::string &gt; with={}\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Translatable/#function-getparameters","title":"function getParameters","text":"<p>Get the translation parameters. <pre><code>inline const std::vector&lt; std::string &gt; &amp; endstone::Translatable::getParameters () const\n</code></pre></p> <p>Returns:</p> <p>the translation parameters </p>"},{"location":"reference/cpp/classendstone_1_1Translatable/#function-gettranslationkey","title":"function getTranslationKey","text":"<p>Get the translation key for use in a translation component. <pre><code>inline const std::string &amp; endstone::Translatable::getTranslationKey () const\n</code></pre></p> <p>Returns:</p> <p>the translation key </p> <p>The documentation for this class was generated from the following file <code>include/endstone/translatable.h</code></p>"},{"location":"reference/cpp/classendstone_1_1UUID/","title":"Class endstone::UUID","text":"<p>ClassList &gt; endstone &gt; UUID</p> <p>Implementation of Universally Unique Identifier ( UUID )More...</p> <ul> <li><code>#include &lt;endstone/util/uuid.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-attributes","title":"Public Attributes","text":"Type Name std::uint8_t data"},{"location":"reference/cpp/classendstone_1_1UUID/#public-functions","title":"Public Functions","text":"Type Name std::uint8_t * begin () noexcept const uint8_t * begin () noexcept const std::uint8_t * end () noexcept const uint8_t * end () noexcept const bool isNil () noexcept const std::string str () const void swap (UUID &amp; rhs) noexcept int version () noexcept const"},{"location":"reference/cpp/classendstone_1_1UUID/#public-static-functions","title":"Public Static Functions","text":"Type Name constexpr std::size_t size () noexcept"},{"location":"reference/cpp/classendstone_1_1UUID/#detailed-description","title":"Detailed Description","text":"<p>Adapted from https://github.com/boostorg/uuid/blob/develop/include/boost/uuid/uuid.hpp </p>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1UUID/#variable-data","title":"variable data","text":"<pre><code>std::uint8_t endstone::UUID::data[16];\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1UUID/#function-begin-12","title":"function begin [\u00bd]","text":"<pre><code>inline std::uint8_t * endstone::UUID::begin () noexcept\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-begin-22","title":"function begin [2/2]","text":"<pre><code>inline const uint8_t * endstone::UUID::begin () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-end-12","title":"function end [\u00bd]","text":"<pre><code>inline std::uint8_t * endstone::UUID::end () noexcept\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-end-22","title":"function end [2/2]","text":"<pre><code>inline const uint8_t * endstone::UUID::end () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-isnil","title":"function isNil","text":"<pre><code>inline bool endstone::UUID::isNil () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-str","title":"function str","text":"<pre><code>inline std::string endstone::UUID::str () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-swap","title":"function swap","text":"<pre><code>inline void endstone::UUID::swap (\n    UUID &amp; rhs\n) noexcept\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#function-version","title":"function version","text":"<pre><code>inline int endstone::UUID::version () noexcept const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1UUID/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1UUID/#function-size","title":"function size","text":"<pre><code>static inline constexpr std::size_t endstone::UUID::size () noexcept\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/classendstone_1_1Vector/","title":"Class endstone::Vector","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; endstone &gt; Vector</p> <p>Represents a 3-dimensional vector. </p> <ul> <li><code>#include &lt;endstone/util/vector.h&gt;</code></li> </ul>"},{"location":"reference/cpp/classendstone_1_1Vector/#public-functions","title":"Public Functions","text":"Type Name constexpr Vector ()  constexpr Vector (T x, T y, T z)  constexpr T distance (const Vector&lt; T &gt; &amp; other) const constexpr T distanceSquared (const Vector&lt; T &gt; &amp; other) const constexpr T getX () const constexpr T getY () const constexpr T getZ () const constexpr T length () const constexpr T lengthSquared () const constexpr Vector&lt; T &gt; operator* (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator* (T scalar) const Vector&lt; T &gt; &amp; operator*= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator+ (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator+ (T scalar) const Vector&lt; T &gt; &amp; operator+= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator- (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator- (T scalar) const Vector&lt; T &gt; &amp; operator-= (const Vector&lt; T &gt; &amp; other)  constexpr Vector&lt; T &gt; operator/ (const Vector&lt; T &gt; &amp; other) const Vector&lt; T &gt; operator/ (T scalar) const Vector&lt; T &gt; &amp; operator/= (const Vector&lt; T &gt; &amp; other)  constexpr void setX (T x)  constexpr void setY (T y)  constexpr void setZ (T z)  std::string toString () const"},{"location":"reference/cpp/classendstone_1_1Vector/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Vector/#function-vector-12","title":"function Vector [\u00bd]","text":"<pre><code>inline constexpr endstone::Vector::Vector () \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-vector-22","title":"function Vector [2/2]","text":"<pre><code>inline constexpr endstone::Vector::Vector (\n    T x,\n    T y,\n    T z\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-distance","title":"function distance","text":"<pre><code>inline constexpr T endstone::Vector::distance (\n    const Vector &lt; T &gt; &amp; other\n) const\n</code></pre> <p>Get the distance between this vector and another.</p> <p>Parameters:</p> <ul> <li><code>other</code> The other vector </li> </ul> <p>Returns:</p> <p>the distance </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-distancesquared","title":"function distanceSquared","text":"<pre><code>inline constexpr T endstone::Vector::distanceSquared (\n    const Vector &lt; T &gt; &amp; other\n) const\n</code></pre> <p>Get the squared distance between this vector and another.</p> <p>Parameters:</p> <ul> <li><code>other</code> The other vector </li> </ul> <p>Returns:</p> <p>the distance </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-getx","title":"function getX","text":"<pre><code>inline constexpr T endstone::Vector::getX () const\n</code></pre> <p>Gets the X component.</p> <p>Returns:</p> <p>The X component. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-gety","title":"function getY","text":"<pre><code>inline constexpr T endstone::Vector::getY () const\n</code></pre> <p>Gets the Y component.</p> <p>Returns:</p> <p>The Y component. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-getz","title":"function getZ","text":"<pre><code>inline constexpr T endstone::Vector::getZ () const\n</code></pre> <p>Gets the Z component.</p> <p>Returns:</p> <p>The Z component. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-length","title":"function length","text":"<pre><code>inline constexpr T endstone::Vector::length () const\n</code></pre> <p>Gets the magnitude of the vector, defined as sqrt(x<sup>2+y</sup>2+z^2).</p> <p>Returns:</p> <p>the magnitude </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-lengthsquared","title":"function lengthSquared","text":"<pre><code>inline constexpr T endstone::Vector::lengthSquared () const\n</code></pre> <p>Gets the magnitude of the vector squared.</p> <p>Returns:</p> <p>the magnitude </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator","title":"function operator*","text":"<pre><code>inline constexpr Vector &lt; T &gt; endstone::Vector::operator* (\n    const Vector &lt; T &gt; &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_1","title":"function operator*","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator* (\n    T scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_2","title":"function operator*=","text":"<pre><code>inline Vector &lt; T &gt; &amp; endstone::Vector::operator*= (\n    const Vector &lt; T &gt; &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_3","title":"function operator+","text":"<pre><code>inline constexpr Vector &lt; T &gt; endstone::Vector::operator+ (\n    const Vector &lt; T &gt; &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_4","title":"function operator+","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator+ (\n    T scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_5","title":"function operator+=","text":"<pre><code>inline Vector &lt; T &gt; &amp; endstone::Vector::operator+= (\n    const Vector &lt; T &gt; &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator-","title":"function operator-","text":"<pre><code>inline constexpr Vector &lt; T &gt; endstone::Vector::operator- (\n    const Vector &lt; T &gt; &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator-_1","title":"function operator-","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator- (\n    T scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator-_2","title":"function operator-=","text":"<pre><code>inline Vector &lt; T &gt; &amp; endstone::Vector::operator-= (\n    const Vector &lt; T &gt; &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_6","title":"function operator/","text":"<pre><code>inline constexpr Vector &lt; T &gt; endstone::Vector::operator/ (\n    const Vector &lt; T &gt; &amp; other\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_7","title":"function operator/","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator/ (\n    T scalar\n) const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-operator_8","title":"function operator/=","text":"<pre><code>inline Vector &lt; T &gt; &amp; endstone::Vector::operator/= (\n    const Vector &lt; T &gt; &amp; other\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-setx","title":"function setX","text":"<pre><code>inline constexpr void endstone::Vector::setX (\n    T x\n) \n</code></pre> <p>Set the X component.</p> <p>Parameters:</p> <ul> <li><code>x</code> The new X component. </li> </ul> <p>Returns:</p> <p>This vector. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-sety","title":"function setY","text":"<pre><code>inline constexpr void endstone::Vector::setY (\n    T y\n) \n</code></pre> <p>Set the Y component.</p> <p>Parameters:</p> <ul> <li><code>y</code> The new Y component. </li> </ul> <p>Returns:</p> <p>This vector. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-setz","title":"function setZ","text":"<pre><code>inline constexpr void endstone::Vector::setZ (\n    T z\n) \n</code></pre> <p>Set the Z component.</p> <p>Parameters:</p> <ul> <li><code>z</code> The new Z component. </li> </ul> <p>Returns:</p> <p>This vector. </p>"},{"location":"reference/cpp/classendstone_1_1Vector/#function-tostring","title":"function toString","text":"<pre><code>inline std::string endstone::Vector::toString () const\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friends-documentation","title":"Friends Documentation","text":""},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator","title":"friend operator*","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator* (\n    T scalar,\n    const Vector &lt; T &gt; &amp; v\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator_1","title":"friend operator+","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator+ (\n    T scalar,\n    const Vector &lt; T &gt; &amp; v\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator-","title":"friend operator-","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator- (\n    T scalar,\n    const Vector &lt; T &gt; &amp; v\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1Vector/#friend-operator_2","title":"friend operator/","text":"<pre><code>inline Vector &lt; T &gt; endstone::Vector::operator/ (\n    T scalar,\n    const Vector &lt; T &gt; &amp; v\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/vector.h</code></p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/","title":"Class endstone::WeatherChangeEvent","text":"<p>ClassList &gt; endstone &gt; WeatherChangeEvent</p> <p>Called when the weather (rain) state in a world is changing. </p> <ul> <li><code>#include &lt;endstone/event/weather/weather_change_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::WeatherEvent</p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-static-attributes","title":"Public Static Attributes","text":"Type Name const std::string NAME   = = \"WeatherChangeEvent\""},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions","title":"Public Functions","text":"Type Name WeatherChangeEvent (Level &amp; level, bool to)  virtual std::string getEventName () override const virtual bool isCancellable () override const bool toWeatherState () const ~WeatherChangeEvent () override"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions-inherited-from-endstoneweatherevent","title":"Public Functions inherited from endstone::WeatherEvent","text":"<p>See endstone::WeatherEvent</p> Type Name WeatherEvent (Level &amp; level)  Level &amp; getLevel () const ~WeatherEvent () override"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#variable-name","title":"variable NAME","text":"<pre><code>const std::string endstone::WeatherChangeEvent::NAME;\n</code></pre>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-weatherchangeevent","title":"function WeatherChangeEvent","text":"<pre><code>inline endstone::WeatherChangeEvent::WeatherChangeEvent (\n    Level &amp; level,\n    bool to\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-geteventname","title":"function getEventName","text":"<pre><code>inline virtual std::string endstone::WeatherChangeEvent::getEventName () override const\n</code></pre> <p>Gets a user-friendly identifier for this event.</p> <p>Returns:</p> <p>name of this event </p> <p>Implements endstone::Event::getEventName</p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-iscancellable","title":"function isCancellable","text":"<pre><code>inline virtual bool endstone::WeatherChangeEvent::isCancellable () override const\n</code></pre> <p>Whether the event can be cancelled by a plugin or the server.</p> <p>Returns:</p> <p>true if this event can be cancelled </p> <p>Implements endstone::Event::isCancellable</p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-toweatherstate","title":"function toWeatherState","text":"<pre><code>inline bool endstone::WeatherChangeEvent::toWeatherState () const\n</code></pre> <p>Gets the state of weather that the world is being set to</p> <p>Returns:</p> <p>true if the weather is being set to raining, false otherwise </p>"},{"location":"reference/cpp/classendstone_1_1WeatherChangeEvent/#function-weatherchangeevent_1","title":"function ~WeatherChangeEvent","text":"<pre><code>endstone::WeatherChangeEvent::~WeatherChangeEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_change_event.h</code></p>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/","title":"Class endstone::WeatherEvent","text":"<p>ClassList &gt; endstone &gt; WeatherEvent</p> <p>Represents a Weather-related event. </p> <ul> <li><code>#include &lt;endstone/event/weather/weather_event.h&gt;</code></li> </ul> <p>Inherits the following classes: endstone::Event</p> <p>Inherited by the following classes: endstone::ThunderChangeEvent,  endstone::WeatherChangeEvent</p>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#public-functions","title":"Public Functions","text":"Type Name WeatherEvent (Level &amp; level)  Level &amp; getLevel () const ~WeatherEvent () override"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#public-functions-inherited-from-endstoneevent","title":"Public Functions inherited from endstone::Event","text":"<p>See endstone::Event</p> Type Name Event (bool async=false)  Event (const Event &amp;) = delete virtual std::string getEventName () const = 0 bool isAsynchronous () const virtual bool isCancellable () const = 0 bool isCancelled () const Event &amp; operator= (const Event &amp;) = delete void setCancelled (bool cancel)  virtual ~Event () = default"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#function-weatherevent","title":"function WeatherEvent","text":"<pre><code>inline explicit endstone::WeatherEvent::WeatherEvent (\n    Level &amp; level\n) \n</code></pre>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#function-getlevel","title":"function getLevel","text":"<pre><code>inline Level &amp; endstone::WeatherEvent::getLevel () const\n</code></pre> <p>Returns the Level where this event is occurring</p> <p>Returns:</p> <p>Level this event is occurring in </p>"},{"location":"reference/cpp/classendstone_1_1WeatherEvent/#function-weatherevent_1","title":"function ~WeatherEvent","text":"<pre><code>endstone::WeatherEvent::~WeatherEvent () override\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_event.h</code></p>"},{"location":"reference/cpp/namespacestd/","title":"Namespace std","text":"<p>Namespace List &gt; std</p>"},{"location":"reference/cpp/namespacestd/#classes","title":"Classes","text":"Type Name struct hash&lt; endstone::UUID &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/","title":"Struct std::hash&lt; endstone::UUID &gt;","text":"<p>template &lt;&gt;</p> <p>ClassList &gt; std &gt; hash&lt; endstone::UUID &gt;</p>"},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/#public-functions","title":"Public Functions","text":"Type Name std::size_t operator() (const endstone::UUID &amp; value) noexcept const"},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"reference/cpp/structstd_1_1hash_3_01endstone_1_1UUID_01_4/#function-operator","title":"function operator()","text":"<pre><code>inline std::size_t std::hash&lt; endstone::UUID &gt;::operator() (\n    const endstone::UUID &amp; value\n) noexcept const\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/dir_d44c64559bbebec7f509842c48db8b23/","title":"Dir include","text":"<p>FileList &gt; include</p>"},{"location":"reference/cpp/dir_d44c64559bbebec7f509842c48db8b23/#directories","title":"Directories","text":"Type Name dir endstone <p>The documentation for this class was generated from the following file <code>include/</code></p>"},{"location":"reference/cpp/dir_6cf277b678674f97c7a2b6b3b2447b33/","title":"Dir include/endstone","text":"<p>FileList &gt; endstone</p>"},{"location":"reference/cpp/dir_6cf277b678674f97c7a2b6b3b2447b33/#files","title":"Files","text":"Type Name file color_format.h file endstone.h file game_mode.h file logger.h file player.h file server.h file translatable.h"},{"location":"reference/cpp/dir_6cf277b678674f97c7a2b6b3b2447b33/#directories","title":"Directories","text":"Type Name dir actor dir command dir event dir inventory dir level dir permissions dir plugin dir scheduler dir util <p>The documentation for this class was generated from the following file <code>include/endstone/</code></p>"},{"location":"reference/cpp/color__format_8h/","title":"File color_format.h","text":"<p>FileList &gt; endstone &gt; color_format.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/color__format_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/color__format_8h/#classes","title":"Classes","text":"Type Name struct ColorFormat All supported color and format codes. <p>The documentation for this class was generated from the following file <code>include/endstone/color_format.h</code></p>"},{"location":"reference/cpp/color__format_8h_source/","title":"File color_format.h","text":"<p>File List &gt; endstone &gt; color_format.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\nnamespace endstone {\n\nstruct ColorFormat {\n    // Escape\n    inline static const std::string Escape = \"\u00a7\";\n\n    // Color code\n    inline static const std::string Black = Escape + '0';\n    inline static const std::string DarkBlue = Escape + '1';\n    inline static const std::string DarkGreen = Escape + '2';\n    inline static const std::string DarkAqua = Escape + '3';\n    inline static const std::string DarkRed = Escape + '4';\n    inline static const std::string DarkPurple = Escape + '5';\n    inline static const std::string Gold = Escape + '6';\n    inline static const std::string Gray = Escape + '7';\n    inline static const std::string DarkGray = Escape + '8';\n    inline static const std::string Blue = Escape + '9';\n    inline static const std::string Green = Escape + 'a';\n    inline static const std::string Aqua = Escape + 'b';\n    inline static const std::string Red = Escape + 'c';\n    inline static const std::string LightPurple = Escape + 'd';\n    inline static const std::string Yellow = Escape + 'e';\n    inline static const std::string White = Escape + 'f';\n    inline static const std::string MinecoinGold = Escape + 'g';\n    inline static const std::string MaterialQuartz = Escape + 'h';\n    inline static const std::string MaterialIron = Escape + 'i';\n    inline static const std::string MaterialNetherite = Escape + 'j';\n    inline static const std::string MaterialRedstone = Escape + 'm';\n    inline static const std::string MaterialCopper = Escape + 'n';\n    inline static const std::string MaterialGold = Escape + 'p';\n    inline static const std::string MaterialEmerald = Escape + 'q';\n    inline static const std::string MaterialDiamond = Escape + 's';\n    inline static const std::string MaterialLapis = Escape + 't';\n    inline static const std::string MaterialAmethyst = Escape + 'u';\n\n    // Format code\n    inline static const std::string Obfuscated = Escape + 'k';\n    inline static const std::string Bold = Escape + 'l';\n    inline static const std::string Italic = Escape + 'o';\n    inline static const std::string Reset = Escape + 'r';\n};  // namespace ColorFormat\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/endstone_8h/","title":"File endstone.h","text":"<p>FileList &gt; endstone &gt; endstone.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/endstone_8h/#macros","title":"Macros","text":"Type Name define ENDSTONE_API_VERSION  ENDSTONE_TOSTRING(ENDSTONE_VERSION_MAJOR) \".\" ENDSTONE_TOSTRING(ENDSTONE_VERSION_MINOR) define ENDSTONE_EXPORT  __attribute__((visibility(\"default\"))) define ENDSTONE_MAX_PLAYERS  200 define ENDSTONE_NOINLINE  __attribute__((noinline)) inline define ENDSTONE_STRINGIFY (x) #x define ENDSTONE_TOSTRING (x) ENDSTONE_STRINGIFY(x) define ENDSTONE_VERSION_MAJOR  0 define ENDSTONE_VERSION_MINOR  4 define ENDSTONE_VERSION_PATCH  8"},{"location":"reference/cpp/endstone_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"reference/cpp/endstone_8h/#define-endstone_api_version","title":"define ENDSTONE_API_VERSION","text":"<pre><code>#define ENDSTONE_API_VERSION ENDSTONE_TOSTRING(ENDSTONE_VERSION_MAJOR) \".\" ENDSTONE_TOSTRING(ENDSTONE_VERSION_MINOR)\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_export","title":"define ENDSTONE_EXPORT","text":"<pre><code>#define ENDSTONE_EXPORT __attribute__((visibility(\"default\")))\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_max_players","title":"define ENDSTONE_MAX_PLAYERS","text":"<pre><code>#define ENDSTONE_MAX_PLAYERS 200\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_noinline","title":"define ENDSTONE_NOINLINE","text":"<pre><code>#define ENDSTONE_NOINLINE __attribute__((noinline)) inline\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_stringify","title":"define ENDSTONE_STRINGIFY","text":"<pre><code>#define ENDSTONE_STRINGIFY (\n    x\n) #x\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_tostring","title":"define ENDSTONE_TOSTRING","text":"<pre><code>#define ENDSTONE_TOSTRING (\n    x\n) ENDSTONE_STRINGIFY(x)\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_version_major","title":"define ENDSTONE_VERSION_MAJOR","text":"<pre><code>#define ENDSTONE_VERSION_MAJOR 0\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_version_minor","title":"define ENDSTONE_VERSION_MINOR","text":"<pre><code>#define ENDSTONE_VERSION_MINOR 4\n</code></pre>"},{"location":"reference/cpp/endstone_8h/#define-endstone_version_patch","title":"define ENDSTONE_VERSION_PATCH","text":"<pre><code>#define ENDSTONE_VERSION_PATCH 8\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/endstone.h</code></p>"},{"location":"reference/cpp/endstone_8h_source/","title":"File endstone.h","text":"<p>File List &gt; endstone &gt; endstone.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#define ENDSTONE_STRINGIFY(x) #x\n#define ENDSTONE_TOSTRING(x)  ENDSTONE_STRINGIFY(x)\n\n#define ENDSTONE_VERSION_MAJOR 0\n#define ENDSTONE_VERSION_MINOR 4\n#define ENDSTONE_VERSION_PATCH 8\n#define ENDSTONE_API_VERSION   ENDSTONE_TOSTRING(ENDSTONE_VERSION_MAJOR) \".\" ENDSTONE_TOSTRING(ENDSTONE_VERSION_MINOR)\n\n#define ENDSTONE_MAX_PLAYERS 200\n\n#if defined(WIN32) || defined(_WIN32)\n#define ENDSTONE_EXPORT __declspec(dllexport)\n#else\n#define ENDSTONE_EXPORT __attribute__((visibility(\"default\")))\n#endif\n\n#if defined(_MSC_VER)\n#define ENDSTONE_NOINLINE __declspec(noinline) inline\n#else\n#define ENDSTONE_NOINLINE __attribute__((noinline)) inline\n#endif\n\n#ifdef _WIN32\n#define ENDSTONE_VARIANT_WIN32_LINUX(win32, linux) win32\n#elif __linux__\n#define ENDSTONE_VARIANT_WIN32_LINUX(win32, linux) linux\n#endif\n</code></pre>"},{"location":"reference/cpp/game__mode_8h/","title":"File game_mode.h","text":"<p>FileList &gt; endstone &gt; game_mode.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/game__mode_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone <p>The documentation for this class was generated from the following file <code>include/endstone/game_mode.h</code></p>"},{"location":"reference/cpp/game__mode_8h_source/","title":"File game_mode.h","text":"<p>File List &gt; endstone &gt; game_mode.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class GameMode {\n    Survival = 0,\n\n    Creative = 1,\n\n    Adventure = 2,\n\n    Spectator = 3,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_dd7779a583e02d88c9a89a2c881c3946/","title":"Dir include/endstone/actor","text":"<p>FileList &gt; actor</p>"},{"location":"reference/cpp/dir_dd7779a583e02d88c9a89a2c881c3946/#files","title":"Files","text":"Type Name file actor.h <p>The documentation for this class was generated from the following file <code>include/endstone/actor/</code></p>"},{"location":"reference/cpp/actor_8h/","title":"File actor.h","text":"<p>FileList &gt; actor &gt; actor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/level/location.h\"</code></li> <li><code>#include \"endstone/level/position.h\"</code></li> </ul>"},{"location":"reference/cpp/actor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/actor_8h/#classes","title":"Classes","text":"Type Name class Actor Represents a base actor in the level. <p>The documentation for this class was generated from the following file <code>include/endstone/actor/actor.h</code></p>"},{"location":"reference/cpp/actor_8h_source/","title":"File actor.h","text":"<p>File List &gt; actor &gt; actor.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/level/location.h\"\n#include \"endstone/level/position.h\"\n\nnamespace endstone {\n\nclass Actor : public CommandSender {\npublic:\n    Actor() = default;\n    Actor(const Actor &amp;) = delete;\n    Actor &amp;operator=(const Actor &amp;) = delete;\n    Actor(Actor &amp;&amp;) = delete;\n    Actor &amp;operator=(Actor &amp;&amp;) = delete;\n\n    ~Actor() override = default;\n\n    [[nodiscard]] virtual std::uint64_t getRuntimeId() const = 0;\n\n    [[nodiscard]] virtual Location getLocation() const = 0;\n\n    [[nodiscard]] virtual Vector&lt;float&gt; getVelocity() const = 0;\n\n    [[nodiscard]] virtual bool isOnGround() const = 0;\n\n    [[nodiscard]] virtual bool isInWater() const = 0;\n\n    [[nodiscard]] virtual bool isInLava() const = 0;\n\n    [[nodiscard]] virtual Level &amp;getLevel() const = 0;\n\n    [[nodiscard]] virtual Dimension &amp;getDimension() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_5c7b2dbfabcd1115569d1e20a260545c/","title":"Dir include/endstone/command","text":"<p>FileList &gt; command</p>"},{"location":"reference/cpp/dir_5c7b2dbfabcd1115569d1e20a260545c/#files","title":"Files","text":"Type Name file command.h file command_executor.h file command_map.h file command_sender.h file plugin_command.h <p>The documentation for this class was generated from the following file <code>include/endstone/command/</code></p>"},{"location":"reference/cpp/command_8h/","title":"File command.h","text":"<p>FileList &gt; command &gt; command.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/command/command_map.h\"</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/command_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/command_8h/#classes","title":"Classes","text":"Type Name class Command Represents a Command , which executes various tasks upon user input. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command.h</code></p>"},{"location":"reference/cpp/command_8h_source/","title":"File command.h","text":"<p>File List &gt; command &gt; command.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/command/command_map.h\"\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\n\nclass PluginCommand;\n\nclass Command {\npublic:\n    explicit Command(std::string name, std::string description = \"\", std::vector&lt;std::string&gt; usages = {},\n                     std::vector&lt;std::string&gt; aliases = {}, std::vector&lt;std::string&gt; permissions = {})\n    {\n        setName(std::move(name));\n        setDescription(std::move(description));\n        setUsages(std::move(usages));\n        setAliases(std::move(aliases));\n        setPermissions(std::move(permissions));\n    }\n\n    virtual ~Command() = default;\n\n    [[nodiscard]] virtual bool execute(CommandSender &amp;sender, const std::vector&lt;std::string&gt; &amp;args) const\n    {\n        return false;\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    void setName(std::string name)\n    {\n        if (!isRegistered()) {\n            std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n            name_ = std::move(name);\n        }\n    }\n\n    [[nodiscard]] std::string getDescription() const\n    {\n        return description_;\n    }\n\n    void setDescription(std::string description)\n    {\n        if (!isRegistered()) {\n            description_ = std::move(description);\n        }\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getAliases() const\n    {\n        return aliases_;\n    }\n\n    template &lt;typename... Alias&gt;\n    void setAliases(Alias... aliases)\n    {\n        if (!isRegistered()) {\n            std::vector&lt;std::string&gt; all_aliases = {aliases...};\n            aliases_.clear();\n            for (auto alias : all_aliases) {\n                std::transform(alias.begin(), alias.end(), alias.begin(),\n                               [](unsigned char c) { return std::tolower(c); });\n                aliases_.push_back(alias);\n            }\n        }\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getUsages() const\n    {\n        return usages_;\n    }\n\n    template &lt;typename... Usage&gt;\n    void setUsages(Usage... usages)\n    {\n        if (!isRegistered()) {\n            std::vector&lt;std::string&gt; all_usages = {usages...};\n            if (all_usages.empty()) {\n                all_usages.push_back(\"/\" + getName());\n            }\n            usages_ = std::move(all_usages);\n        }\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getPermissions() const\n    {\n        return permissions_;\n    }\n\n    template &lt;typename... Permission&gt;\n    void setPermissions(Permission... permissions)\n    {\n        permissions_ = std::move(std::vector&lt;std::string&gt;{permissions...});\n    }\n\n    [[nodiscard]] bool testPermission(const CommandSender &amp;target) const\n    {\n        if (testPermissionSilently(target)) {\n            return true;\n        }\n\n        target.sendErrorMessage(\"You do not have permission to perform this command.\");\n        return false;\n    }\n\n    [[nodiscard]] bool testPermissionSilently(const CommandSender &amp;target) const\n    {\n        if (permissions_.empty()) {\n            return true;\n        }\n\n        return std::any_of(permissions_.begin(), permissions_.end(),\n                           [&amp;target](const auto &amp;p) { return target.hasPermission(p); });\n    }\n\n    bool registerTo(CommandMap &amp;command_map)\n    {\n        if (allowChangesFrom(command_map)) {\n            command_map_ = &amp;command_map;\n            return true;\n        }\n\n        return false;\n    }\n\n    bool unregisterFrom(CommandMap &amp;command_map)\n    {\n        if (allowChangesFrom(command_map)) {\n            command_map_ = nullptr;\n            return true;\n        }\n\n        return false;\n    }\n\n    [[nodiscard]] bool isRegistered() const\n    {\n        return command_map_ != nullptr;\n    }\n\n    [[nodiscard]] virtual PluginCommand *asPluginCommand()\n    {\n        return nullptr;\n    }\n\nprivate:\n    bool allowChangesFrom(CommandMap &amp;command_map)\n    {\n        return (!isRegistered() || command_map_ == &amp;command_map);\n    }\n\n    std::string name_;\n    std::string description_;\n    std::vector&lt;std::string&gt; aliases_;\n    std::vector&lt;std::string&gt; usages_;\n    std::vector&lt;std::string&gt; permissions_;\n    CommandMap *command_map_ = nullptr;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__executor_8h/","title":"File command_executor.h","text":"<p>FileList &gt; command &gt; command_executor.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/command/command.h\"</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> </ul>"},{"location":"reference/cpp/command__executor_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/command__executor_8h/#classes","title":"Classes","text":"Type Name class CommandExecutor Represents a class which contains a single method for executing commands. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_executor.h</code></p>"},{"location":"reference/cpp/command__executor_8h_source/","title":"File command_executor.h","text":"<p>File List &gt; command &gt; command_executor.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;map&gt;\n#include &lt;string&gt;\n\n#include \"endstone/command/command.h\"\n#include \"endstone/command/command_sender.h\"\n\nnamespace endstone {\nclass CommandExecutor {\npublic:\n    virtual ~CommandExecutor() = default;\n\n    virtual bool onCommand(CommandSender &amp;sender, const Command &amp;command, const std::vector&lt;std::string&gt; &amp;args)\n    {\n        return false;\n    }\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__map_8h/","title":"File command_map.h","text":"<p>FileList &gt; command &gt; command_map.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"reference/cpp/command__map_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/command__map_8h/#classes","title":"Classes","text":"Type Name class CommandMap Represents a command map that manages all commands of the Server . <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_map.h</code></p>"},{"location":"reference/cpp/command__map_8h_source/","title":"File command_map.h","text":"<p>File List &gt; command &gt; command_map.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nnamespace endstone {\n\nclass Command;\n\nclass CommandMap {\npublic:\n    CommandMap() = default;\n    CommandMap(const CommandMap &amp;) = delete;\n    CommandMap &amp;operator=(const CommandMap &amp;) = delete;\n    CommandMap(CommandMap &amp;&amp;) = default;\n    CommandMap &amp;operator=(CommandMap &amp;&amp;) = default;\n\n    virtual ~CommandMap() = default;\n\n    virtual bool registerCommand(std::shared_ptr&lt;Command&gt; command) = 0;\n\n    virtual void clearCommands() = 0;\n\n    [[nodiscard]] virtual Command *getCommand(std::string name) const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/command__sender_8h/","title":"File command_sender.h","text":"<p>FileList &gt; command &gt; command_sender.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include \"endstone/permissions/permissible.h\"</code></li> <li><code>#include \"endstone/translatable.h\"</code></li> </ul>"},{"location":"reference/cpp/command__sender_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/command__sender_8h/#classes","title":"Classes","text":"Type Name class CommandSender Represents a command sender. <p>The documentation for this class was generated from the following file <code>include/endstone/command/command_sender.h</code></p>"},{"location":"reference/cpp/command__sender_8h_source/","title":"File command_sender.h","text":"<p>File List &gt; command &gt; command_sender.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include &lt;fmt/format.h&gt;\n\n#include \"endstone/permissions/permissible.h\"\n#include \"endstone/translatable.h\"\n\nnamespace endstone {\n\nclass Server;\nclass Player;\n\nclass CommandSender : public Permissible {\npublic:\n    CommandSender() = default;\n    ~CommandSender() override = default;\n\n    // Permissible\n    [[nodiscard]] CommandSender *asCommandSender() const override\n    {\n        return const_cast&lt;CommandSender *&gt;(this);\n    }\n\n    [[nodiscard]] virtual CommandSender *asConsole() const\n    {\n        return nullptr;\n    }\n\n    [[nodiscard]] virtual Player *asPlayer() const\n    {\n        return nullptr;\n    }\n\n    virtual void sendMessage(const std::string &amp;message) const = 0;\n\n    virtual void sendMessage(const Translatable &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void sendMessage(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        sendMessage(fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    virtual void sendErrorMessage(const std::string &amp;message) const = 0;\n\n    virtual void sendErrorMessage(const Translatable &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void sendErrorMessage(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        sendErrorMessage(fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    [[nodiscard]] virtual Server &amp;getServer() const = 0;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__command_8h/","title":"File plugin_command.h","text":"<p>FileList &gt; command &gt; plugin_command.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/command/command.h\"</code></li> <li><code>#include \"endstone/command/command_executor.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__command_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin__command_8h/#classes","title":"Classes","text":"Type Name class PluginCommand Represents a Command belonging to aPlugin . <p>The documentation for this class was generated from the following file <code>include/endstone/command/plugin_command.h</code></p>"},{"location":"reference/cpp/plugin__command_8h_source/","title":"File plugin_command.h","text":"<p>File List &gt; command &gt; plugin_command.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/command/command.h\"\n#include \"endstone/command/command_executor.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass PluginCommand : public Command {\npublic:\n    PluginCommand(const Command &amp;command, Plugin &amp;owner) : Command(command), owner_(owner) {}\n\n    bool execute(CommandSender &amp;sender, const std::vector&lt;std::string&gt; &amp;args) const override\n    {\n        if (!owner_.isEnabled()) {\n            sender.sendMessage(\"Cannot execute command '{}' in plugin {}. Plugin is disabled.\", getName(),\n                               getPlugin().getDescription().getFullName());\n            return false;\n        }\n\n        if (!testPermission(sender)) {\n            return true;\n        }\n\n        try {\n            return getExecutor().onCommand(sender, *this, args);\n        }\n        catch (std::exception &amp;e) {\n            getPlugin().getLogger().error(\"Unhandled exception executing command '{}' in plugin {}\", getName(),\n                                          owner_.getDescription().getFullName());\n            getPlugin().getLogger().error(e.what());\n            return false;\n        }\n    }\n\n    virtual void setExecutor(std::shared_ptr&lt;CommandExecutor&gt; executor)\n    {\n        executor_ = std::move(executor);\n    }\n\n    [[nodiscard]] virtual CommandExecutor &amp;getExecutor() const\n    {\n        if (executor_) {\n            return *executor_;\n        }\n        return owner_;\n    }\n\n    [[maybe_unused]] [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return owner_;\n    }\n\n    [[nodiscard]] PluginCommand *asPluginCommand() override\n    {\n        return this;\n    }\n\nprivate:\n    Plugin &amp;owner_;\n    std::shared_ptr&lt;CommandExecutor&gt; executor_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_f1d783c0ad83ee143d16e768ebca51c8/","title":"Dir include/endstone/event","text":"<p>FileList &gt; endstone &gt; event</p>"},{"location":"reference/cpp/dir_f1d783c0ad83ee143d16e768ebca51c8/#files","title":"Files","text":"Type Name file event.h file event_handler.h file event_priority.h file handler_list.h"},{"location":"reference/cpp/dir_f1d783c0ad83ee143d16e768ebca51c8/#directories","title":"Directories","text":"Type Name dir actor dir player dir server dir weather <p>The documentation for this class was generated from the following file <code>include/endstone/event/</code></p>"},{"location":"reference/cpp/event_8h/","title":"File event.h","text":"<p>FileList &gt; endstone &gt; event &gt; event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/event_8h/#classes","title":"Classes","text":"Type Name class Event Represents an event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/event.h</code></p>"},{"location":"reference/cpp/event_8h_source/","title":"File event.h","text":"<p>File List &gt; endstone &gt; event &gt; event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\nnamespace endstone {\n\nclass Event {\npublic:\n    explicit Event(bool async = false) : async_(async){};\n    Event(const Event &amp;) = delete;             // deleted copy constructor\n    Event &amp;operator=(const Event &amp;) = delete;  // deleted copy assignment operator\n\n    virtual ~Event() = default;\n\n    [[nodiscard]] virtual std::string getEventName() const = 0;\n\n    [[nodiscard]] virtual bool isCancellable() const = 0;\n\n    [[nodiscard]] bool isCancelled() const\n    {\n        if (!isCancellable()) {\n            return false;\n        }\n        return cancelled_;\n    };\n\n    void setCancelled(bool cancel)\n    {\n        if (isCancellable()) {\n            cancelled_ = cancel;\n        }\n    }\n\n    [[nodiscard]] bool isAsynchronous() const\n    {\n        return async_;\n    }\n\nprivate:\n    bool async_;\n    bool cancelled_{false};\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/event__handler_8h/","title":"File event_handler.h","text":"<p>FileList &gt; endstone &gt; event &gt; event_handler.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/event_priority.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/event__handler_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/event__handler_8h/#classes","title":"Classes","text":"Type Name class EventHandler Represents a registered EventHandler which associates with aPlugin . <p>The documentation for this class was generated from the following file <code>include/endstone/event/event_handler.h</code></p>"},{"location":"reference/cpp/event__handler_8h_source/","title":"File event_handler.h","text":"<p>File List &gt; endstone &gt; event &gt; event_handler.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;functional&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/event_priority.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass EventHandler {\npublic:\n    EventHandler(std::string event, std::function&lt;void(Event &amp;)&gt; executor, EventPriority priority, Plugin &amp;plugin,\n                 bool ignore_cancelled)\n        : event_(std::move(event)), executor_(std::move(executor)), priority_(priority), plugin_(plugin),\n          ignore_cancelled_(ignore_cancelled)\n    {\n    }\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n    [[nodiscard]] EventPriority getPriority() const\n    {\n        return priority_;\n    }\n\n    [[nodiscard]] bool isIgnoreCancelled() const\n    {\n        return ignore_cancelled_;\n    }\n\n    void callEvent(Event &amp;event)\n    {\n        if (event.getEventName() != event_) {\n            return;\n        }\n        if (event.isCancellable() &amp;&amp; event.isCancelled() &amp;&amp; isIgnoreCancelled()) {\n            return;\n        }\n        executor_(event);\n    };\n\n    [[nodiscard]] std::string getEventType() const\n    {\n        return event_;\n    }\n\nprivate:\n    std::string event_;\n    std::function&lt;void(Event &amp;)&gt; executor_;\n    EventPriority priority_;\n    Plugin &amp;plugin_;\n    bool ignore_cancelled_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/event__priority_8h/","title":"File event_priority.h","text":"<p>FileList &gt; endstone &gt; event &gt; event_priority.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/event__priority_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone <p>The documentation for this class was generated from the following file <code>include/endstone/event/event_priority.h</code></p>"},{"location":"reference/cpp/event__priority_8h_source/","title":"File event_priority.h","text":"<p>File List &gt; endstone &gt; event &gt; event_priority.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class EventPriority {\n    Lowest = 0,\n    Low = 1,\n    Normal = 2,\n    High = 3,\n    Highest = 4,\n    Monitor = 5\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/handler__list_8h/","title":"File handler_list.h","text":"<p>FileList &gt; endstone &gt; event &gt; handler_list.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;mutex&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/event_handler.h\"</code></li> <li><code>#include \"endstone/event/event_priority.h\"</code></li> </ul>"},{"location":"reference/cpp/handler__list_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/handler__list_8h/#classes","title":"Classes","text":"Type Name class HandlerList A list of event handlers. Should be instantiated on a per event basis. <p>The documentation for this class was generated from the following file <code>include/endstone/event/handler_list.h</code></p>"},{"location":"reference/cpp/handler__list_8h_source/","title":"File handler_list.h","text":"<p>File List &gt; endstone &gt; event &gt; handler_list.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;map&gt;\n#include &lt;mutex&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/event_handler.h\"\n#include \"endstone/event/event_priority.h\"\n\nnamespace endstone {\n\nclass HandlerList {\npublic:\n    explicit HandlerList(std::string event) : event_(std::move(event)) {}\n\n    EventHandler *registerHandler(std::unique_ptr&lt;EventHandler&gt; handler)\n    {\n        if (handler-&gt;getEventType() != event_) {\n            return nullptr;\n        }\n\n        std::lock_guard lock(mtx_);\n        valid_ = false;\n        auto &amp;vector =\n            handlers_.emplace(handler-&gt;getPriority(), std::vector&lt;std::unique_ptr&lt;EventHandler&gt;&gt;{}).first-&gt;second;\n        auto &amp;it = vector.emplace_back(std::move(handler));\n        return it.get();\n    }\n\n    void unregister(EventHandler &amp;handler)\n    {\n        std::lock_guard lock(mtx_);\n        auto &amp;vector =\n            handlers_.emplace(handler.getPriority(), std::vector&lt;std::unique_ptr&lt;EventHandler&gt;&gt;{}).first-&gt;second;\n        auto it = std::find_if(vector.begin(), vector.end(),\n                               [&amp;](const std::unique_ptr&lt;EventHandler&gt; &amp;h) { return h.get() == &amp;handler; });\n        if (it != vector.end()) {\n            valid_ = false;\n            vector.erase(it);\n        }\n    }\n\n    void unregister(Plugin &amp;plugin)\n    {\n        std::lock_guard lock(mtx_);\n        for (auto &amp;[priority, vector] : handlers_) {\n            vector.erase(\n                std::remove_if(vector.begin(), vector.end(),\n                               [&amp;](const std::unique_ptr&lt;EventHandler&gt; &amp;h) { return &amp;h-&gt;getPlugin() == &amp;plugin; }),\n                vector.end());\n            valid_ = false;\n        }\n    }\n\n    std::vector&lt;EventHandler *&gt; getHandlers() const\n    {\n        std::lock_guard lock(mtx_);\n        if (!valid_) {\n            bake();\n        }\n        return baked_handlers_;\n    }\n\nprotected:\n    void bake() const\n    {\n        if (valid_) {\n            return;\n        }\n\n        baked_handlers_.clear();\n        for (const auto &amp;[priority, vector] : handlers_) {\n            for (const auto &amp;handler : vector) {\n                baked_handlers_.push_back(handler.get());\n            }\n        }\n        valid_ = true;\n    }\n\nprivate:\n    mutable std::mutex mtx_;\n    std::map&lt;EventPriority, std::vector&lt;std::unique_ptr&lt;EventHandler&gt;&gt;&gt; handlers_;\n    mutable std::vector&lt;EventHandler *&gt; baked_handlers_;\n    mutable bool valid_{false};\n    std::string event_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_621c26b5fd4198aba66e7e31570ce44a/","title":"Dir include/endstone/event/actor","text":"<p>FileList &gt; actor</p>"},{"location":"reference/cpp/dir_621c26b5fd4198aba66e7e31570ce44a/#files","title":"Files","text":"Type Name file actor_death_event.h file actor_event.h file actor_remove_event.h file actor_spawn_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/</code></p>"},{"location":"reference/cpp/actor__death__event_8h/","title":"File actor_death_event.h","text":"<p>FileList &gt; actor &gt; actor_death_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__death__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/actor__death__event_8h/#classes","title":"Classes","text":"Type Name class ActorDeathEvent Called when an Actor dies. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_death_event.h</code></p>"},{"location":"reference/cpp/actor__death__event_8h_source/","title":"File actor_death_event.h","text":"<p>File List &gt; actor &gt; actor_death_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_event.h\"\n\nnamespace endstone {\n\nclass ActorDeathEvent : public ActorEvent {\npublic:\n    explicit ActorDeathEvent(Actor &amp;actor) : ActorEvent(actor) {}\n    ~ActorDeathEvent() override = default;\n\n    inline static const std::string NAME = \"ActorDeathEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\n    // TODO(event): add drops and dropExp\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__event_8h/","title":"File actor_event.h","text":"<p>FileList &gt; actor &gt; actor_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/actor__event_8h/#classes","title":"Classes","text":"Type Name class ActorEvent Represents an Actor-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_event.h</code></p>"},{"location":"reference/cpp/actor__event_8h_source/","title":"File actor_event.h","text":"<p>File List &gt; actor &gt; actor_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n#include \"endstone/event/event.h\"\n\nnamespace endstone {\n\nclass ActorEvent : public Event {\npublic:\n    explicit ActorEvent(Actor &amp;actor) : actor_(actor){};\n    ~ActorEvent() override = default;\n\n    [[nodiscard]] Actor &amp;getActor() const\n    {\n        return actor_;\n    }\n\n    // TODO(event): add getActorType method\n\nprivate:\n    Actor &amp;actor_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__remove__event_8h/","title":"File actor_remove_event.h","text":"<p>FileList &gt; actor &gt; actor_remove_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__remove__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/actor__remove__event_8h/#classes","title":"Classes","text":"Type Name class ActorRemoveEvent Called when an Actor is removed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_remove_event.h</code></p>"},{"location":"reference/cpp/actor__remove__event_8h_source/","title":"File actor_remove_event.h","text":"<p>File List &gt; actor &gt; actor_remove_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_event.h\"\n\nnamespace endstone {\n\nclass ActorRemoveEvent : public ActorEvent {\npublic:\n    explicit ActorRemoveEvent(Actor &amp;actor) : ActorEvent(actor) {}\n    ~ActorRemoveEvent() override = default;\n\n    inline static const std::string NAME = \"ActorRemoveEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\n    // TODO(event): add remove cause\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/actor__spawn__event_8h/","title":"File actor_spawn_event.h","text":"<p>FileList &gt; actor &gt; actor_spawn_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_event.h\"</code></li> </ul>"},{"location":"reference/cpp/actor__spawn__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/actor__spawn__event_8h/#classes","title":"Classes","text":"Type Name class ActorSpawnEvent Called when an Actor is spawned into a world. <p>The documentation for this class was generated from the following file <code>include/endstone/event/actor/actor_spawn_event.h</code></p>"},{"location":"reference/cpp/actor__spawn__event_8h_source/","title":"File actor_spawn_event.h","text":"<p>File List &gt; actor &gt; actor_spawn_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_event.h\"\n\nnamespace endstone {\n\nclass ActorSpawnEvent : public ActorEvent {\npublic:\n    explicit ActorSpawnEvent(Actor &amp;actor) : ActorEvent(actor) {}\n    ~ActorSpawnEvent() override = default;\n\n    inline static const std::string NAME = \"ActorSpawnEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\n    // TODO(event): add spawn cause\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_7c05c37b25e9c9eccd9c63c2d313ba28/","title":"Dir include/endstone/event/player","text":"<p>FileList &gt; endstone &gt; event &gt; player</p>"},{"location":"reference/cpp/dir_7c05c37b25e9c9eccd9c63c2d313ba28/#files","title":"Files","text":"Type Name file player_chat_event.h file player_command_event.h file player_death_event.h file player_event.h file player_join_event.h file player_login_event.h file player_quit_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/</code></p>"},{"location":"reference/cpp/player__chat__event_8h/","title":"File player_chat_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_chat_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__chat__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__chat__event_8h/#classes","title":"Classes","text":"Type Name class PlayerChatEvent Called when a player sends a chat message. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_chat_event.h</code></p>"},{"location":"reference/cpp/player__chat__event_8h_source/","title":"File player_chat_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_chat_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerChatEvent : public PlayerEvent {\npublic:\n    explicit PlayerChatEvent(Player &amp;player, std::string message) : PlayerEvent(player), message_(std::move(message)) {}\n    ~PlayerChatEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerChatEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\n    [[nodiscard]] std::string getMessage() const\n    {\n        return message_;\n    }\n\n    void setMessage(std::string message)\n    {\n        message_ = std::move(message);\n    }\n\nprivate:\n    std::string message_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__command__event_8h/","title":"File player_command_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_command_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__command__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__command__event_8h/#classes","title":"Classes","text":"Type Name class PlayerCommandEvent Called whenever a player runs a command. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_command_event.h</code></p>"},{"location":"reference/cpp/player__command__event_8h_source/","title":"File player_command_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_command_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerCommandEvent : public PlayerEvent {\npublic:\n    explicit PlayerCommandEvent(Player &amp;player, std::string command) : PlayerEvent(player), command_(std::move(command))\n    {\n    }\n    ~PlayerCommandEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerCommandEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\n    [[nodiscard]] std::string getCommand() const\n    {\n        return command_;\n    }\n\n    void setCommand(std::string command)\n    {\n        command_ = std::move(command);\n    }\n\nprivate:\n    std::string command_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__death__event_8h/","title":"File player_death_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_death_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/actor/actor_death_event.h\"</code></li> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__death__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__death__event_8h/#classes","title":"Classes","text":"Type Name class PlayerDeathEvent Called when a Player dies. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_death_event.h</code></p>"},{"location":"reference/cpp/player__death__event_8h_source/","title":"File player_death_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_death_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/actor/actor_death_event.h\"\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerDeathEvent : public ActorDeathEvent, public PlayerEvent {\npublic:\n    explicit PlayerDeathEvent(Player &amp;player, std::string death_message)\n        : ActorDeathEvent(player), PlayerEvent(player), death_message_(std::move(death_message))\n    {\n    }\n    ~PlayerDeathEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerDeathEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\n    [[nodiscard]] const std::string &amp;getDeathMessage() const\n    {\n        return death_message_;\n    }\n\n    void setDeathMessage(const std::string &amp;death_message)\n    {\n        death_message_ = death_message;\n    }\n\nprivate:\n    std::string death_message_;\n\n    // TODO(event): add death message, new exp, new level, new total exp, keep level, keep inventory\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__event_8h/","title":"File player_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/player.h\"</code></li> </ul>"},{"location":"reference/cpp/player__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__event_8h/#classes","title":"Classes","text":"Type Name class PlayerEvent Represents a player related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_event.h</code></p>"},{"location":"reference/cpp/player__event_8h_source/","title":"File player_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/player.h\"\n\nnamespace endstone {\n\nclass PlayerEvent : public Event {\npublic:\n    explicit PlayerEvent(Player &amp;player) : player_(player){};\n    ~PlayerEvent() override = default;\n\n    [[nodiscard]] Player &amp;getPlayer() const\n    {\n        return player_;\n    }\n\nprivate:\n    Player &amp;player_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__join__event_8h/","title":"File player_join_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_join_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__join__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__join__event_8h/#classes","title":"Classes","text":"Type Name class PlayerJoinEvent Called when a player joins a server. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_join_event.h</code></p>"},{"location":"reference/cpp/player__join__event_8h_source/","title":"File player_join_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_join_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerJoinEvent : public PlayerEvent {\npublic:\n    explicit PlayerJoinEvent(Player &amp;player) : PlayerEvent(player) {}\n    ~PlayerJoinEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerJoinEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__login__event_8h/","title":"File player_login_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_login_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__login__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__login__event_8h/#classes","title":"Classes","text":"Type Name class PlayerLoginEvent Called when a player attempts to login in. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_login_event.h</code></p>"},{"location":"reference/cpp/player__login__event_8h_source/","title":"File player_login_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_login_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerLoginEvent : public PlayerEvent {\npublic:\n    explicit PlayerLoginEvent(Player &amp;player, std::string message = \"\")\n        : PlayerEvent(player), message_(std::move(message))\n    {\n    }\n    ~PlayerLoginEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerLoginEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\n    [[nodiscard]] const std::string &amp;getKickMessage() const\n    {\n        return message_;\n    }\n\n    void setKickMessage(const std::string &amp;message)\n    {\n        message_ = message;\n    }\n\nprivate:\n    std::string message_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__quit__event_8h/","title":"File player_quit_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; player &gt; player_quit_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/player/player_event.h\"</code></li> </ul>"},{"location":"reference/cpp/player__quit__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__quit__event_8h/#classes","title":"Classes","text":"Type Name class PlayerQuitEvent Called when a player leaves a server. <p>The documentation for this class was generated from the following file <code>include/endstone/event/player/player_quit_event.h</code></p>"},{"location":"reference/cpp/player__quit__event_8h_source/","title":"File player_quit_event.h","text":"<p>File List &gt; endstone &gt; event &gt; player &gt; player_quit_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/player/player_event.h\"\n\nnamespace endstone {\n\nclass PlayerQuitEvent : public PlayerEvent {\npublic:\n    explicit PlayerQuitEvent(Player &amp;player) : PlayerEvent(player) {}\n    ~PlayerQuitEvent() override = default;\n\n    inline static const std::string NAME = \"PlayerQuitEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_77022909323d5ad872c4820a738a5429/","title":"Dir include/endstone/event/server","text":"<p>FileList &gt; endstone &gt; event &gt; server</p>"},{"location":"reference/cpp/dir_77022909323d5ad872c4820a738a5429/#files","title":"Files","text":"Type Name file broadcast_message_event.h file plugin_disable_event.h file plugin_enable_event.h file server_command_event.h file server_event.h file server_list_ping_event.h file server_load_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/</code></p>"},{"location":"reference/cpp/broadcast__message__event_8h/","title":"File broadcast_message_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; broadcast_message_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/handler_list.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/broadcast__message__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/broadcast__message__event_8h/#classes","title":"Classes","text":"Type Name class BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast . <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/broadcast_message_event.h</code></p>"},{"location":"reference/cpp/broadcast__message__event_8h_source/","title":"File broadcast_message_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; broadcast_message_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/event/event.h\"\n#include \"endstone/event/handler_list.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass BroadcastMessageEvent : public ServerEvent {\npublic:\n    BroadcastMessageEvent(bool async, std::string message, std::unordered_set&lt;const CommandSender *&gt; recipients)\n        : ServerEvent(async), message_(std::move(message)), recipients_(std::move(recipients))\n    {\n    }\n\n    inline static const std::string NAME = \"BroadcastMessageEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\n    [[nodiscard]] const std::string &amp;getMessage() const\n    {\n        return message_;\n    }\n\n    void setMessage(std::string message)\n    {\n        message_ = std::move(message);\n    }\n\n    [[nodiscard]] const std::unordered_set&lt;const CommandSender *&gt; &amp;getRecipients() const\n    {\n        return recipients_;\n    }\n\nprivate:\n    std::string message_;\n    std::unordered_set&lt;const CommandSender *&gt; recipients_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__disable__event_8h/","title":"File plugin_disable_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; plugin_disable_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__disable__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin__disable__event_8h/#classes","title":"Classes","text":"Type Name class PluginDisableEvent Called when a plugin is disabled. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_disable_event.h</code></p>"},{"location":"reference/cpp/plugin__disable__event_8h_source/","title":"File plugin_disable_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; plugin_disable_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass PluginDisableEvent : public ServerEvent {\npublic:\n    explicit PluginDisableEvent(Plugin &amp;plugin) : plugin_(plugin) {}\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n\n    inline static const std::string NAME = \"PluginDisableEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\nprivate:\n    Plugin &amp;plugin_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__enable__event_8h/","title":"File plugin_enable_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; plugin_enable_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__enable__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin__enable__event_8h/#classes","title":"Classes","text":"Type Name class PluginEnableEvent Called when a plugin is enabled. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/plugin_enable_event.h</code></p>"},{"location":"reference/cpp/plugin__enable__event_8h_source/","title":"File plugin_enable_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; plugin_enable_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nclass PluginEnableEvent : public ServerEvent {\npublic:\n    explicit PluginEnableEvent(Plugin &amp;plugin) : plugin_(plugin) {}\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n\n    inline static const std::string NAME = \"PluginEnableEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\nprivate:\n    Plugin &amp;plugin_;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__command__event_8h/","title":"File server_command_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_command_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/handler_list.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/server__command__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/server__command__event_8h/#classes","title":"Classes","text":"Type Name class ServerCommandEvent Called when the console runs a command, early in the process. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_command_event.h</code></p>"},{"location":"reference/cpp/server__command__event_8h_source/","title":"File server_command_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_command_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/event/event.h\"\n#include \"endstone/event/handler_list.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass ServerCommandEvent : public ServerEvent {\npublic:\n    ServerCommandEvent(CommandSender &amp;sender, std::string command) : sender_(sender), command_(std::move(command)) {}\n\n    inline static const std::string NAME = \"ServerCommandEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\n    [[nodiscard]] std::string getCommand() const\n    {\n        return command_;\n    }\n\n    void setCommand(std::string message)\n    {\n        command_ = std::move(message);\n    }\n\n    [[nodiscard]] CommandSender &amp;getSender() const\n    {\n        return sender_;\n    }\n\nprivate:\n    CommandSender &amp;sender_;\n    std::string command_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__event_8h/","title":"File server_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/actor/actor.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> </ul>"},{"location":"reference/cpp/server__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/server__event_8h/#classes","title":"Classes","text":"Type Name class ServerEvent Represents an Server-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_event.h</code></p>"},{"location":"reference/cpp/server__event_8h_source/","title":"File server_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/actor/actor.h\"\n#include \"endstone/event/event.h\"\n\nnamespace endstone {\n\nclass ServerEvent : public Event {\npublic:\n    using Event::Event;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__list__ping__event_8h/","title":"File server_list_ping_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_list_ping_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> <li><code>#include \"endstone/game_mode.h\"</code></li> </ul>"},{"location":"reference/cpp/server__list__ping__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/server__list__ping__event_8h/#classes","title":"Classes","text":"Type Name class ServerListPingEvent Called when a server ping is coming in. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_list_ping_event.h</code></p>"},{"location":"reference/cpp/server__list__ping__event_8h_source/","title":"File server_list_ping_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_list_ping_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n#include \"endstone/game_mode.h\"\n\nnamespace endstone {\n\nclass ServerListPingEvent : public ServerEvent {\npublic:\n    ServerListPingEvent(std::string remote_host, int remote_port, std::string ping_response)\n        : ServerEvent(true), ping_response_(std::move(ping_response)), remote_host_(std::move(remote_host)),\n          remote_port_(remote_port)\n    {\n    }\n\n    [[nodiscard]] std::string getRemoteHost() const\n    {\n        return remote_host_;\n    }\n\n    [[nodiscard]] int getRemotePort() const\n    {\n        return remote_port_;\n    }\n\n    [[nodiscard]] std::string getServerGuid() const\n    {\n        return server_guid_;\n    }\n\n    [[nodiscard]] int getLocalPort() const\n    {\n        return local_port_;\n    }\n\n    [[nodiscard]] int getLocalPortV6() const\n    {\n        return local_port_v6_;\n    }\n\n    [[nodiscard]] std::string getMotd() const\n    {\n        return motd_;\n    }\n\n    void setMotd(std::string motd)\n    {\n        motd_ = std::move(motd);\n    }\n\n    [[nodiscard]] int getNetworkProtocolVersion() const\n    {\n        return network_protocol_version_;\n    }\n\n    [[nodiscard]] std::string getMinecraftVersionNetwork() const\n    {\n        return minecraft_version_network_;\n    }\n\n    void setMinecraftVersionNetwork(std::string minecraft_version_network)\n    {\n        minecraft_version_network_ = std::move(minecraft_version_network);\n    }\n\n    [[nodiscard]] int getNumPlayers() const\n    {\n        return num_players_;\n    }\n\n    void setNumPlayers(int num_players)\n    {\n        num_players_ = num_players;\n    }\n\n    [[nodiscard]] int getMaxPlayers() const\n    {\n        return max_players_;\n    }\n\n    void setMaxPlayers(int max_players)\n    {\n        max_players_ = max_players;\n    }\n\n    [[nodiscard]] std::string getLevelName() const\n    {\n        return level_name_;\n    }\n\n    void setLevelName(std::string level_name)\n    {\n        level_name_ = std::move(level_name);\n    }\n\n    [[nodiscard]] GameMode getGameMode() const\n    {\n        return game_mode_;\n    }\n\n    void setGameMode(GameMode game_mode)\n    {\n        game_mode_ = game_mode;\n    }\n\n    inline static const std::string NAME = \"ServerListPingEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\n    bool deserialize();\n    std::string serialize();\n\nprivate:\n    std::string ping_response_;\n    std::string remote_host_;\n    int remote_port_;\n    std::string motd_;\n    int network_protocol_version_;\n    std::string minecraft_version_network_;\n    int num_players_;\n    int max_players_;\n    std::string server_guid_;\n    std::string level_name_;\n    GameMode game_mode_;\n    int local_port_;\n    int local_port_v6_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server__load__event_8h/","title":"File server_load_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; server &gt; server_load_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/command/command_sender.h\"</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/server/server_event.h\"</code></li> </ul>"},{"location":"reference/cpp/server__load__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/server__load__event_8h/#classes","title":"Classes","text":"Type Name class ServerLoadEvent Called when either the server startup or reload has completed. <p>The documentation for this class was generated from the following file <code>include/endstone/event/server/server_load_event.h</code></p>"},{"location":"reference/cpp/server__load__event_8h_source/","title":"File server_load_event.h","text":"<p>File List &gt; endstone &gt; event &gt; server &gt; server_load_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/command/command_sender.h\"\n#include \"endstone/event/event.h\"\n#include \"endstone/event/server/server_event.h\"\n\nnamespace endstone {\n\nclass ServerLoadEvent : public ServerEvent {\npublic:\n    enum class LoadType {\n        Startup,  // TODO(event): add Reload\n    };\n\n    explicit ServerLoadEvent(LoadType type) : type_(type) {}\n\n    [[nodiscard]] LoadType getType() const\n    {\n        return type_;\n    }\n\n    inline static const std::string NAME = \"ServerLoadEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return false;\n    }\n\nprivate:\n    LoadType type_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_7fcf87d2683114df01ea446fea23c187/","title":"Dir include/endstone/event/weather","text":"<p>FileList &gt; endstone &gt; event &gt; weather</p>"},{"location":"reference/cpp/dir_7fcf87d2683114df01ea446fea23c187/#files","title":"Files","text":"Type Name file thunder_change_event.h file weather_change_event.h file weather_event.h <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/</code></p>"},{"location":"reference/cpp/thunder__change__event_8h/","title":"File thunder_change_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; weather &gt; thunder_change_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/weather/weather_event.h\"</code></li> </ul>"},{"location":"reference/cpp/thunder__change__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/thunder__change__event_8h/#classes","title":"Classes","text":"Type Name class ThunderChangeEvent Called when the thunder state in a world is changing. <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/thunder_change_event.h</code></p>"},{"location":"reference/cpp/thunder__change__event_8h_source/","title":"File thunder_change_event.h","text":"<p>File List &gt; endstone &gt; event &gt; weather &gt; thunder_change_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/weather/weather_event.h\"\n\nnamespace endstone {\n\nclass ThunderChangeEvent : public WeatherEvent {\npublic:\n    ThunderChangeEvent(Level &amp;level, bool to) : WeatherEvent(level), to_(to) {}\n    ~ThunderChangeEvent() override = default;\n\n    [[nodiscard]] bool toThunderState() const\n    {\n        return to_;\n    }\n\n    inline static const std::string NAME = \"ThunderChangeEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\nprivate:\n    bool to_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/weather__change__event_8h/","title":"File weather_change_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; weather &gt; weather_change_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/weather/weather_event.h\"</code></li> </ul>"},{"location":"reference/cpp/weather__change__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/weather__change__event_8h/#classes","title":"Classes","text":"Type Name class WeatherChangeEvent Called when the weather (rain) state in a world is changing. <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_change_event.h</code></p>"},{"location":"reference/cpp/weather__change__event_8h_source/","title":"File weather_change_event.h","text":"<p>File List &gt; endstone &gt; event &gt; weather &gt; weather_change_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/weather/weather_event.h\"\n\nnamespace endstone {\n\nclass WeatherChangeEvent : public WeatherEvent {\npublic:\n    WeatherChangeEvent(Level &amp;level, bool to) : WeatherEvent(level), to_(to) {}\n    ~WeatherChangeEvent() override = default;\n\n    [[nodiscard]] bool toWeatherState() const\n    {\n        return to_;\n    }\n\n    inline static const std::string NAME = \"WeatherChangeEvent\";\n    [[nodiscard]] std::string getEventName() const override\n    {\n        return NAME;\n    }\n\n    [[nodiscard]] bool isCancellable() const override\n    {\n        return true;\n    }\n\nprivate:\n    bool to_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/weather__event_8h/","title":"File weather_event.h","text":"<p>FileList &gt; endstone &gt; event &gt; weather &gt; weather_event.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/level/level.h\"</code></li> </ul>"},{"location":"reference/cpp/weather__event_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/weather__event_8h/#classes","title":"Classes","text":"Type Name class WeatherEvent Represents a Weather-related event. <p>The documentation for this class was generated from the following file <code>include/endstone/event/weather/weather_event.h</code></p>"},{"location":"reference/cpp/weather__event_8h_source/","title":"File weather_event.h","text":"<p>File List &gt; endstone &gt; event &gt; weather &gt; weather_event.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/event/event.h\"\n#include \"endstone/level/level.h\"\n\nnamespace endstone {\n\nclass WeatherEvent : public Event {\npublic:\n    explicit WeatherEvent(Level &amp;level) : level_(level){};\n    ~WeatherEvent() override = default;\n\n    [[nodiscard]] Level &amp;getLevel() const\n    {\n        return level_;\n    }\n\nprivate:\n    Level &amp;level_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_d1e84b530b14f41e8b6f5ec1b5dee76c/","title":"Dir include/endstone/inventory","text":"<p>FileList &gt; endstone &gt; inventory</p>"},{"location":"reference/cpp/dir_d1e84b530b14f41e8b6f5ec1b5dee76c/#files","title":"Files","text":"Type Name file inventory.h file player_inventory.h <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/</code></p>"},{"location":"reference/cpp/inventory_8h/","title":"File inventory.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; inventory.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/inventory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/inventory_8h/#classes","title":"Classes","text":"Type Name class Inventory Interface to the various inventories. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/inventory.h</code></p>"},{"location":"reference/cpp/inventory_8h_source/","title":"File inventory.h","text":"<p>File List &gt; endstone &gt; inventory &gt; inventory.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\nclass Inventory {\npublic:\n    virtual ~Inventory() = default;\n    [[nodiscard]] virtual int getSize() const = 0;\n\n    [[nodiscard]] virtual int getMaxStackSize() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player__inventory_8h/","title":"File player_inventory.h","text":"<p>FileList &gt; endstone &gt; inventory &gt; player_inventory.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/inventory/inventory.h\"</code></li> </ul>"},{"location":"reference/cpp/player__inventory_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player__inventory_8h/#classes","title":"Classes","text":"Type Name class PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots. <p>The documentation for this class was generated from the following file <code>include/endstone/inventory/player_inventory.h</code></p>"},{"location":"reference/cpp/player__inventory_8h_source/","title":"File player_inventory.h","text":"<p>File List &gt; endstone &gt; inventory &gt; player_inventory.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/inventory/inventory.h\"\n\nnamespace endstone {\n\nclass PlayerInventory : public Inventory {};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_8e239ca1e5fd0d936d66a30330d3a329/","title":"Dir include/endstone/level","text":"<p>FileList &gt; endstone &gt; level</p>"},{"location":"reference/cpp/dir_8e239ca1e5fd0d936d66a30330d3a329/#files","title":"Files","text":"Type Name file dimension.h file level.h file location.h file position.h <p>The documentation for this class was generated from the following file <code>include/endstone/level/</code></p>"},{"location":"reference/cpp/dimension_8h/","title":"File dimension.h","text":"<p>FileList &gt; endstone &gt; level &gt; dimension.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/dimension_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/dimension_8h/#classes","title":"Classes","text":"Type Name class Dimension Represents a dimension within a Level . <p>The documentation for this class was generated from the following file <code>include/endstone/level/dimension.h</code></p>"},{"location":"reference/cpp/dimension_8h_source/","title":"File dimension.h","text":"<p>File List &gt; endstone &gt; level &gt; dimension.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nclass Dimension {\npublic:\n    enum class Type {\n        Overworld = 0,\n        Nether = 1,\n        TheEnd = 2,\n        Custom = 999\n    };\n\n    virtual ~Dimension() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual Type getType() const = 0;\n\n    [[nodiscard]] virtual Level &amp;getLevel() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/level_8h/","title":"File level.h","text":"<p>FileList &gt; endstone &gt; level &gt; level.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"endstone/actor/actor.h\"</code></li> </ul>"},{"location":"reference/cpp/level_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/level_8h/#classes","title":"Classes","text":"Type Name class Level Represents a level, which may contain actors, chunks and blocks. <p>The documentation for this class was generated from the following file <code>include/endstone/level/level.h</code></p>"},{"location":"reference/cpp/level_8h_source/","title":"File level.h","text":"<p>File List &gt; endstone &gt; level &gt; level.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"endstone/actor/actor.h\"\n\nnamespace endstone {\n\nclass Level {\npublic:\n    virtual ~Level() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Actor *&gt; getActors() const = 0;\n\n    [[nodiscard]] virtual int getTime() const = 0;\n\n    virtual void setTime(int time) = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Dimension *&gt; getDimensions() const = 0;\n\n    [[nodiscard]] virtual Dimension *getDimension(std::string name) const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/location_8h/","title":"File location.h","text":"<p>FileList &gt; endstone &gt; level &gt; location.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include \"endstone/level/position.h\"</code></li> <li><code>#include \"endstone/util/vector.h\"</code></li> </ul>"},{"location":"reference/cpp/location_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/location_8h/#classes","title":"Classes","text":"Type Name class Location Represents a 3-dimensional location in a dimension within a level. <p>The documentation for this class was generated from the following file <code>include/endstone/level/location.h</code></p>"},{"location":"reference/cpp/location_8h_source/","title":"File location.h","text":"<p>File List &gt; endstone &gt; level &gt; location.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n\n#include \"endstone/level/position.h\"\n#include \"endstone/util/vector.h\"\n\nnamespace endstone {\n\nclass Location : public Position {\npublic:\n    Location(Dimension *dimension, float x, float y, float z, float pitch = 0.0, float yaw = 0.0)\n        : Position(dimension, x, y, z), pitch_(pitch), yaw_(yaw)\n    {\n    }\n\n    [[nodiscard]] float getPitch() const\n    {\n        return pitch_;\n    }\n\n    void setPitch(float pitch)\n    {\n        pitch_ = pitch;\n    }\n\n    [[nodiscard]] float getYaw() const\n    {\n        return yaw_;\n    }\n\n    void setYaw(float yaw)\n    {\n        yaw_ = yaw;\n    }\n\nprivate:\n    float pitch_;  // Rotation around the right axis (around X axis).\n    float yaw_;    // Rotation around the up axis (around Y axis)\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/position_8h/","title":"File position.h","text":"<p>FileList &gt; endstone &gt; level &gt; position.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;optional&gt;</code></li> <li><code>#include \"endstone/util/vector.h\"</code></li> </ul>"},{"location":"reference/cpp/position_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/position_8h/#classes","title":"Classes","text":"Type Name class Position Represents a 3-dimensional position in a dimension within a level. <p>The documentation for this class was generated from the following file <code>include/endstone/level/position.h</code></p>"},{"location":"reference/cpp/position_8h_source/","title":"File position.h","text":"<p>File List &gt; endstone &gt; level &gt; position.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;optional&gt;\n\n#include \"endstone/util/vector.h\"\n\nnamespace endstone {\n\nclass Level;\nclass Dimension;\n\nclass Position : public Vector&lt;float&gt; {\npublic:\n    Position(Dimension *dimension, float x, float y, float z) : Vector(x, y, z), dimension_(dimension) {}\n\n    [[nodiscard]] Dimension *getDimension() const\n    {\n        return dimension_;\n    }\n\n    void setDimension(Dimension &amp;dimension)\n    {\n        dimension_ = &amp;dimension;\n    }\n\nprivate:\n    Dimension *dimension_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_33a21cc2f228e5ad6b7d1bc8d0d1e9bc/","title":"Dir include/endstone/permissions","text":"<p>FileList &gt; endstone &gt; permissions</p>"},{"location":"reference/cpp/dir_33a21cc2f228e5ad6b7d1bc8d0d1e9bc/#files","title":"Files","text":"Type Name file permissible.h file permission.h file permission_attachment.h file permission_attachment_info.h file permission_default.h <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/</code></p>"},{"location":"reference/cpp/permissible_8h/","title":"File permissible.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permissible.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_set&gt;</code></li> <li><code>#include \"endstone/permissions/permission_attachment_info.h\"</code></li> </ul>"},{"location":"reference/cpp/permissible_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/permissible_8h/#classes","title":"Classes","text":"Type Name class Permissible Represents an object that may become a server operator and can be assigned permissions. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permissible.h</code></p>"},{"location":"reference/cpp/permissible_8h_source/","title":"File permissible.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permissible.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;unordered_set&gt;\n\n#include \"endstone/permissions/permission_attachment_info.h\"\n\nnamespace endstone {\n\nclass CommandSender;\nclass Plugin;\nclass Permission;\nclass PermissionAttachment;\n\nclass Permissible {\npublic:\n    virtual ~Permissible() = default;\n\n    [[nodiscard]] virtual bool isOp() const = 0;\n\n    virtual void setOp(bool value) = 0;\n\n    [[nodiscard]] virtual bool isPermissionSet(std::string name) const = 0;\n\n    [[nodiscard]] virtual bool isPermissionSet(const Permission &amp;perm) const = 0;\n\n    [[nodiscard]] virtual bool hasPermission(std::string name) const = 0;\n\n    [[nodiscard]] virtual bool hasPermission(const Permission &amp;perm) const = 0;\n\n    virtual PermissionAttachment *addAttachment(Plugin &amp;plugin, const std::string &amp;name, bool value) = 0;\n\n    virtual PermissionAttachment *addAttachment(Plugin &amp;plugin) = 0;\n\n    virtual bool removeAttachment(PermissionAttachment &amp;attachment) = 0;\n\n    virtual void recalculatePermissions() = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;PermissionAttachmentInfo *&gt; getEffectivePermissions() const = 0;\n\n    [[nodiscard]] virtual CommandSender *asCommandSender() const = 0;\n};\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission_8h/","title":"File permission.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;unordered_set&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/permissions/permissible.h\"</code></li> <li><code>#include \"endstone/permissions/permission_default.h\"</code></li> <li><code>#include \"endstone/plugin/plugin_manager.h\"</code></li> </ul>"},{"location":"reference/cpp/permission_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/permission_8h/#classes","title":"Classes","text":"Type Name class Permission Represents a unique permission that may be attached to a Permissible . <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission.h</code></p>"},{"location":"reference/cpp/permission_8h_source/","title":"File permission.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;unordered_set&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/permissions/permissible.h\"\n#include \"endstone/permissions/permission_default.h\"\n#include \"endstone/plugin/plugin_manager.h\"\n\nnamespace endstone {\n\nclass Permission {\npublic:\n    static const PermissionDefault DefaultPermission = PermissionDefault::Operator;\n\n    explicit Permission(std::string name, std::string description = \"\",\n                        PermissionDefault default_value = DefaultPermission,\n                        std::unordered_map&lt;std::string, bool&gt; children = {})\n    {\n        this-&gt;name_ = std::move(name);\n        this-&gt;description_ = std::move(description);\n        this-&gt;default_value_ = default_value;\n        this-&gt;children_ = std::move(children);\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    std::unordered_map&lt;std::string, bool&gt; &amp;getChildren()\n    {\n        return children_;\n    }\n\n    [[nodiscard]] PermissionDefault getDefault() const\n    {\n        return default_value_;\n    }\n\n    void setDefault(PermissionDefault value)\n    {\n        default_value_ = value;\n        recalculatePermissibles();\n    }\n\n    [[nodiscard]] std::string getDescription() const\n    {\n        return description_;\n    }\n\n    void setDescription(std::string value)\n    {\n        description_ = std::move(value);\n    }\n\n    [[nodiscard]] std::unordered_set&lt;Permissible *&gt; getPermissibles() const\n    {\n        if (!plugin_manager_) {\n            return {};\n        }\n\n        return plugin_manager_-&gt;getPermissionSubscriptions(name_);\n    }\n\n    void recalculatePermissibles()\n    {\n        if (!plugin_manager_) {\n            return;\n        }\n\n        auto perms = getPermissibles();\n        plugin_manager_-&gt;recalculatePermissionDefaults(*this);\n\n        for (auto *p : perms) {\n            p-&gt;recalculatePermissions();\n        }\n    }\n\n    Permission *addParent(std::string name, bool value)\n    {\n        if (!plugin_manager_) {\n            return nullptr;\n        }\n\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        auto *perm = plugin_manager_-&gt;getPermission(name);\n\n        if (!perm) {\n            perm = plugin_manager_-&gt;addPermission(std::make_unique&lt;Permission&gt;(name));\n        }\n\n        addParent(*perm, value);\n        return perm;\n    }\n\n    void addParent(Permission &amp;perm, bool value) const\n    {\n        perm.getChildren()[getName()] = value;\n        perm.recalculatePermissibles();\n    }\n\n    void init(PluginManager &amp;plugin_manager)\n    {\n        plugin_manager_ = &amp;plugin_manager;\n    }\n\nprivate:\n    std::string name_;\n    std::unordered_map&lt;std::string, bool&gt; children_;\n    PermissionDefault default_value_ = DefaultPermission;\n    std::string description_;\n    PluginManager *plugin_manager_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__attachment_8h/","title":"File permission_attachment.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_attachment.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include \"endstone/permissions/permissible.h\"</code></li> <li><code>#include \"endstone/permissions/permission.h\"</code></li> </ul>"},{"location":"reference/cpp/permission__attachment_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/permission__attachment_8h/#classes","title":"Classes","text":"Type Name class PermissionAttachment Holds information about a permission attachment on a Permissible object. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment.h</code></p>"},{"location":"reference/cpp/permission__attachment_8h_source/","title":"File permission_attachment.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_attachment.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;utility&gt;\n\n#include \"endstone/permissions/permissible.h\"\n#include \"endstone/permissions/permission.h\"\n\nnamespace endstone {\n\nusing PermissionRemovedExecutor = std::function&lt;void(const PermissionAttachment &amp;)&gt;;\n\nclass PermissionAttachment {\npublic:\n    PermissionAttachment(Plugin &amp;plugin, Permissible &amp;permissible) : permissible_(permissible), plugin_(plugin) {}\n\n    [[nodiscard]] Plugin &amp;getPlugin() const\n    {\n        return plugin_;\n    }\n\n    void setRemovalCallback(PermissionRemovedExecutor ex)\n    {\n        removed_ = std::move(ex);\n    }\n\n    [[nodiscard]] PermissionRemovedExecutor getRemovalCallback() const\n    {\n        return removed_;\n    }\n\n    [[nodiscard]] Permissible &amp;getPermissible() const\n    {\n        return permissible_;\n    }\n\n    [[nodiscard]] std::unordered_map&lt;std::string, bool&gt; getPermissions() const\n    {\n        return permissions_;\n    }\n\n    void setPermission(std::string name, bool value)\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        permissions_[name] = value;\n        permissible_.recalculatePermissions();\n    }\n\n    void setPermission(Permission &amp;perm, bool value)\n    {\n        setPermission(perm.getName(), value);\n    }\n\n    void unsetPermission(std::string name)\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        permissions_.erase(name);\n        permissible_.recalculatePermissions();\n    }\n\n    void unsetPermission(Permission &amp;perm)\n    {\n        unsetPermission(perm.getName());\n    }\n\n    bool remove()\n    {\n        return permissible_.removeAttachment(*this);\n    }\n\nprivate:\n    PermissionRemovedExecutor removed_;\n    std::unordered_map&lt;std::string, bool&gt; permissions_;\n    Permissible &amp;permissible_;\n    Plugin &amp;plugin_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__attachment__info_8h/","title":"File permission_attachment_info.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_attachment_info.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> </ul>"},{"location":"reference/cpp/permission__attachment__info_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/permission__attachment__info_8h/#classes","title":"Classes","text":"Type Name class PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it. <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_attachment_info.h</code></p>"},{"location":"reference/cpp/permission__attachment__info_8h_source/","title":"File permission_attachment_info.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_attachment_info.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\nnamespace endstone {\n\nclass Permissible;\nclass PermissionAttachment;\n\nclass PermissionAttachmentInfo {\n\npublic:\n    PermissionAttachmentInfo(Permissible &amp;permissible, std::string permission, PermissionAttachment *attachment,\n                             bool value)\n        : permissible_(permissible), permission_(std::move(permission)), attachment_(attachment), value_(value)\n    {\n    }\n\n    [[nodiscard]] Permissible &amp;getPermissible() const\n    {\n        return permissible_;\n    }\n\n    [[nodiscard]] std::string getPermission() const\n    {\n        return permission_;\n    }\n\n    [[nodiscard]] PermissionAttachment *getAttachment() const\n    {\n        return attachment_;\n    }\n\n    [[nodiscard]] bool getValue() const\n    {\n        return value_;\n    }\n\nprivate:\n    Permissible &amp;permissible_;\n    std::string permission_;\n    PermissionAttachment *attachment_;\n    bool value_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/permission__default_8h/","title":"File permission_default.h","text":"<p>FileList &gt; endstone &gt; permissions &gt; permission_default.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/permission__default_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone <p>The documentation for this class was generated from the following file <code>include/endstone/permissions/permission_default.h</code></p>"},{"location":"reference/cpp/permission__default_8h_source/","title":"File permission_default.h","text":"<p>File List &gt; endstone &gt; permissions &gt; permission_default.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class PermissionDefault {\n    True,\n    False,\n    Operator,\n    NotOperator,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_53ee43673b2467e53c4cb8c30a2e7d89/","title":"Dir include/endstone/plugin","text":"<p>FileList &gt; endstone &gt; plugin</p>"},{"location":"reference/cpp/dir_53ee43673b2467e53c4cb8c30a2e7d89/#files","title":"Files","text":"Type Name file plugin.h file plugin_description.h file plugin_load_order.h file plugin_loader.h file plugin_manager.h <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/</code></p>"},{"location":"reference/cpp/plugin_8h/","title":"File plugin.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;filesystem&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/command/command_executor.h\"</code></li> <li><code>#include \"endstone/detail/plugin/plugin_description_builder.h\"</code></li> <li><code>#include \"endstone/logger.h\"</code></li> <li><code>#include \"endstone/permissions/permission.h\"</code></li> <li><code>#include \"endstone/plugin/plugin_description.h\"</code></li> <li><code>#include \"endstone/server.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin_8h/#classes","title":"Classes","text":"Type Name class Plugin Represents a Plugin ."},{"location":"reference/cpp/plugin_8h/#macros","title":"Macros","text":"Type Name define ENDSTONE_PLUGIN (Name, Version, MainClass)"},{"location":"reference/cpp/plugin_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"reference/cpp/plugin_8h/#define-endstone_plugin","title":"define ENDSTONE_PLUGIN","text":"<pre><code>#define ENDSTONE_PLUGIN (\n    Name,\n    Version,\n    MainClass\n) class PluginDescriptionBuilderImpl : public endstone::detail::PluginDescriptionBuilder { \\\n    public:                                                                                  \\\n        PluginDescriptionBuilderImpl();                                                      \\\n    };                                                                                       \\\n    static PluginDescriptionBuilderImpl builder;                                             \\\n    class EndstonePluginImpl : public MainClass {                                            \\\n    public:                                                                                  \\\n        EndstonePluginImpl() = default;                                                      \\\n        const endstone::PluginDescription &amp;getDescription() const override                   \\\n        {                                                                                    \\\n            return description_;                                                             \\\n        }                                                                                    \\\n                                                                                             \\\n    private:                                                                                 \\ endstone::PluginDescription description_ = builder.build(Name, Version);             \\\n    };                                                                                       \\\n    extern \"C\" [[maybe_unused]] ENDSTONE_EXPORT endstone::Plugin *init_endstone_plugin()     \\\n    {                                                                                        \\\n        auto *p = new EndstonePluginImpl();                                                  \\\n        return p;                                                                            \\\n    }                                                                                        \\\n    PluginDescriptionBuilderImpl::PluginDescriptionBuilderImpl()\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin.h</code></p>"},{"location":"reference/cpp/plugin_8h_source/","title":"File plugin.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;filesystem&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/command/command_executor.h\"\n#include \"endstone/detail/plugin/plugin_description_builder.h\"\n#include \"endstone/logger.h\"\n#include \"endstone/permissions/permission.h\"\n#include \"endstone/plugin/plugin_description.h\"\n#include \"endstone/server.h\"\n\nnamespace endstone {\n\nclass PluginCommand;\nclass PluginLoader;\n\nclass Plugin : public CommandExecutor {\npublic:\n    Plugin() = default;\n    Plugin(const Plugin &amp;) = delete;\n    Plugin &amp;operator=(const Plugin &amp;) = delete;\n\n    ~Plugin() override = default;\n\n    [[nodiscard]] virtual const PluginDescription &amp;getDescription() const = 0;\n\n    virtual void onLoad() {}\n\n    virtual void onEnable() {}\n\n    virtual void onDisable() {}\n\n    [[nodiscard]] Logger &amp;getLogger() const\n    {\n        return *logger_;\n    }\n\n    [[nodiscard]] bool isEnabled() const\n    {\n        return enabled_;\n    }\n\n    [[nodiscard]] PluginLoader &amp;getPluginLoader() const\n    {\n        return *loader_;\n    }\n\n    [[nodiscard]] Server &amp;getServer() const\n    {\n        return *server_;\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return getDescription().getName();\n    };\n\n    [[nodiscard]] PluginCommand *getCommand(std::string name) const\n    {\n        std::transform(name.begin(), name.end(), name.begin(), [](unsigned char c) { return std::tolower(c); });\n        return getServer().getPluginCommand(name);\n    }\n\n    [[nodiscard]] const std::filesystem::path &amp;getDataFolder() const\n    {\n        return data_folder_;\n    }\n\n    template &lt;typename EventType, typename T&gt;\n    void registerEvent(void (T::*func)(EventType &amp;), T &amp;instance, EventPriority priority = EventPriority::Normal,\n                       bool ignore_cancelled = false)\n    {\n        getServer().getPluginManager().registerEvent(\n            EventType::NAME, [func, &amp;instance](Event &amp;e) { (instance.*func)(static_cast&lt;EventType &amp;&gt;(e)); }, priority,\n            *this, ignore_cancelled);\n    }\n\n    template &lt;typename EventType&gt;\n    void registerEvent(std::function&lt;void(EventType &amp;)&gt; func, EventPriority priority = EventPriority::Normal,\n                       bool ignore_cancelled = false)\n    {\n        getServer().getPluginManager().registerEvent(\n            EventType::NAME, [func](Event &amp;e) { func(static_cast&lt;EventType &amp;&gt;(e)); }, priority, *this,\n            ignore_cancelled);\n    }\n\nprotected:\n    friend class PluginLoader;\n\n    void setEnabled(bool enabled)\n    {\n        if (enabled_ != enabled) {\n            enabled_ = enabled;\n\n            if (enabled_) {\n                onEnable();\n            }\n            else {\n                onDisable();\n            }\n        }\n    }\n\nprivate:\n    bool enabled_{false};\n    PluginLoader *loader_{nullptr};\n    Server *server_{nullptr};\n    Logger *logger_{nullptr};\n    std::filesystem::path data_folder_;\n};\n\n}  // namespace endstone\n\n#ifndef ENDSTONE_PLUGIN\n#define ENDSTONE_PLUGIN(Name, Version, MainClass)                                            \\\n    class PluginDescriptionBuilderImpl : public endstone::detail::PluginDescriptionBuilder { \\\n    public:                                                                                  \\\n        PluginDescriptionBuilderImpl();                                                      \\\n    };                                                                                       \\\n    static PluginDescriptionBuilderImpl builder;                                             \\\n    class EndstonePluginImpl : public MainClass {                                            \\\n    public:                                                                                  \\\n        EndstonePluginImpl() = default;                                                      \\\n        const endstone::PluginDescription &amp;getDescription() const override                   \\\n        {                                                                                    \\\n            return description_;                                                             \\\n        }                                                                                    \\\n                                                                                             \\\n    private:                                                                                 \\\n        endstone::PluginDescription description_ = builder.build(Name, Version);             \\\n    };                                                                                       \\\n    extern \"C\" [[maybe_unused]] ENDSTONE_EXPORT endstone::Plugin *init_endstone_plugin()     \\\n    {                                                                                        \\\n        auto *p = new EndstonePluginImpl();                                                  \\\n        return p;                                                                            \\\n    }                                                                                        \\\n    PluginDescriptionBuilderImpl::PluginDescriptionBuilderImpl()\n#endif\n</code></pre>"},{"location":"reference/cpp/plugin__description_8h/","title":"File plugin_description.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_description.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> <li><code>#include \"endstone/command/command.h\"</code></li> <li><code>#include \"endstone/detail/plugin/plugin_description_builder.h\"</code></li> <li><code>#include \"endstone/endstone.h\"</code></li> <li><code>#include \"endstone/permissions/permission.h\"</code></li> <li><code>#include \"endstone/plugin/plugin_load_order.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__description_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin__description_8h/#classes","title":"Classes","text":"Type Name class PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_description.h</code></p>"},{"location":"reference/cpp/plugin__description_8h_source/","title":"File plugin_description.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_description.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include &lt;fmt/format.h&gt;\n\n#include \"endstone/command/command.h\"\n#include \"endstone/detail/plugin/plugin_description_builder.h\"\n#include \"endstone/endstone.h\"\n#include \"endstone/permissions/permission.h\"\n#include \"endstone/plugin/plugin_load_order.h\"\n\nnamespace endstone {\n\nclass PluginDescription {\npublic:\n    PluginDescription(std::string name, std::string version, std::string description = \"\",\n                      PluginLoadOrder load = PluginLoadOrder::PostWorld, std::vector&lt;std::string&gt; authors = {},\n                      std::vector&lt;std::string&gt; contributors = {}, std::string website = \"\", std::string prefix = \"\",\n                      std::vector&lt;std::string&gt; provides = {}, std::vector&lt;std::string&gt; depend = {},\n                      std::vector&lt;std::string&gt; soft_depend = {}, std::vector&lt;std::string&gt; load_before = {},\n                      PermissionDefault default_permission = PermissionDefault::Operator,\n                      std::vector&lt;Command&gt; commands = {}, std::vector&lt;Permission&gt; permissions = {})\n        : description_(std::move(description)), load_(load), authors_(std::move(authors)),\n          contributors_(std::move(contributors)), website_(std::move(website)), prefix_(std::move(prefix)),\n          provides_(std::move(provides)), depend_(std::move(depend)), soft_depend_(std::move(soft_depend)),\n          load_before_(std::move(load_before)), default_permission_(default_permission), commands_(std::move(commands)),\n          permissions_(std::move(permissions))\n    {\n        name_ = std::move(name);\n        std::replace(name_.begin(), name_.end(), ' ', '_');\n        version_ = std::move(version);\n        full_name_ = fmt::format(\"{} v{}\", name_, version_);\n        api_version_ = ENDSTONE_API_VERSION;\n    }\n\n    [[nodiscard]] std::string getName() const\n    {\n        return name_;\n    }\n\n    [[nodiscard]] std::string getVersion() const\n    {\n        return version_;\n    }\n\n    [[nodiscard]] std::string getFullName() const\n    {\n        return full_name_;\n    }\n\n    [[nodiscard]] std::string getAPIVersion() const\n    {\n        return api_version_;\n    }\n\n    [[nodiscard]] std::string getDescription() const\n    {\n        return description_;\n    }\n\n    [[nodiscard]] PluginLoadOrder getLoad() const\n    {\n        return load_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getAuthors() const\n    {\n        return authors_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getContributors() const\n    {\n        return contributors_;\n    }\n\n    [[nodiscard]] std::string getWebsite() const\n    {\n        return website_;\n    }\n\n    [[nodiscard]] std::string getPrefix() const\n    {\n        return prefix_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getProvides() const\n    {\n        return provides_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getDepend() const\n    {\n        return depend_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getSoftDepend() const\n    {\n        return soft_depend_;\n    }\n\n    [[nodiscard]] std::vector&lt;std::string&gt; getLoadBefore() const\n    {\n        return load_before_;\n    }\n\n    [[nodiscard]] PermissionDefault getDefaultPermission() const\n    {\n        return default_permission_;\n    }\n\n    [[nodiscard]] std::vector&lt;Command&gt; getCommands() const\n    {\n        return commands_;\n    }\n\n    [[nodiscard]] std::vector&lt;Permission&gt; getPermissions() const\n    {\n        return permissions_;\n    }\n\nprivate:\n    std::string name_;\n    std::string version_;\n    std::string full_name_;\n    std::string api_version_;\n    std::string description_;\n    PluginLoadOrder load_ = PluginLoadOrder::PostWorld;\n    std::vector&lt;std::string&gt; authors_;\n    std::vector&lt;std::string&gt; contributors_;\n    std::string website_;\n    std::string prefix_;\n    std::vector&lt;std::string&gt; provides_;\n    std::vector&lt;std::string&gt; depend_;\n    std::vector&lt;std::string&gt; soft_depend_;\n    std::vector&lt;std::string&gt; load_before_;\n    PermissionDefault default_permission_ = PermissionDefault::Operator;\n    std::vector&lt;Command&gt; commands_;\n    std::vector&lt;Permission&gt; permissions_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__load__order_8h/","title":"File plugin_load_order.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_load_order.h</p> <p>Go to the source code of this file</p>"},{"location":"reference/cpp/plugin__load__order_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_load_order.h</code></p>"},{"location":"reference/cpp/plugin__load__order_8h_source/","title":"File plugin_load_order.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_load_order.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\nnamespace endstone {\n\nenum class PluginLoadOrder {\n    Startup,\n    PostWorld,\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__loader_8h/","title":"File plugin_loader.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_loader.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cctype&gt;</code></li> <li><code>#include &lt;filesystem&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/server/plugin_disable_event.h\"</code></li> <li><code>#include \"endstone/event/server/plugin_enable_event.h\"</code></li> <li><code>#include \"endstone/logger.h\"</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> <li><code>#include \"endstone/server.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__loader_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin__loader_8h/#classes","title":"Classes","text":"Type Name class PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_loader.h</code></p>"},{"location":"reference/cpp/plugin__loader_8h_source/","title":"File plugin_loader.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_loader.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;cctype&gt;\n#include &lt;filesystem&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/server/plugin_disable_event.h\"\n#include \"endstone/event/server/plugin_enable_event.h\"\n#include \"endstone/logger.h\"\n#include \"endstone/plugin/plugin.h\"\n#include \"endstone/server.h\"\n\nnamespace endstone {\n\nclass PluginLoader {\npublic:\n    explicit PluginLoader(Server &amp;server) : server_(server) {}\n    PluginLoader(const PluginLoader &amp;) = delete;\n    PluginLoader &amp;operator=(const PluginLoader &amp;) = delete;\n\n    virtual ~PluginLoader() = default;\n\n    [[nodiscard]] virtual std::vector&lt;Plugin *&gt; loadPlugins(const std::string &amp;directory) = 0;\n\n    virtual void enablePlugin(Plugin &amp;plugin) const\n    {\n        if (!plugin.isEnabled()) {\n            plugin.getLogger().info(\"Enabling {}\", plugin.getDescription().getFullName());\n            plugin.setEnabled(true);\n            PluginEnableEvent event(plugin);\n            server_.getPluginManager().callEvent(event);\n        }\n    }\n\n    virtual void disablePlugin(Plugin &amp;plugin) const\n    {\n        if (plugin.isEnabled()) {\n            plugin.getLogger().info(\"Disabling {}\", plugin.getDescription().getFullName());\n            plugin.setEnabled(false);\n            PluginDisableEvent event(plugin);\n            server_.getPluginManager().callEvent(event);\n        }\n    }\n\n    [[nodiscard]] Server &amp;getServer() const\n    {\n        return server_;\n    }\n\nprotected:\n    void initPlugin(Plugin &amp;plugin, Logger &amp;logger, std::filesystem::path data_folder)\n    {\n        plugin.loader_ = this;\n        plugin.server_ = &amp;server_;\n        plugin.logger_ = &amp;logger;\n        plugin.data_folder_ = std::move(data_folder);\n    }\n\n    Server &amp;server_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/plugin__manager_8h/","title":"File plugin_manager.h","text":"<p>FileList &gt; endstone &gt; plugin &gt; plugin_manager.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/event/event.h\"</code></li> <li><code>#include \"endstone/event/event_priority.h\"</code></li> </ul>"},{"location":"reference/cpp/plugin__manager_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/plugin__manager_8h/#classes","title":"Classes","text":"Type Name class PluginManager Represents a plugin manager that handles all plugins from the Server . <p>The documentation for this class was generated from the following file <code>include/endstone/plugin/plugin_manager.h</code></p>"},{"location":"reference/cpp/plugin__manager_8h_source/","title":"File plugin_manager.h","text":"<p>File List &gt; endstone &gt; plugin &gt; plugin_manager.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/event/event.h\"\n#include \"endstone/event/event_priority.h\"\n\nnamespace endstone {\n\nclass Permission;\nclass Permissible;\nclass Plugin;\nclass PluginLoader;\n\nclass PluginManager {\npublic:\n    PluginManager() = default;\n    PluginManager(PluginManager const &amp;) = delete;\n    PluginManager &amp;operator=(PluginManager const &amp;) = delete;\n    virtual ~PluginManager() = default;\n\n    virtual void registerLoader(std::unique_ptr&lt;PluginLoader&gt; loader) = 0;\n\n    [[nodiscard]] virtual Plugin *getPlugin(const std::string &amp;name) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Plugin *&gt; getPlugins() const = 0;\n\n    [[nodiscard]] virtual bool isPluginEnabled(const std::string &amp;name) const = 0;\n\n    [[nodiscard]] virtual bool isPluginEnabled(Plugin *plugin) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Plugin *&gt; loadPlugins(const std::string &amp;directory) = 0;\n\n    virtual void enablePlugin(Plugin &amp;plugin) const = 0;\n\n    virtual void enablePlugins() const = 0;\n\n    virtual void disablePlugin(Plugin &amp;plugin) const = 0;\n\n    virtual void disablePlugins() const = 0;\n\n    virtual void clearPlugins() = 0;\n\n    virtual void callEvent(Event &amp;event) = 0;\n\n    virtual void registerEvent(std::string event, std::function&lt;void(Event &amp;)&gt; executor, EventPriority priority,\n                               Plugin &amp;plugin, bool ignore_cancelled) = 0;\n\n    [[nodiscard]] virtual Permission *getPermission(std::string name) const = 0;\n\n    virtual Permission *addPermission(std::unique_ptr&lt;Permission&gt; perm) = 0;\n\n    virtual void removePermission(Permission &amp;perm) = 0;\n\n    virtual void removePermission(std::string name) = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permission *&gt; getDefaultPermissions(bool op) const = 0;\n\n    virtual void recalculatePermissionDefaults(Permission &amp;perm) = 0;\n\n    virtual void subscribeToPermission(std::string permission, Permissible &amp;permissible) = 0;\n\n    virtual void unsubscribeFromPermission(std::string permission, Permissible &amp;permissible) = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permissible *&gt; getPermissionSubscriptions(\n        std::string permission) const = 0;\n\n    virtual void subscribeToDefaultPerms(bool op, Permissible &amp;permissible) = 0;\n\n    virtual void unsubscribeFromDefaultPerms(bool op, Permissible &amp;permissible) = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permissible *&gt; getDefaultPermSubscriptions(bool op) const = 0;\n\n    [[nodiscard]] virtual std::unordered_set&lt;Permission *&gt; getPermissions() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_3a50fadda3c7cdc27c965a478a3f7d27/","title":"Dir include/endstone/scheduler","text":"<p>FileList &gt; endstone &gt; scheduler</p>"},{"location":"reference/cpp/dir_3a50fadda3c7cdc27c965a478a3f7d27/#files","title":"Files","text":"Type Name file scheduler.h file task.h <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/</code></p>"},{"location":"reference/cpp/scheduler_8h/","title":"File scheduler.h","text":"<p>FileList &gt; endstone &gt; scheduler &gt; scheduler.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"endstone/scheduler/task.h\"</code></li> </ul>"},{"location":"reference/cpp/scheduler_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/scheduler_8h/#classes","title":"Classes","text":"Type Name class Scheduler Represents a scheduler that executes various tasks. <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/scheduler.h</code></p>"},{"location":"reference/cpp/scheduler_8h_source/","title":"File scheduler.h","text":"<p>File List &gt; endstone &gt; scheduler &gt; scheduler.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include \"endstone/scheduler/task.h\"\n\nnamespace endstone {\n\nclass Scheduler {\npublic:\n    virtual ~Scheduler() = default;\n\n    virtual std::shared_ptr&lt;Task&gt; runTask(Plugin &amp;plugin, std::function&lt;void()&gt; task) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskLater(Plugin &amp;plugin, std::function&lt;void()&gt; task, std::uint64_t delay) = 0;\n\n    virtual std::shared_ptr&lt;Task&gt; runTaskTimer(Plugin &amp;plugin, std::function&lt;void()&gt; task, std::uint64_t delay,\n                                               std::uint64_t period) = 0;\n\n    virtual void cancelTask(TaskId id) = 0;\n\n    virtual void cancelTasks(Plugin &amp;plugin) = 0;\n\n    virtual bool isRunning(TaskId id) = 0;\n\n    virtual bool isQueued(TaskId id) = 0;\n\n    virtual std::vector&lt;Task *&gt; getPendingTasks() = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/task_8h/","title":"File task.h","text":"<p>FileList &gt; endstone &gt; scheduler &gt; task.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include \"endstone/plugin/plugin.h\"</code></li> </ul>"},{"location":"reference/cpp/task_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/task_8h/#classes","title":"Classes","text":"Type Name class Task Represents a task being executed by the scheduler. <p>The documentation for this class was generated from the following file <code>include/endstone/scheduler/task.h</code></p>"},{"location":"reference/cpp/task_8h_source/","title":"File task.h","text":"<p>File List &gt; endstone &gt; scheduler &gt; task.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;cstdint&gt;\n\n#include \"endstone/plugin/plugin.h\"\n\nnamespace endstone {\n\nusing TaskId = std::uint32_t;\n\nclass Task {\npublic:\n    virtual ~Task() = default;\n\n    [[nodiscard]] virtual TaskId getTaskId() const = 0;\n\n    [[nodiscard]] virtual Plugin &amp;getOwner() const = 0;\n\n    [[nodiscard]] virtual bool isSync() const = 0;\n\n    [[nodiscard]] virtual bool isCancelled() const = 0;\n\n    virtual void cancel() = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/dir_89b85071337bf933dea6c29b4c6a4410/","title":"Dir include/endstone/util","text":"<p>FileList &gt; endstone &gt; util</p>"},{"location":"reference/cpp/dir_89b85071337bf933dea6c29b4c6a4410/#files","title":"Files","text":"Type Name file socket_address.h file uuid.h file vector.h <p>The documentation for this class was generated from the following file <code>include/endstone/util/</code></p>"},{"location":"reference/cpp/socket__address_8h/","title":"File socket_address.h","text":"<p>FileList &gt; endstone &gt; util &gt; socket_address.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/socket__address_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/socket__address_8h/#classes","title":"Classes","text":"Type Name class SocketAddress Represents an IP Socket Address (hostname + port number). <p>The documentation for this class was generated from the following file <code>include/endstone/util/socket_address.h</code></p>"},{"location":"reference/cpp/socket__address_8h_source/","title":"File socket_address.h","text":"<p>File List &gt; endstone &gt; util &gt; socket_address.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n#include &lt;cstdint&gt;\n#include &lt;string&gt;\n\nnamespace endstone {\n\nclass SocketAddress {\npublic:\n    SocketAddress() = default;\n    SocketAddress(std::string hostname, std::uint32_t port) : hostname_(std::move(hostname)), port_(port) {}\n\n    [[nodiscard]] const std::string &amp;getHostname() const\n    {\n        return hostname_;\n    }\n\n    [[nodiscard]] std::uint32_t getPort() const\n    {\n        return port_;\n    }\n\nprivate:\n    std::string hostname_;\n    std::uint32_t port_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/uuid_8h/","title":"File uuid.h","text":"<p>FileList &gt; endstone &gt; util &gt; uuid.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;cstddef&gt;</code></li> <li><code>#include &lt;cstdint&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"reference/cpp/uuid_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone namespace std"},{"location":"reference/cpp/uuid_8h/#classes","title":"Classes","text":"Type Name class UUID Implementation of Universally Unique Identifier ( UUID ) struct hash&lt; endstone::UUID &gt; &lt;&gt; <p>The documentation for this class was generated from the following file <code>include/endstone/util/uuid.h</code></p>"},{"location":"reference/cpp/uuid_8h_source/","title":"File uuid.h","text":"<p>File List &gt; endstone &gt; util &gt; uuid.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;algorithm&gt;\n#include &lt;cstddef&gt;\n#include &lt;cstdint&gt;\n#include &lt;string&gt;\n\nnamespace endstone {\n\nclass UUID {\npublic:\n    std::uint8_t *begin() noexcept\n    {\n        return data;\n    }\n\n    [[nodiscard]] const uint8_t *begin() const noexcept\n    {\n        return data;\n    }\n\n    std::uint8_t *end() noexcept\n    {\n        return data + size();\n    }\n\n    [[nodiscard]] const uint8_t *end() const noexcept\n    {\n        return data + size();\n    }\n\n    [[nodiscard]] static constexpr std::size_t size() noexcept\n    {\n        return 16;\n    }\n\n    [[nodiscard]] bool isNil() const noexcept\n    {\n        return std::all_of(std::begin(data), std::end(data), [](const auto &amp;val) { return val == 0U; });\n    }\n\n    [[nodiscard]] int version() const noexcept\n    {\n        // version is stored in octet 9 which is index 6, since indexes count backwards\n        uint8_t octet9 = data[6];\n        if ((octet9 &amp; 0xF0) == 0x10) {\n            return 1;\n        }\n        if ((octet9 &amp; 0xF0) == 0x20) {\n            return 2;\n        }\n        if ((octet9 &amp; 0xF0) == 0x30) {\n            return 3;\n        }\n        if ((octet9 &amp; 0xF0) == 0x40) {\n            return 4;\n        }\n        if ((octet9 &amp; 0xF0) == 0x50) {\n            return 5;\n        }\n        return -1;\n    }\n\n    void swap(UUID &amp;rhs) noexcept\n    {\n        UUID tmp = *this;\n        *this = rhs;\n        rhs = tmp;\n    }\n\n    [[nodiscard]] std::string str() const\n    {\n        std::string result;\n        result.reserve(36);\n\n        static const char *chars = \"0123456789abcdef\";\n\n        for (size_t i = 0; i &lt; 16; ++i) {\n            result.push_back(chars[(data[i] &gt;&gt; 4) &amp; 0x0F]);\n            result.push_back(chars[data[i] &amp; 0x0F]);\n            if (i == 3 || i == 5 || i == 7 || i == 9) {\n                result.push_back('-');\n            }\n        }\n\n        return result;\n    }\n    std::uint8_t data[16];\n};\nstatic_assert(sizeof(endstone::UUID) == endstone::UUID::size());\n\ninline bool operator==(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return memcmp(lhs.data, rhs.data, sizeof(lhs.data)) == 0;\n}\n\ninline bool operator&lt;(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return memcmp(lhs.data, rhs.data, sizeof(lhs.data)) &lt; 0;\n}\n\ninline bool operator!=(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return !(lhs == rhs);\n}\n\ninline bool operator&gt;(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return rhs &lt; lhs;\n}\ninline bool operator&lt;=(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return !(rhs &lt; lhs);\n}\n\ninline bool operator&gt;=(UUID const &amp;lhs, UUID const &amp;rhs) noexcept\n{\n    return !(lhs &lt; rhs);\n}\n\ninline void swap(UUID &amp;lhs, UUID &amp;rhs) noexcept\n{\n    lhs.swap(rhs);\n}\n\ninline std::size_t hash_value(UUID const &amp;u) noexcept\n{\n    std::size_t seed = 0;\n    for (unsigned char i : u) {\n        seed ^= static_cast&lt;std::size_t&gt;(i) + 0x9e3779b9 + (seed &lt;&lt; 6) + (seed &gt;&gt; 2);\n    }\n\n    return seed;\n}\n\n}  // namespace endstone\n\nnamespace std {\ntemplate &lt;&gt;\nstruct hash&lt;endstone::UUID&gt; {\n    std::size_t operator()(const endstone::UUID &amp;value) const noexcept\n    {\n        return endstone::hash_value(value);\n    }\n};\n}  // namespace std\n</code></pre>"},{"location":"reference/cpp/vector_8h/","title":"File vector.h","text":"<p>FileList &gt; endstone &gt; util &gt; vector.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cmath&gt;</code></li> </ul>"},{"location":"reference/cpp/vector_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/vector_8h/#classes","title":"Classes","text":"Type Name class Vector &lt;typename T&gt;Represents a 3-dimensional vector. <p>The documentation for this class was generated from the following file <code>include/endstone/util/vector.h</code></p>"},{"location":"reference/cpp/vector_8h_source/","title":"File vector.h","text":"<p>File List &gt; endstone &gt; util &gt; vector.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;cmath&gt;\n\nnamespace endstone {\n\ntemplate &lt;typename T&gt;\nclass Vector {\npublic:\n    constexpr Vector() : x_(0), y_(0), z_(0) {}\n    constexpr Vector(T x, T y, T z) : x_(x), y_(y), z_(z) {}\n\n    constexpr T getX() const\n    {\n        return x_;\n    }\n\n    constexpr void setX(T x)\n    {\n        x_ = x;\n    }\n\n    constexpr T getY() const\n    {\n        return y_;\n    }\n\n    constexpr void setY(T y)\n    {\n        y_ = y;\n    }\n\n    constexpr T getZ() const\n    {\n        return z_;\n    }\n\n    constexpr void setZ(T z)\n    {\n        z_ = z;\n    }\n\n    constexpr Vector&lt;T&gt; operator+(const Vector&lt;T&gt; &amp;other) const\n    {\n        return Vector(x_ + other.x_, y_ + other.y_, z_ + other.z_);\n    }\n\n    constexpr Vector&lt;T&gt; operator-(const Vector&lt;T&gt; &amp;other) const\n    {\n        return Vector(x_ - other.x_, y_ - other.y_, z_ - other.z_);\n    }\n\n    constexpr Vector&lt;T&gt; operator*(const Vector&lt;T&gt; &amp;other) const\n    {\n        return Vector(x_ * other.x_, y_ * other.y_, z_ * other.z_);\n    }\n\n    constexpr Vector&lt;T&gt; operator/(const Vector&lt;T&gt; &amp;other) const\n    {\n        return Vector(x_ / other.x_, y_ / other.y_, z_ / other.z_);\n    }\n\n    Vector&lt;T&gt; &amp;operator+=(const Vector&lt;T&gt; &amp;other)\n    {\n        x_ += other.x_;\n        y_ += other.y_;\n        z_ += other.z_;\n        return *this;\n    }\n\n    Vector&lt;T&gt; &amp;operator-=(const Vector&lt;T&gt; &amp;other)\n    {\n        x_ -= other.x_;\n        y_ -= other.y_;\n        z_ -= other.z_;\n        return *this;\n    }\n\n    Vector&lt;T&gt; &amp;operator*=(const Vector&lt;T&gt; &amp;other)\n    {\n        x_ *= other.x_;\n        y_ *= other.y_;\n        z_ *= other.z_;\n        return *this;\n    }\n\n    Vector&lt;T&gt; &amp;operator/=(const Vector&lt;T&gt; &amp;other)\n    {\n        x_ /= other.x_;\n        y_ /= other.y_;\n        z_ /= other.z_;\n        return *this;\n    }\n\n    Vector&lt;T&gt; operator+(T scalar) const\n    {\n        return Vector&lt;T&gt;(x_ + scalar, y_ + scalar, z_ + scalar);\n    }\n\n    Vector&lt;T&gt; operator-(T scalar) const\n    {\n        return Vector&lt;T&gt;(x_ - scalar, y_ - scalar, z_ - scalar);\n    }\n\n    Vector&lt;T&gt; operator*(T scalar) const\n    {\n        return Vector&lt;T&gt;(x_ * scalar, y_ * scalar, z_ * scalar);\n    }\n\n    Vector&lt;T&gt; operator/(T scalar) const\n    {\n        return Vector&lt;T&gt;(x_ / scalar, y_ / scalar, z_ / scalar);\n    }\n\n    friend Vector&lt;T&gt; operator+(T scalar, const Vector&lt;T&gt; &amp;v)\n    {\n        return Vector&lt;T&gt;(scalar + v.x_, scalar + v.y_, scalar + v.z_);\n    }\n\n    friend Vector&lt;T&gt; operator-(T scalar, const Vector&lt;T&gt; &amp;v)\n    {\n        return Vector&lt;T&gt;(scalar - v.x_, scalar - v.y_, scalar - v.z_);\n    }\n\n    friend Vector&lt;T&gt; operator*(T scalar, const Vector&lt;T&gt; &amp;v)\n    {\n        return Vector&lt;T&gt;(scalar * v.x_, scalar * v.y_, scalar * v.z_);\n    }\n\n    friend Vector&lt;T&gt; operator/(T scalar, const Vector&lt;T&gt; &amp;v)\n    {\n        return Vector&lt;T&gt;(scalar / v.x_, scalar / v.y_, scalar / v.z_);\n    }\n\n    [[nodiscard]] constexpr T length() const\n    {\n        return std::sqrt(lengthSquared());\n    }\n\n    [[nodiscard]] constexpr T lengthSquared() const\n    {\n        return x_ * x_ + y_ * y_ + z_ * z_;\n    }\n\n    [[nodiscard]] constexpr T distance(const Vector&lt;T&gt; &amp;other) const\n    {\n        return std::sqrt(distanceSquared(other));\n    }\n\n    [[nodiscard]] constexpr T distanceSquared(const Vector&lt;T&gt; &amp;other) const\n    {\n        return (x_ - other.x_) * (x_ - other.x_) + (y_ - other.y_) * (y_ - other.y_) +\n               (z_ - other.z_) * (z_ - other.z_);\n    }\n\n    [[nodiscard]] std::string toString() const\n    {\n        return std::to_string(x_) + \",\" + std::to_string(y_) + \",\" + std::to_string(z_);\n    }\n\nprivate:\n    T x_;\n    T y_;\n    T z_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/logger_8h/","title":"File logger.h","text":"<p>FileList &gt; endstone &gt; logger.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;fmt/format.h&gt;</code></li> </ul>"},{"location":"reference/cpp/logger_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/logger_8h/#classes","title":"Classes","text":"Type Name class Logger Logger class which can format and output varies levels of logs. <p>The documentation for this class was generated from the following file <code>include/endstone/logger.h</code></p>"},{"location":"reference/cpp/logger_8h_source/","title":"File logger.h","text":"<p>File List &gt; endstone &gt; logger.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include &lt;fmt/format.h&gt;\n\nnamespace endstone {\n\nclass Logger {\npublic:\n    enum Level : std::uint8_t {\n        Trace = 0,\n        Debug = 1,\n        Info = 2,\n        Warning = 3,\n        Error = 4,\n        Critical = 5,\n        Off = 6,\n    };\n\n    Logger() = default;\n\n    virtual ~Logger() = default;\n    virtual void setLevel(Level level) = 0;\n\n    [[nodiscard]] virtual bool isEnabledFor(Level level) const = 0;\n\n    [[nodiscard]] virtual std::string_view getName() const = 0;\n\n    virtual void log(Level level, const std::string &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void log(Level level, const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(level, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    template &lt;typename... Args&gt;\n    void trace(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Level::Trace, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    template &lt;typename... Args&gt;\n    void debug(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Level::Debug, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    template &lt;typename... Args&gt;\n    void info(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Level::Info, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    template &lt;typename... Args&gt;\n    void warning(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Level::Warning, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    template &lt;typename... Args&gt;\n    void error(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Level::Error, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    template &lt;typename... Args&gt;\n    void critical(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        log(Level::Critical, fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/player_8h/","title":"File player.h","text":"<p>FileList &gt; endstone &gt; player.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include \"endstone/actor/actor.h\"</code></li> <li><code>#include \"endstone/game_mode.h\"</code></li> <li><code>#include \"endstone/inventory/player_inventory.h\"</code></li> <li><code>#include \"endstone/util/socket_address.h\"</code></li> <li><code>#include \"endstone/util/uuid.h\"</code></li> </ul>"},{"location":"reference/cpp/player_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/player_8h/#classes","title":"Classes","text":"Type Name class Player Represents a player. <p>The documentation for this class was generated from the following file <code>include/endstone/player.h</code></p>"},{"location":"reference/cpp/player_8h_source/","title":"File player.h","text":"<p>File List &gt; endstone &gt; player.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;chrono&gt;\n\n#include \"endstone/actor/actor.h\"\n#include \"endstone/game_mode.h\"\n#include \"endstone/inventory/player_inventory.h\"\n#include \"endstone/util/socket_address.h\"\n#include \"endstone/util/uuid.h\"\n\nnamespace endstone {\n\nclass Player : public Actor {\npublic:\n    Player() = default;\n    Player(const Player &amp;) = delete;\n    Player &amp;operator=(const Player &amp;) = delete;\n    Player(Player &amp;&amp;) = delete;\n    Player &amp;operator=(Player &amp;&amp;) = delete;\n\n    ~Player() override = default;\n\n    // CommandSender\n    [[nodiscard]] Player *asPlayer() const override\n    {\n        return const_cast&lt;Player *&gt;(this);\n    }\n\n    [[nodiscard]] virtual endstone::UUID getUniqueId() const = 0;\n\n    [[nodiscard]] virtual const SocketAddress &amp;getAddress() const = 0;\n\n    virtual void sendPopup(std::string message) const = 0;\n\n    virtual void sendTip(std::string message) const = 0;\n\n    virtual void kick(std::string message) const = 0;\n\n    virtual void giveExp(int amount) = 0;\n\n    virtual void giveExpLevels(int amount) = 0;\n\n    [[nodiscard]] virtual float getExpProgress() const = 0;\n\n    virtual void setExpProgress(float progress) = 0;\n\n    [[nodiscard]] virtual int getExpLevel() const = 0;\n\n    virtual void setExpLevel(int level) = 0;\n\n    [[nodiscard]] virtual int getTotalExp() const = 0;\n\n    [[nodiscard]] virtual bool getAllowFlight() const = 0;\n\n    virtual void setAllowFlight(bool flight) = 0;\n\n    [[nodiscard]] virtual bool isFlying() const = 0;\n\n    virtual void setFlying(bool value) = 0;\n\n    [[nodiscard]] virtual float getFlySpeed() const = 0;\n\n    virtual void setFlySpeed(float value) const = 0;\n\n    [[nodiscard]] virtual float getWalkSpeed() const = 0;\n\n    virtual void setWalkSpeed(float value) const = 0;\n\n    [[nodiscard]] virtual std::chrono::milliseconds getPing() const = 0;\n\n    virtual void updateCommands() const = 0;\n\n    virtual bool performCommand(std::string command) const = 0;  // NOLINT(*-use-nodiscard)\n\n    [[nodiscard]] virtual GameMode getGameMode() const = 0;\n\n    virtual void setGameMode(GameMode mode) = 0;\n\n    [[nodiscard]] virtual PlayerInventory &amp;getInventory() const = 0;\n\n    [[nodiscard]] virtual std::string getLocale() const = 0;\n\n    [[nodiscard]] virtual std::string getDeviceOS() const = 0;\n\n    [[nodiscard]] virtual endstone::UUID getDeviceId() const = 0;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/server_8h/","title":"File server.h","text":"<p>FileList &gt; endstone &gt; server.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;string_view&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"endstone/level/level.h\"</code></li> <li><code>#include \"endstone/logger.h\"</code></li> <li><code>#include \"endstone/player.h\"</code></li> <li><code>#include \"endstone/util/uuid.h\"</code></li> </ul>"},{"location":"reference/cpp/server_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/server_8h/#classes","title":"Classes","text":"Type Name class Server Represents a server implementation. <p>The documentation for this class was generated from the following file <code>include/endstone/server.h</code></p>"},{"location":"reference/cpp/server_8h_source/","title":"File server.h","text":"<p>File List &gt; endstone &gt; server.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2023, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;string_view&gt;\n#include &lt;vector&gt;\n\n#include \"endstone/level/level.h\"\n#include \"endstone/logger.h\"\n#include \"endstone/player.h\"\n#include \"endstone/util/uuid.h\"\n\nnamespace endstone {\n\nclass CommandSender;\nclass Scheduler;\nclass PluginCommand;\nclass PluginManager;\n\nclass Server {\npublic:\n    Server() = default;\n    Server(const Server &amp;) = delete;\n    Server &amp;operator=(const Server &amp;) = delete;\n\n    virtual ~Server() = default;\n\n    [[nodiscard]] virtual std::string getName() const = 0;\n\n    [[nodiscard]] virtual std::string getVersion() const = 0;\n\n    [[nodiscard]] virtual std::string getMinecraftVersion() const = 0;\n\n    [[nodiscard]] virtual Logger &amp;getLogger() const = 0;\n\n    [[nodiscard]] virtual PluginManager &amp;getPluginManager() const = 0;\n\n    [[nodiscard]] virtual PluginCommand *getPluginCommand(std::string name) const = 0;\n\n    [[nodiscard]] virtual CommandSender &amp;getCommandSender() const = 0;\n\n    [[nodiscard]] virtual bool dispatchCommand(CommandSender &amp;sender, std::string command) const = 0;\n\n    [[nodiscard]] virtual Scheduler &amp;getScheduler() const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Level *&gt; getLevels() const = 0;\n\n    [[nodiscard]] virtual Level *getLevel(std::string name) const = 0;\n\n    [[nodiscard]] virtual std::vector&lt;Player *&gt; getOnlinePlayers() const = 0;\n\n    [[nodiscard]] virtual int getMaxPlayers() const = 0;\n\n    virtual void setMaxPlayers(int max_players) = 0;\n\n    [[nodiscard]] virtual Player *getPlayer(endstone::UUID id) const = 0;\n\n    [[nodiscard]] virtual Player *getPlayer(std::string name) const = 0;\n\n    virtual void broadcast(const std::string &amp;message, const std::string &amp;permission) const = 0;\n\n    virtual void broadcastMessage(const std::string &amp;message) const = 0;\n\n    template &lt;typename... Args&gt;\n    void broadcastMessage(const fmt::format_string&lt;Args...&gt; format, Args &amp;&amp;...args) const\n    {\n        broadcastMessage(fmt::format(format, std::forward&lt;Args&gt;(args)...));\n    }\n\n    [[nodiscard]] virtual bool isPrimaryThread() const = 0;\n\n    inline static const std::string BroadcastChannelAdmin = \"endstone.broadcast.admin\";\n\n    inline static const std::string BroadcastChannelUser = \"endstone.broadcast.user\";\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/translatable_8h/","title":"File translatable.h","text":"<p>FileList &gt; endstone &gt; translatable.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;utility&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"reference/cpp/translatable_8h/#namespaces","title":"Namespaces","text":"Type Name namespace endstone"},{"location":"reference/cpp/translatable_8h/#classes","title":"Classes","text":"Type Name class Translatable Represents an object with a text representation that can be translated by the Minecraft client. <p>The documentation for this class was generated from the following file <code>include/endstone/translatable.h</code></p>"},{"location":"reference/cpp/translatable_8h_source/","title":"File translatable.h","text":"<p>File List &gt; endstone &gt; translatable.h</p> <p>Go to the documentation of this file</p> <pre><code>// Copyright (c) 2024, The Endstone Project. (https://endstone.dev) All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#pragma once\n\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nnamespace endstone {\n\nclass Translatable {\npublic:\n    Translatable(std::string translate, std::vector&lt;std::string&gt; with = {})\n        : translate_(std::move(translate)), with_(std::move(with))\n    {\n    }\n\n    [[nodiscard]] const std::string &amp;getTranslationKey() const\n    {\n        return translate_;\n    }\n\n    [[nodiscard]] const std::vector&lt;std::string&gt; &amp;getParameters() const\n    {\n        return with_;\n    }\n\nprivate:\n    std::string translate_;\n    std::vector&lt;std::string&gt; with_;\n};\n\n}  // namespace endstone\n</code></pre>"},{"location":"reference/cpp/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace endstone </li> <li>namespace std </li> </ul>"},{"location":"reference/cpp/classes/","title":"Class Index","text":""},{"location":"reference/cpp/classes/#a","title":"a","text":"<ul> <li>Actor (endstone)</li> <li>ActorDeathEvent (endstone)</li> <li>ActorEvent (endstone)</li> <li>ActorRemoveEvent (endstone)</li> <li>ActorSpawnEvent (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#b","title":"b","text":"<ul> <li>BroadcastMessageEvent (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#c","title":"c","text":"<ul> <li>ColorFormat (endstone)</li> <li>Command (endstone)</li> <li>CommandExecutor (endstone)</li> <li>CommandMap (endstone)</li> <li>CommandSender (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#d","title":"d","text":"<ul> <li>Dimension (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#e","title":"e","text":"<ul> <li>Event (endstone)</li> <li>EventHandler (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#h","title":"h","text":"<ul> <li>HandlerList (endstone)</li> <li>hash&lt; endstone::UUID &gt; (std)</li> </ul>"},{"location":"reference/cpp/classes/#i","title":"i","text":"<ul> <li>Inventory (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#l","title":"l","text":"<ul> <li>Level (endstone)</li> <li>Location (endstone)</li> <li>Logger (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#p","title":"p","text":"<ul> <li>Permissible (endstone)</li> <li>Permission (endstone)</li> <li>PermissionAttachment (endstone)</li> <li>PermissionAttachmentInfo (endstone)</li> <li>Player (endstone)</li> <li>PlayerChatEvent (endstone)</li> <li>PlayerCommandEvent (endstone)</li> <li>PlayerDeathEvent (endstone)</li> <li>PlayerEvent (endstone)</li> <li>PlayerInventory (endstone)</li> <li>PlayerJoinEvent (endstone)</li> <li>PlayerLoginEvent (endstone)</li> <li>PlayerQuitEvent (endstone)</li> <li>Plugin (endstone)</li> <li>PluginCommand (endstone)</li> <li>PluginDescription (endstone)</li> <li>PluginDisableEvent (endstone)</li> <li>PluginEnableEvent (endstone)</li> <li>PluginLoader (endstone)</li> <li>PluginManager (endstone)</li> <li>Position (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#s","title":"s","text":"<ul> <li>Scheduler (endstone)</li> <li>Server (endstone)</li> <li>ServerCommandEvent (endstone)</li> <li>ServerEvent (endstone)</li> <li>ServerListPingEvent (endstone)</li> <li>ServerLoadEvent (endstone)</li> <li>SocketAddress (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#t","title":"t","text":"<ul> <li>Task (endstone)</li> <li>ThunderChangeEvent (endstone)</li> <li>Translatable (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#u","title":"u","text":"<ul> <li>UUID (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#v","title":"v","text":"<ul> <li>Vector (endstone)</li> </ul>"},{"location":"reference/cpp/classes/#w","title":"w","text":"<ul> <li>WeatherChangeEvent (endstone)</li> <li>WeatherEvent (endstone)</li> </ul>"},{"location":"reference/cpp/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class endstone::Permissible Represents an object that may become a server operator and can be assigned permissions. <ul> <li>class endstone::CommandSender Represents a command sender. <ul> <li>class endstone::Actor Represents a base actor in the level. <ul> <li>class endstone::Player Represents a player. </li> </ul> </li> </ul> </li> </ul> </li> <li>class endstone::Event Represents an event. <ul> <li>class endstone::ActorEvent Represents an Actor-related event. <ul> <li>class endstone::ActorDeathEvent Called when an Actor dies. <ul> <li>class endstone::PlayerDeathEvent Called when a Player dies.</li> </ul> </li> <li>class endstone::ActorRemoveEvent Called when an Actor is removed.</li> <li>class endstone::ActorSpawnEvent Called when an Actor is spawned into a world.</li> </ul> </li> <li>class endstone::PlayerEvent Represents a player related event. <ul> <li>class endstone::PlayerChatEvent Called when a player sends a chat message. </li> <li>class endstone::PlayerCommandEvent Called whenever a player runs a command. </li> <li>class endstone::PlayerDeathEvent Called when a Player dies.</li> <li>class endstone::PlayerJoinEvent Called when a player joins a server. </li> <li>class endstone::PlayerLoginEvent Called when a player attempts to login in. </li> <li>class endstone::PlayerQuitEvent Called when a player leaves a server. </li> </ul> </li> <li>class endstone::ServerEvent Represents an Server-related event. <ul> <li>class endstone::BroadcastMessageEvent Event triggered for server broadcast messages such as fromServer::broadcast .</li> <li>class endstone::PluginDisableEvent Called when a plugin is disabled. </li> <li>class endstone::PluginEnableEvent Called when a plugin is enabled. </li> <li>class endstone::ServerCommandEvent Called when the console runs a command, early in the process. </li> <li>class endstone::ServerListPingEvent Called when a server ping is coming in. </li> <li>class endstone::ServerLoadEvent Called when either the server startup or reload has completed. </li> </ul> </li> <li>class endstone::WeatherEvent Represents a Weather-related event. <ul> <li>class endstone::ThunderChangeEvent Called when the thunder state in a world is changing. </li> <li>class endstone::WeatherChangeEvent Called when the weather (rain) state in a world is changing. </li> </ul> </li> </ul> </li> <li>class endstone::Command Represents a Command , which executes various tasks upon user input. <ul> <li>class endstone::PluginCommand Represents a Command belonging to aPlugin .</li> </ul> </li> <li>class endstone::CommandExecutor Represents a class which contains a single method for executing commands. <ul> <li>class endstone::Plugin Represents a Plugin .</li> </ul> </li> <li>class endstone::CommandMap Represents a command map that manages all commands of the Server .</li> <li>class endstone::Dimension Represents a dimension within a Level .</li> <li>class endstone::EventHandler Represents a registered EventHandler which associates with aPlugin .</li> <li>class endstone::HandlerList A list of event handlers. Should be instantiated on a per event basis. </li> <li>class endstone::Inventory Interface to the various inventories. <ul> <li>class endstone::PlayerInventory Interface to the inventory of a Player , including the four armor slots and any extra slots.</li> </ul> </li> <li>class endstone::Level Represents a level, which may contain actors, chunks and blocks. </li> <li>class endstone::Vector Represents a 3-dimensional vector. </li> <li>class endstone::Logger Logger class which can format and output varies levels of logs.</li> <li>class endstone::Permission Represents a unique permission that may be attached to a Permissible .</li> <li>class endstone::PermissionAttachment Holds information about a permission attachment on a Permissible object.</li> <li>class endstone::PermissionAttachmentInfo Holds information on a permission and which PermissionAttachment provides it.</li> <li>class endstone::PluginDescription Represents the basic information about a plugin that the plugin loader needs to know. </li> <li>class endstone::PluginLoader Represents a plugin loader, which handles direct access to specific types of plugins. </li> <li>class endstone::PluginManager Represents a plugin manager that handles all plugins from the Server .</li> <li>class endstone::Scheduler Represents a scheduler that executes various tasks. </li> <li>class endstone::Server Represents a server implementation. </li> <li>class endstone::SocketAddress Represents an IP Socket Address (hostname + port number). </li> <li>class endstone::Task Represents a task being executed by the scheduler. </li> <li>class endstone::Translatable Represents an object with a text representation that can be translated by the Minecraft client. </li> <li>class endstone::UUID Implementation of Universally Unique Identifier ( UUID )</li> <li>struct endstone::ColorFormat All supported color and format codes. </li> <li>struct std::hash&lt; endstone::UUID &gt; </li> </ul>"},{"location":"reference/cpp/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"reference/cpp/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"reference/cpp/class_members/","title":"Class Members","text":""},{"location":"reference/cpp/class_members/#a","title":"a","text":"<ul> <li>Actor (endstone::Actor)</li> <li>ActorDeathEvent (endstone::ActorDeathEvent)</li> <li>ActorEvent (endstone::ActorEvent)</li> <li>actor_ (endstone::ActorEvent)</li> <li>ActorRemoveEvent (endstone::ActorRemoveEvent)</li> <li>ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>Aqua (endstone::ColorFormat)</li> <li>aliases_ (endstone::Command)</li> <li>allowChangesFrom (endstone::Command)</li> <li>asPluginCommand (endstone::Command, endstone::PluginCommand)</li> <li>asCommandSender (endstone::CommandSender, endstone::Permissible)</li> <li>asConsole (endstone::CommandSender)</li> <li>asPlayer (endstone::CommandSender, endstone::Player)</li> <li>async_ (endstone::Event)</li> <li>addAttachment (endstone::Permissible)</li> <li>addParent (endstone::Permission)</li> <li>attachment_ (endstone::PermissionAttachmentInfo)</li> <li>api_version_ (endstone::PluginDescription)</li> <li>authors_ (endstone::PluginDescription)</li> <li>addPermission (endstone::PluginManager)</li> </ul>"},{"location":"reference/cpp/class_members/#b","title":"b","text":"<ul> <li>BroadcastMessageEvent (endstone::BroadcastMessageEvent)</li> <li>Black (endstone::ColorFormat)</li> <li>Blue (endstone::ColorFormat)</li> <li>Bold (endstone::ColorFormat)</li> <li>bake (endstone::HandlerList)</li> <li>baked_handlers_ (endstone::HandlerList)</li> <li>BroadcastChannelAdmin (endstone::Server)</li> <li>BroadcastChannelUser (endstone::Server)</li> <li>broadcast (endstone::Server)</li> <li>broadcastMessage (endstone::Server)</li> <li>begin (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_members/#c","title":"c","text":"<ul> <li>Command (endstone::Command)</li> <li>command_map_ (endstone::Command)</li> <li>CommandMap (endstone::CommandMap)</li> <li>clearCommands (endstone::CommandMap)</li> <li>CommandSender (endstone::CommandSender)</li> <li>cancelled_ (endstone::Event)</li> <li>callEvent (endstone::EventHandler, endstone::PluginManager)</li> <li>critical (endstone::Logger)</li> <li>children_ (endstone::Permission)</li> <li>command_ (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>commands_ (endstone::PluginDescription)</li> <li>contributors_ (endstone::PluginDescription)</li> <li>clearPlugins (endstone::PluginManager)</li> <li>cancelTask (endstone::Scheduler)</li> <li>cancelTasks (endstone::Scheduler)</li> <li>cancel (endstone::Task)</li> </ul>"},{"location":"reference/cpp/class_members/#d","title":"d","text":"<ul> <li>DarkAqua (endstone::ColorFormat)</li> <li>DarkBlue (endstone::ColorFormat)</li> <li>DarkGray (endstone::ColorFormat)</li> <li>DarkGreen (endstone::ColorFormat)</li> <li>DarkPurple (endstone::ColorFormat)</li> <li>DarkRed (endstone::ColorFormat)</li> <li>description_ (endstone::Command, endstone::Permission, endstone::PluginDescription)</li> <li>debug (endstone::Logger)</li> <li>DefaultPermission (endstone::Permission)</li> <li>default_value_ (endstone::Permission)</li> <li>death_message_ (endstone::PlayerDeathEvent)</li> <li>data_folder_ (endstone::Plugin)</li> <li>default_permission_ (endstone::PluginDescription)</li> <li>depend_ (endstone::PluginDescription)</li> <li>disablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>disablePlugins (endstone::PluginManager)</li> <li>dimension_ (endstone::Position)</li> <li>dispatchCommand (endstone::Server)</li> <li>deserialize (endstone::ServerListPingEvent)</li> <li>data (endstone::UUID)</li> <li>distance (endstone::Vector)</li> <li>distanceSquared (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#e","title":"e","text":"<ul> <li>Escape (endstone::ColorFormat)</li> <li>execute (endstone::Command, endstone::PluginCommand)</li> <li>Event (endstone::Event, endstone::ServerEvent)</li> <li>EventHandler (endstone::EventHandler)</li> <li>event_ (endstone::EventHandler, endstone::HandlerList)</li> <li>executor_ (endstone::EventHandler, endstone::PluginCommand)</li> <li>error (endstone::Logger)</li> <li>enabled_ (endstone::Plugin)</li> <li>enablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>enablePlugins (endstone::PluginManager)</li> <li>end (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_members/#f","title":"f","text":"<ul> <li>full_name_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_members/#g","title":"g","text":"<ul> <li>getDimension (endstone::Actor, endstone::Level, endstone::Position)</li> <li>getLevel (endstone::Actor, endstone::Dimension, endstone::Server, endstone::WeatherEvent)</li> <li>getLocation (endstone::Actor)</li> <li>getRuntimeId (endstone::Actor)</li> <li>getVelocity (endstone::Actor)</li> <li>getEventName (endstone::ActorDeathEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::BroadcastMessageEvent, endstone::Event, endstone::PlayerChatEvent, endstone::PlayerCommandEvent, endstone::PlayerDeathEvent, endstone::PlayerJoinEvent, endstone::PlayerLoginEvent, endstone::PlayerQuitEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>getActor (endstone::ActorEvent)</li> <li>getMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>getRecipients (endstone::BroadcastMessageEvent)</li> <li>Gold (endstone::ColorFormat)</li> <li>Gray (endstone::ColorFormat)</li> <li>Green (endstone::ColorFormat)</li> <li>getAliases (endstone::Command)</li> <li>getDescription (endstone::Command, endstone::Permission, endstone::Plugin, endstone::PluginDescription)</li> <li>getName (endstone::Command, endstone::CommandSender, endstone::Dimension, endstone::Level, endstone::Logger, endstone::Permission, endstone::Plugin, endstone::PluginDescription, endstone::Server)</li> <li>getPermissions (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription, endstone::PluginManager)</li> <li>getUsages (endstone::Command)</li> <li>getCommand (endstone::CommandMap, endstone::PlayerCommandEvent, endstone::Plugin, endstone::ServerCommandEvent)</li> <li>getServer (endstone::CommandSender, endstone::Plugin, endstone::PluginLoader)</li> <li>getType (endstone::Dimension, endstone::ServerLoadEvent)</li> <li>getEventType (endstone::EventHandler)</li> <li>getPlugin (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginCommand, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::PluginManager)</li> <li>getPriority (endstone::EventHandler)</li> <li>getHandlers (endstone::HandlerList)</li> <li>getMaxStackSize (endstone::Inventory)</li> <li>getSize (endstone::Inventory)</li> <li>getActors (endstone::Level)</li> <li>getDimensions (endstone::Level)</li> <li>getTime (endstone::Level)</li> <li>getPitch (endstone::Location)</li> <li>getYaw (endstone::Location)</li> <li>getEffectivePermissions (endstone::Permissible)</li> <li>getChildren (endstone::Permission)</li> <li>getDefault (endstone::Permission)</li> <li>getPermissibles (endstone::Permission)</li> <li>getPermissible (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>getRemovalCallback (endstone::PermissionAttachment)</li> <li>getAttachment (endstone::PermissionAttachmentInfo)</li> <li>getPermission (endstone::PermissionAttachmentInfo, endstone::PluginManager)</li> <li>getValue (endstone::PermissionAttachmentInfo)</li> <li>getAddress (endstone::Player)</li> <li>getAllowFlight (endstone::Player)</li> <li>getDeviceId (endstone::Player)</li> <li>getDeviceOS (endstone::Player)</li> <li>getExpLevel (endstone::Player)</li> <li>getExpProgress (endstone::Player)</li> <li>getFlySpeed (endstone::Player)</li> <li>getGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>getInventory (endstone::Player)</li> <li>getLocale (endstone::Player)</li> <li>getPing (endstone::Player)</li> <li>getTotalExp (endstone::Player)</li> <li>getUniqueId (endstone::Player)</li> <li>getWalkSpeed (endstone::Player)</li> <li>giveExp (endstone::Player)</li> <li>giveExpLevels (endstone::Player)</li> <li>getDeathMessage (endstone::PlayerDeathEvent)</li> <li>getPlayer (endstone::PlayerEvent, endstone::Server)</li> <li>getKickMessage (endstone::PlayerLoginEvent)</li> <li>getDataFolder (endstone::Plugin)</li> <li>getLogger (endstone::Plugin, endstone::Server)</li> <li>getPluginLoader (endstone::Plugin)</li> <li>getExecutor (endstone::PluginCommand)</li> <li>getAPIVersion (endstone::PluginDescription)</li> <li>getAuthors (endstone::PluginDescription)</li> <li>getCommands (endstone::PluginDescription)</li> <li>getContributors (endstone::PluginDescription)</li> <li>getDefaultPermission (endstone::PluginDescription)</li> <li>getDepend (endstone::PluginDescription)</li> <li>getFullName (endstone::PluginDescription)</li> <li>getLoad (endstone::PluginDescription)</li> <li>getLoadBefore (endstone::PluginDescription)</li> <li>getPrefix (endstone::PluginDescription)</li> <li>getProvides (endstone::PluginDescription)</li> <li>getSoftDepend (endstone::PluginDescription)</li> <li>getVersion (endstone::PluginDescription, endstone::Server)</li> <li>getWebsite (endstone::PluginDescription)</li> <li>getDefaultPermSubscriptions (endstone::PluginManager)</li> <li>getDefaultPermissions (endstone::PluginManager)</li> <li>getPermissionSubscriptions (endstone::PluginManager)</li> <li>getPlugins (endstone::PluginManager)</li> <li>getPendingTasks (endstone::Scheduler)</li> <li>getCommandSender (endstone::Server)</li> <li>getLevels (endstone::Server)</li> <li>getMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>getMinecraftVersion (endstone::Server)</li> <li>getOnlinePlayers (endstone::Server)</li> <li>getPluginCommand (endstone::Server)</li> <li>getPluginManager (endstone::Server)</li> <li>getScheduler (endstone::Server)</li> <li>getSender (endstone::ServerCommandEvent)</li> <li>game_mode_ (endstone::ServerListPingEvent)</li> <li>getLevelName (endstone::ServerListPingEvent)</li> <li>getLocalPort (endstone::ServerListPingEvent)</li> <li>getLocalPortV6 (endstone::ServerListPingEvent)</li> <li>getMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>getMotd (endstone::ServerListPingEvent)</li> <li>getNetworkProtocolVersion (endstone::ServerListPingEvent)</li> <li>getNumPlayers (endstone::ServerListPingEvent)</li> <li>getRemoteHost (endstone::ServerListPingEvent)</li> <li>getRemotePort (endstone::ServerListPingEvent)</li> <li>getServerGuid (endstone::ServerListPingEvent)</li> <li>getHostname (endstone::SocketAddress)</li> <li>getPort (endstone::SocketAddress)</li> <li>getOwner (endstone::Task)</li> <li>getTaskId (endstone::Task)</li> <li>getParameters (endstone::Translatable)</li> <li>getTranslationKey (endstone::Translatable)</li> <li>getX (endstone::Vector)</li> <li>getY (endstone::Vector)</li> <li>getZ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#h","title":"h","text":"<ul> <li>HandlerList (endstone::HandlerList)</li> <li>handlers_ (endstone::HandlerList)</li> <li>hasPermission (endstone::Permissible)</li> <li>hostname_ (endstone::SocketAddress)</li> </ul>"},{"location":"reference/cpp/class_members/#i","title":"i","text":"<ul> <li>isInLava (endstone::Actor)</li> <li>isInWater (endstone::Actor)</li> <li>isOnGround (endstone::Actor)</li> <li>isCancellable (endstone::ActorDeathEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::BroadcastMessageEvent, endstone::Event, endstone::PlayerChatEvent, endstone::PlayerCommandEvent, endstone::PlayerDeathEvent, endstone::PlayerJoinEvent, endstone::PlayerLoginEvent, endstone::PlayerQuitEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>Italic (endstone::ColorFormat)</li> <li>isRegistered (endstone::Command)</li> <li>isAsynchronous (endstone::Event)</li> <li>isCancelled (endstone::Event, endstone::Task)</li> <li>ignore_cancelled_ (endstone::EventHandler)</li> <li>isIgnoreCancelled (endstone::EventHandler)</li> <li>info (endstone::Logger)</li> <li>isEnabledFor (endstone::Logger)</li> <li>isOp (endstone::Permissible)</li> <li>isPermissionSet (endstone::Permissible)</li> <li>init (endstone::Permission)</li> <li>isFlying (endstone::Player)</li> <li>isEnabled (endstone::Plugin)</li> <li>initPlugin (endstone::PluginLoader)</li> <li>isPluginEnabled (endstone::PluginManager)</li> <li>isQueued (endstone::Scheduler)</li> <li>isRunning (endstone::Scheduler)</li> <li>isPrimaryThread (endstone::Server)</li> <li>isSync (endstone::Task)</li> <li>isNil (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_members/#k","title":"k","text":"<ul> <li>kick (endstone::Player)</li> </ul>"},{"location":"reference/cpp/class_members/#l","title":"l","text":"<ul> <li>LightPurple (endstone::ColorFormat)</li> <li>Location (endstone::Location)</li> <li>Level (endstone::Logger)</li> <li>Logger (endstone::Logger)</li> <li>log (endstone::Logger)</li> <li>loader_ (endstone::Plugin)</li> <li>logger_ (endstone::Plugin)</li> <li>load_ (endstone::PluginDescription)</li> <li>load_before_ (endstone::PluginDescription)</li> <li>loadPlugins (endstone::PluginLoader, endstone::PluginManager)</li> <li>level_name_ (endstone::ServerListPingEvent)</li> <li>local_port_ (endstone::ServerListPingEvent)</li> <li>local_port_v6_ (endstone::ServerListPingEvent)</li> <li>LoadType (endstone::ServerLoadEvent)</li> <li>length (endstone::Vector)</li> <li>lengthSquared (endstone::Vector)</li> <li>level_ (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#m","title":"m","text":"<ul> <li>message_ (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::PlayerLoginEvent)</li> <li>MaterialAmethyst (endstone::ColorFormat)</li> <li>MaterialCopper (endstone::ColorFormat)</li> <li>MaterialDiamond (endstone::ColorFormat)</li> <li>MaterialEmerald (endstone::ColorFormat)</li> <li>MaterialGold (endstone::ColorFormat)</li> <li>MaterialIron (endstone::ColorFormat)</li> <li>MaterialLapis (endstone::ColorFormat)</li> <li>MaterialNetherite (endstone::ColorFormat)</li> <li>MaterialQuartz (endstone::ColorFormat)</li> <li>MaterialRedstone (endstone::ColorFormat)</li> <li>MinecoinGold (endstone::ColorFormat)</li> <li>mtx_ (endstone::HandlerList)</li> <li>max_players_ (endstone::ServerListPingEvent)</li> <li>minecraft_version_network_ (endstone::ServerListPingEvent)</li> <li>motd_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#n","title":"n","text":"<ul> <li>NAME (endstone::ActorDeathEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::PlayerCommandEvent, endstone::PlayerDeathEvent, endstone::PlayerJoinEvent, endstone::PlayerLoginEvent, endstone::PlayerQuitEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>name_ (endstone::Command, endstone::Permission, endstone::PluginDescription)</li> <li>network_protocol_version_ (endstone::ServerListPingEvent)</li> <li>num_players_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#o","title":"o","text":"<ul> <li>operator= (endstone::Actor, endstone::CommandMap, endstone::Event, endstone::Player, endstone::Plugin, endstone::PluginLoader, endstone::PluginManager, endstone::Server)</li> <li>Obfuscated (endstone::ColorFormat)</li> <li>onCommand (endstone::CommandExecutor)</li> <li>onDisable (endstone::Plugin)</li> <li>onEnable (endstone::Plugin)</li> <li>onLoad (endstone::Plugin)</li> <li>owner_ (endstone::PluginCommand)</li> <li>operator* (endstone::Vector)</li> <li>operator*= (endstone::Vector)</li> <li>operator+ (endstone::Vector)</li> <li>operator+= (endstone::Vector)</li> <li>operator- (endstone::Vector)</li> <li>operator-= (endstone::Vector)</li> <li>operator/ (endstone::Vector)</li> <li>operator/= (endstone::Vector)</li> <li>operator() (std::hash&lt; endstone::UUID &gt;)</li> </ul>"},{"location":"reference/cpp/class_members/#p","title":"p","text":"<ul> <li>permissions_ (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription)</li> <li>plugin_ (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginDisableEvent, endstone::PluginEnableEvent)</li> <li>priority_ (endstone::EventHandler)</li> <li>pitch_ (endstone::Location)</li> <li>Permission (endstone::Permission)</li> <li>plugin_manager_ (endstone::Permission)</li> <li>PermissionAttachment (endstone::PermissionAttachment)</li> <li>permissible_ (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>PermissionAttachmentInfo (endstone::PermissionAttachmentInfo)</li> <li>permission_ (endstone::PermissionAttachmentInfo)</li> <li>Player (endstone::Player)</li> <li>performCommand (endstone::Player)</li> <li>PlayerChatEvent (endstone::PlayerChatEvent)</li> <li>PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>PlayerDeathEvent (endstone::PlayerDeathEvent)</li> <li>PlayerEvent (endstone::PlayerEvent)</li> <li>player_ (endstone::PlayerEvent)</li> <li>PlayerJoinEvent (endstone::PlayerJoinEvent)</li> <li>PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>PlayerQuitEvent (endstone::PlayerQuitEvent)</li> <li>Plugin (endstone::Plugin)</li> <li>PluginCommand (endstone::PluginCommand)</li> <li>PluginDescription (endstone::PluginDescription)</li> <li>prefix_ (endstone::PluginDescription)</li> <li>provides_ (endstone::PluginDescription)</li> <li>PluginDisableEvent (endstone::PluginDisableEvent)</li> <li>PluginEnableEvent (endstone::PluginEnableEvent)</li> <li>PluginLoader (endstone::PluginLoader)</li> <li>PluginManager (endstone::PluginManager)</li> <li>Position (endstone::Position)</li> <li>ping_response_ (endstone::ServerListPingEvent)</li> <li>port_ (endstone::SocketAddress)</li> </ul>"},{"location":"reference/cpp/class_members/#r","title":"r","text":"<ul> <li>recipients_ (endstone::BroadcastMessageEvent)</li> <li>Red (endstone::ColorFormat)</li> <li>Reset (endstone::ColorFormat)</li> <li>registerTo (endstone::Command)</li> <li>registerCommand (endstone::CommandMap)</li> <li>registerHandler (endstone::HandlerList)</li> <li>recalculatePermissions (endstone::Permissible)</li> <li>removeAttachment (endstone::Permissible)</li> <li>recalculatePermissibles (endstone::Permission)</li> <li>remove (endstone::PermissionAttachment)</li> <li>removed_ (endstone::PermissionAttachment)</li> <li>registerEvent (endstone::Plugin, endstone::PluginManager)</li> <li>recalculatePermissionDefaults (endstone::PluginManager)</li> <li>registerLoader (endstone::PluginManager)</li> <li>removePermission (endstone::PluginManager)</li> <li>runTask (endstone::Scheduler)</li> <li>runTaskLater (endstone::Scheduler)</li> <li>runTaskTimer (endstone::Scheduler)</li> <li>remote_host_ (endstone::ServerListPingEvent)</li> <li>remote_port_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#s","title":"s","text":"<ul> <li>setMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>setAliases (endstone::Command)</li> <li>setDescription (endstone::Command, endstone::Permission)</li> <li>setName (endstone::Command)</li> <li>setPermissions (endstone::Command)</li> <li>setUsages (endstone::Command)</li> <li>sendErrorMessage (endstone::CommandSender)</li> <li>sendMessage (endstone::CommandSender)</li> <li>setCancelled (endstone::Event)</li> <li>setTime (endstone::Level)</li> <li>setPitch (endstone::Location)</li> <li>setYaw (endstone::Location)</li> <li>setLevel (endstone::Logger)</li> <li>setOp (endstone::Permissible)</li> <li>setDefault (endstone::Permission)</li> <li>setPermission (endstone::PermissionAttachment)</li> <li>setRemovalCallback (endstone::PermissionAttachment)</li> <li>sendPopup (endstone::Player)</li> <li>sendTip (endstone::Player)</li> <li>setAllowFlight (endstone::Player)</li> <li>setExpLevel (endstone::Player)</li> <li>setExpProgress (endstone::Player)</li> <li>setFlySpeed (endstone::Player)</li> <li>setFlying (endstone::Player)</li> <li>setGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>setWalkSpeed (endstone::Player)</li> <li>setCommand (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>setDeathMessage (endstone::PlayerDeathEvent)</li> <li>setKickMessage (endstone::PlayerLoginEvent)</li> <li>server_ (endstone::Plugin, endstone::PluginLoader)</li> <li>setEnabled (endstone::Plugin)</li> <li>setExecutor (endstone::PluginCommand)</li> <li>soft_depend_ (endstone::PluginDescription)</li> <li>subscribeToDefaultPerms (endstone::PluginManager)</li> <li>subscribeToPermission (endstone::PluginManager)</li> <li>setDimension (endstone::Position)</li> <li>Server (endstone::Server)</li> <li>setMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>ServerCommandEvent (endstone::ServerCommandEvent)</li> <li>sender_ (endstone::ServerCommandEvent)</li> <li>ServerListPingEvent (endstone::ServerListPingEvent)</li> <li>serialize (endstone::ServerListPingEvent)</li> <li>server_guid_ (endstone::ServerListPingEvent)</li> <li>setLevelName (endstone::ServerListPingEvent)</li> <li>setMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>setMotd (endstone::ServerListPingEvent)</li> <li>setNumPlayers (endstone::ServerListPingEvent)</li> <li>ServerLoadEvent (endstone::ServerLoadEvent)</li> <li>SocketAddress (endstone::SocketAddress)</li> <li>size (endstone::UUID)</li> <li>str (endstone::UUID)</li> <li>swap (endstone::UUID)</li> <li>setX (endstone::Vector)</li> <li>setY (endstone::Vector)</li> <li>setZ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#t","title":"t","text":"<ul> <li>testPermission (endstone::Command)</li> <li>testPermissionSilently (endstone::Command)</li> <li>Type (endstone::Dimension)</li> <li>trace (endstone::Logger)</li> <li>type_ (endstone::ServerLoadEvent)</li> <li>ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>toThunderState (endstone::ThunderChangeEvent)</li> <li>to_ (endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>Translatable (endstone::Translatable)</li> <li>translate_ (endstone::Translatable)</li> <li>toString (endstone::Vector)</li> <li>toWeatherState (endstone::WeatherChangeEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#u","title":"u","text":"<ul> <li>unregisterFrom (endstone::Command)</li> <li>usages_ (endstone::Command)</li> <li>unregister (endstone::HandlerList)</li> <li>unsetPermission (endstone::PermissionAttachment)</li> <li>updateCommands (endstone::Player)</li> <li>unsubscribeFromDefaultPerms (endstone::PluginManager)</li> <li>unsubscribeFromPermission (endstone::PluginManager)</li> </ul>"},{"location":"reference/cpp/class_members/#v","title":"v","text":"<ul> <li>valid_ (endstone::HandlerList)</li> <li>value_ (endstone::PermissionAttachmentInfo)</li> <li>version_ (endstone::PluginDescription)</li> <li>version (endstone::UUID)</li> <li>Vector (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#w","title":"w","text":"<ul> <li>White (endstone::ColorFormat)</li> <li>warning (endstone::Logger)</li> <li>website_ (endstone::PluginDescription)</li> <li>with_ (endstone::Translatable)</li> <li>WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_members/#x","title":"x","text":"<ul> <li>x_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#y","title":"y","text":"<ul> <li>Yellow (endstone::ColorFormat)</li> <li>yaw_ (endstone::Location)</li> <li>y_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#z","title":"z","text":"<ul> <li>z_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_members/#_1","title":"~","text":"<ul> <li>~Actor (endstone::Actor)</li> <li>~ActorDeathEvent (endstone::ActorDeathEvent)</li> <li>~ActorEvent (endstone::ActorEvent)</li> <li>~ActorRemoveEvent (endstone::ActorRemoveEvent)</li> <li>~ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>~Command (endstone::Command)</li> <li>~CommandExecutor (endstone::CommandExecutor)</li> <li>~CommandMap (endstone::CommandMap)</li> <li>~CommandSender (endstone::CommandSender)</li> <li>~Dimension (endstone::Dimension)</li> <li>~Event (endstone::Event)</li> <li>~Inventory (endstone::Inventory)</li> <li>~Level (endstone::Level)</li> <li>~Logger (endstone::Logger)</li> <li>~Permissible (endstone::Permissible)</li> <li>~Player (endstone::Player)</li> <li>~PlayerChatEvent (endstone::PlayerChatEvent)</li> <li>~PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>~PlayerDeathEvent (endstone::PlayerDeathEvent)</li> <li>~PlayerEvent (endstone::PlayerEvent)</li> <li>~PlayerJoinEvent (endstone::PlayerJoinEvent)</li> <li>~PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>~PlayerQuitEvent (endstone::PlayerQuitEvent)</li> <li>~Plugin (endstone::Plugin)</li> <li>~PluginLoader (endstone::PluginLoader)</li> <li>~PluginManager (endstone::PluginManager)</li> <li>~Scheduler (endstone::Scheduler)</li> <li>~Server (endstone::Server)</li> <li>~Task (endstone::Task)</li> <li>~ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>~WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>~WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/","title":"Class Member Functions","text":""},{"location":"reference/cpp/class_member_functions/#a","title":"a","text":"<ul> <li>Actor (endstone::Actor)</li> <li>ActorDeathEvent (endstone::ActorDeathEvent)</li> <li>ActorEvent (endstone::ActorEvent)</li> <li>ActorRemoveEvent (endstone::ActorRemoveEvent)</li> <li>ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>allowChangesFrom (endstone::Command)</li> <li>asPluginCommand (endstone::Command, endstone::PluginCommand)</li> <li>asCommandSender (endstone::CommandSender, endstone::Permissible)</li> <li>asConsole (endstone::CommandSender)</li> <li>asPlayer (endstone::CommandSender, endstone::Player)</li> <li>addAttachment (endstone::Permissible)</li> <li>addParent (endstone::Permission)</li> <li>addPermission (endstone::PluginManager)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#b","title":"b","text":"<ul> <li>BroadcastMessageEvent (endstone::BroadcastMessageEvent)</li> <li>bake (endstone::HandlerList)</li> <li>broadcast (endstone::Server)</li> <li>broadcastMessage (endstone::Server)</li> <li>begin (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#c","title":"c","text":"<ul> <li>Command (endstone::Command)</li> <li>CommandMap (endstone::CommandMap)</li> <li>clearCommands (endstone::CommandMap)</li> <li>CommandSender (endstone::CommandSender)</li> <li>callEvent (endstone::EventHandler, endstone::PluginManager)</li> <li>critical (endstone::Logger)</li> <li>clearPlugins (endstone::PluginManager)</li> <li>cancelTask (endstone::Scheduler)</li> <li>cancelTasks (endstone::Scheduler)</li> <li>cancel (endstone::Task)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#d","title":"d","text":"<ul> <li>debug (endstone::Logger)</li> <li>disablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>disablePlugins (endstone::PluginManager)</li> <li>dispatchCommand (endstone::Server)</li> <li>deserialize (endstone::ServerListPingEvent)</li> <li>distance (endstone::Vector)</li> <li>distanceSquared (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#e","title":"e","text":"<ul> <li>execute (endstone::Command, endstone::PluginCommand)</li> <li>Event (endstone::Event, endstone::ServerEvent)</li> <li>EventHandler (endstone::EventHandler)</li> <li>error (endstone::Logger)</li> <li>enablePlugin (endstone::PluginLoader, endstone::PluginManager)</li> <li>enablePlugins (endstone::PluginManager)</li> <li>end (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#g","title":"g","text":"<ul> <li>getDimension (endstone::Actor, endstone::Level, endstone::Position)</li> <li>getLevel (endstone::Actor, endstone::Dimension, endstone::Server, endstone::WeatherEvent)</li> <li>getLocation (endstone::Actor)</li> <li>getRuntimeId (endstone::Actor)</li> <li>getVelocity (endstone::Actor)</li> <li>getEventName (endstone::ActorDeathEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::BroadcastMessageEvent, endstone::Event, endstone::PlayerChatEvent, endstone::PlayerCommandEvent, endstone::PlayerDeathEvent, endstone::PlayerJoinEvent, endstone::PlayerLoginEvent, endstone::PlayerQuitEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>getActor (endstone::ActorEvent)</li> <li>getMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>getRecipients (endstone::BroadcastMessageEvent)</li> <li>getAliases (endstone::Command)</li> <li>getDescription (endstone::Command, endstone::Permission, endstone::Plugin, endstone::PluginDescription)</li> <li>getName (endstone::Command, endstone::CommandSender, endstone::Dimension, endstone::Level, endstone::Logger, endstone::Permission, endstone::Plugin, endstone::PluginDescription, endstone::Server)</li> <li>getPermissions (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription, endstone::PluginManager)</li> <li>getUsages (endstone::Command)</li> <li>getCommand (endstone::CommandMap, endstone::PlayerCommandEvent, endstone::Plugin, endstone::ServerCommandEvent)</li> <li>getServer (endstone::CommandSender, endstone::Plugin, endstone::PluginLoader)</li> <li>getType (endstone::Dimension, endstone::ServerLoadEvent)</li> <li>getEventType (endstone::EventHandler)</li> <li>getPlugin (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginCommand, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::PluginManager)</li> <li>getPriority (endstone::EventHandler)</li> <li>getHandlers (endstone::HandlerList)</li> <li>getMaxStackSize (endstone::Inventory)</li> <li>getSize (endstone::Inventory)</li> <li>getActors (endstone::Level)</li> <li>getDimensions (endstone::Level)</li> <li>getTime (endstone::Level)</li> <li>getPitch (endstone::Location)</li> <li>getYaw (endstone::Location)</li> <li>getEffectivePermissions (endstone::Permissible)</li> <li>getChildren (endstone::Permission)</li> <li>getDefault (endstone::Permission)</li> <li>getPermissibles (endstone::Permission)</li> <li>getPermissible (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>getRemovalCallback (endstone::PermissionAttachment)</li> <li>getAttachment (endstone::PermissionAttachmentInfo)</li> <li>getPermission (endstone::PermissionAttachmentInfo, endstone::PluginManager)</li> <li>getValue (endstone::PermissionAttachmentInfo)</li> <li>getAddress (endstone::Player)</li> <li>getAllowFlight (endstone::Player)</li> <li>getDeviceId (endstone::Player)</li> <li>getDeviceOS (endstone::Player)</li> <li>getExpLevel (endstone::Player)</li> <li>getExpProgress (endstone::Player)</li> <li>getFlySpeed (endstone::Player)</li> <li>getGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>getInventory (endstone::Player)</li> <li>getLocale (endstone::Player)</li> <li>getPing (endstone::Player)</li> <li>getTotalExp (endstone::Player)</li> <li>getUniqueId (endstone::Player)</li> <li>getWalkSpeed (endstone::Player)</li> <li>giveExp (endstone::Player)</li> <li>giveExpLevels (endstone::Player)</li> <li>getDeathMessage (endstone::PlayerDeathEvent)</li> <li>getPlayer (endstone::PlayerEvent, endstone::Server)</li> <li>getKickMessage (endstone::PlayerLoginEvent)</li> <li>getDataFolder (endstone::Plugin)</li> <li>getLogger (endstone::Plugin, endstone::Server)</li> <li>getPluginLoader (endstone::Plugin)</li> <li>getExecutor (endstone::PluginCommand)</li> <li>getAPIVersion (endstone::PluginDescription)</li> <li>getAuthors (endstone::PluginDescription)</li> <li>getCommands (endstone::PluginDescription)</li> <li>getContributors (endstone::PluginDescription)</li> <li>getDefaultPermission (endstone::PluginDescription)</li> <li>getDepend (endstone::PluginDescription)</li> <li>getFullName (endstone::PluginDescription)</li> <li>getLoad (endstone::PluginDescription)</li> <li>getLoadBefore (endstone::PluginDescription)</li> <li>getPrefix (endstone::PluginDescription)</li> <li>getProvides (endstone::PluginDescription)</li> <li>getSoftDepend (endstone::PluginDescription)</li> <li>getVersion (endstone::PluginDescription, endstone::Server)</li> <li>getWebsite (endstone::PluginDescription)</li> <li>getDefaultPermSubscriptions (endstone::PluginManager)</li> <li>getDefaultPermissions (endstone::PluginManager)</li> <li>getPermissionSubscriptions (endstone::PluginManager)</li> <li>getPlugins (endstone::PluginManager)</li> <li>getPendingTasks (endstone::Scheduler)</li> <li>getCommandSender (endstone::Server)</li> <li>getLevels (endstone::Server)</li> <li>getMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>getMinecraftVersion (endstone::Server)</li> <li>getOnlinePlayers (endstone::Server)</li> <li>getPluginCommand (endstone::Server)</li> <li>getPluginManager (endstone::Server)</li> <li>getScheduler (endstone::Server)</li> <li>getSender (endstone::ServerCommandEvent)</li> <li>getLevelName (endstone::ServerListPingEvent)</li> <li>getLocalPort (endstone::ServerListPingEvent)</li> <li>getLocalPortV6 (endstone::ServerListPingEvent)</li> <li>getMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>getMotd (endstone::ServerListPingEvent)</li> <li>getNetworkProtocolVersion (endstone::ServerListPingEvent)</li> <li>getNumPlayers (endstone::ServerListPingEvent)</li> <li>getRemoteHost (endstone::ServerListPingEvent)</li> <li>getRemotePort (endstone::ServerListPingEvent)</li> <li>getServerGuid (endstone::ServerListPingEvent)</li> <li>getHostname (endstone::SocketAddress)</li> <li>getPort (endstone::SocketAddress)</li> <li>getOwner (endstone::Task)</li> <li>getTaskId (endstone::Task)</li> <li>getParameters (endstone::Translatable)</li> <li>getTranslationKey (endstone::Translatable)</li> <li>getX (endstone::Vector)</li> <li>getY (endstone::Vector)</li> <li>getZ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#h","title":"h","text":"<ul> <li>HandlerList (endstone::HandlerList)</li> <li>hasPermission (endstone::Permissible)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#i","title":"i","text":"<ul> <li>isInLava (endstone::Actor)</li> <li>isInWater (endstone::Actor)</li> <li>isOnGround (endstone::Actor)</li> <li>isCancellable (endstone::ActorDeathEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::BroadcastMessageEvent, endstone::Event, endstone::PlayerChatEvent, endstone::PlayerCommandEvent, endstone::PlayerDeathEvent, endstone::PlayerJoinEvent, endstone::PlayerLoginEvent, endstone::PlayerQuitEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>isRegistered (endstone::Command)</li> <li>isAsynchronous (endstone::Event)</li> <li>isCancelled (endstone::Event, endstone::Task)</li> <li>isIgnoreCancelled (endstone::EventHandler)</li> <li>info (endstone::Logger)</li> <li>isEnabledFor (endstone::Logger)</li> <li>isOp (endstone::Permissible)</li> <li>isPermissionSet (endstone::Permissible)</li> <li>init (endstone::Permission)</li> <li>isFlying (endstone::Player)</li> <li>isEnabled (endstone::Plugin)</li> <li>initPlugin (endstone::PluginLoader)</li> <li>isPluginEnabled (endstone::PluginManager)</li> <li>isQueued (endstone::Scheduler)</li> <li>isRunning (endstone::Scheduler)</li> <li>isPrimaryThread (endstone::Server)</li> <li>isSync (endstone::Task)</li> <li>isNil (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#k","title":"k","text":"<ul> <li>kick (endstone::Player)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#l","title":"l","text":"<ul> <li>Location (endstone::Location)</li> <li>Logger (endstone::Logger)</li> <li>log (endstone::Logger)</li> <li>loadPlugins (endstone::PluginLoader, endstone::PluginManager)</li> <li>length (endstone::Vector)</li> <li>lengthSquared (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#o","title":"o","text":"<ul> <li>operator= (endstone::Actor, endstone::CommandMap, endstone::Event, endstone::Player, endstone::Plugin, endstone::PluginLoader, endstone::PluginManager, endstone::Server)</li> <li>onCommand (endstone::CommandExecutor)</li> <li>onDisable (endstone::Plugin)</li> <li>onEnable (endstone::Plugin)</li> <li>onLoad (endstone::Plugin)</li> <li>operator* (endstone::Vector)</li> <li>operator*= (endstone::Vector)</li> <li>operator+ (endstone::Vector)</li> <li>operator+= (endstone::Vector)</li> <li>operator- (endstone::Vector)</li> <li>operator-= (endstone::Vector)</li> <li>operator/ (endstone::Vector)</li> <li>operator/= (endstone::Vector)</li> <li>operator() (std::hash&lt; endstone::UUID &gt;)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#p","title":"p","text":"<ul> <li>Permission (endstone::Permission)</li> <li>PermissionAttachment (endstone::PermissionAttachment)</li> <li>PermissionAttachmentInfo (endstone::PermissionAttachmentInfo)</li> <li>Player (endstone::Player)</li> <li>performCommand (endstone::Player)</li> <li>PlayerChatEvent (endstone::PlayerChatEvent)</li> <li>PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>PlayerDeathEvent (endstone::PlayerDeathEvent)</li> <li>PlayerEvent (endstone::PlayerEvent)</li> <li>PlayerJoinEvent (endstone::PlayerJoinEvent)</li> <li>PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>PlayerQuitEvent (endstone::PlayerQuitEvent)</li> <li>Plugin (endstone::Plugin)</li> <li>PluginCommand (endstone::PluginCommand)</li> <li>PluginDescription (endstone::PluginDescription)</li> <li>PluginDisableEvent (endstone::PluginDisableEvent)</li> <li>PluginEnableEvent (endstone::PluginEnableEvent)</li> <li>PluginLoader (endstone::PluginLoader)</li> <li>PluginManager (endstone::PluginManager)</li> <li>Position (endstone::Position)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#r","title":"r","text":"<ul> <li>registerTo (endstone::Command)</li> <li>registerCommand (endstone::CommandMap)</li> <li>registerHandler (endstone::HandlerList)</li> <li>recalculatePermissions (endstone::Permissible)</li> <li>removeAttachment (endstone::Permissible)</li> <li>recalculatePermissibles (endstone::Permission)</li> <li>remove (endstone::PermissionAttachment)</li> <li>registerEvent (endstone::Plugin, endstone::PluginManager)</li> <li>recalculatePermissionDefaults (endstone::PluginManager)</li> <li>registerLoader (endstone::PluginManager)</li> <li>removePermission (endstone::PluginManager)</li> <li>runTask (endstone::Scheduler)</li> <li>runTaskLater (endstone::Scheduler)</li> <li>runTaskTimer (endstone::Scheduler)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#s","title":"s","text":"<ul> <li>setMessage (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent)</li> <li>setAliases (endstone::Command)</li> <li>setDescription (endstone::Command, endstone::Permission)</li> <li>setName (endstone::Command)</li> <li>setPermissions (endstone::Command)</li> <li>setUsages (endstone::Command)</li> <li>sendErrorMessage (endstone::CommandSender)</li> <li>sendMessage (endstone::CommandSender)</li> <li>setCancelled (endstone::Event)</li> <li>setTime (endstone::Level)</li> <li>setPitch (endstone::Location)</li> <li>setYaw (endstone::Location)</li> <li>setLevel (endstone::Logger)</li> <li>setOp (endstone::Permissible)</li> <li>setDefault (endstone::Permission)</li> <li>setPermission (endstone::PermissionAttachment)</li> <li>setRemovalCallback (endstone::PermissionAttachment)</li> <li>sendPopup (endstone::Player)</li> <li>sendTip (endstone::Player)</li> <li>setAllowFlight (endstone::Player)</li> <li>setExpLevel (endstone::Player)</li> <li>setExpProgress (endstone::Player)</li> <li>setFlySpeed (endstone::Player)</li> <li>setFlying (endstone::Player)</li> <li>setGameMode (endstone::Player, endstone::ServerListPingEvent)</li> <li>setWalkSpeed (endstone::Player)</li> <li>setCommand (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>setDeathMessage (endstone::PlayerDeathEvent)</li> <li>setKickMessage (endstone::PlayerLoginEvent)</li> <li>setEnabled (endstone::Plugin)</li> <li>setExecutor (endstone::PluginCommand)</li> <li>subscribeToDefaultPerms (endstone::PluginManager)</li> <li>subscribeToPermission (endstone::PluginManager)</li> <li>setDimension (endstone::Position)</li> <li>Server (endstone::Server)</li> <li>setMaxPlayers (endstone::Server, endstone::ServerListPingEvent)</li> <li>ServerCommandEvent (endstone::ServerCommandEvent)</li> <li>ServerListPingEvent (endstone::ServerListPingEvent)</li> <li>serialize (endstone::ServerListPingEvent)</li> <li>setLevelName (endstone::ServerListPingEvent)</li> <li>setMinecraftVersionNetwork (endstone::ServerListPingEvent)</li> <li>setMotd (endstone::ServerListPingEvent)</li> <li>setNumPlayers (endstone::ServerListPingEvent)</li> <li>ServerLoadEvent (endstone::ServerLoadEvent)</li> <li>SocketAddress (endstone::SocketAddress)</li> <li>size (endstone::UUID)</li> <li>str (endstone::UUID)</li> <li>swap (endstone::UUID)</li> <li>setX (endstone::Vector)</li> <li>setY (endstone::Vector)</li> <li>setZ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#t","title":"t","text":"<ul> <li>testPermission (endstone::Command)</li> <li>testPermissionSilently (endstone::Command)</li> <li>trace (endstone::Logger)</li> <li>ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>toThunderState (endstone::ThunderChangeEvent)</li> <li>Translatable (endstone::Translatable)</li> <li>toString (endstone::Vector)</li> <li>toWeatherState (endstone::WeatherChangeEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#u","title":"u","text":"<ul> <li>unregisterFrom (endstone::Command)</li> <li>unregister (endstone::HandlerList)</li> <li>unsetPermission (endstone::PermissionAttachment)</li> <li>updateCommands (endstone::Player)</li> <li>unsubscribeFromDefaultPerms (endstone::PluginManager)</li> <li>unsubscribeFromPermission (endstone::PluginManager)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#v","title":"v","text":"<ul> <li>version (endstone::UUID)</li> <li>Vector (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#w","title":"w","text":"<ul> <li>warning (endstone::Logger)</li> <li>WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_functions/#_1","title":"~","text":"<ul> <li>~Actor (endstone::Actor)</li> <li>~ActorDeathEvent (endstone::ActorDeathEvent)</li> <li>~ActorEvent (endstone::ActorEvent)</li> <li>~ActorRemoveEvent (endstone::ActorRemoveEvent)</li> <li>~ActorSpawnEvent (endstone::ActorSpawnEvent)</li> <li>~Command (endstone::Command)</li> <li>~CommandExecutor (endstone::CommandExecutor)</li> <li>~CommandMap (endstone::CommandMap)</li> <li>~CommandSender (endstone::CommandSender)</li> <li>~Dimension (endstone::Dimension)</li> <li>~Event (endstone::Event)</li> <li>~Inventory (endstone::Inventory)</li> <li>~Level (endstone::Level)</li> <li>~Logger (endstone::Logger)</li> <li>~Permissible (endstone::Permissible)</li> <li>~Player (endstone::Player)</li> <li>~PlayerChatEvent (endstone::PlayerChatEvent)</li> <li>~PlayerCommandEvent (endstone::PlayerCommandEvent)</li> <li>~PlayerDeathEvent (endstone::PlayerDeathEvent)</li> <li>~PlayerEvent (endstone::PlayerEvent)</li> <li>~PlayerJoinEvent (endstone::PlayerJoinEvent)</li> <li>~PlayerLoginEvent (endstone::PlayerLoginEvent)</li> <li>~PlayerQuitEvent (endstone::PlayerQuitEvent)</li> <li>~Plugin (endstone::Plugin)</li> <li>~PluginLoader (endstone::PluginLoader)</li> <li>~PluginManager (endstone::PluginManager)</li> <li>~Scheduler (endstone::Scheduler)</li> <li>~Server (endstone::Server)</li> <li>~Task (endstone::Task)</li> <li>~ThunderChangeEvent (endstone::ThunderChangeEvent)</li> <li>~WeatherChangeEvent (endstone::WeatherChangeEvent)</li> <li>~WeatherEvent (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/","title":"Class Member Variables","text":""},{"location":"reference/cpp/class_member_variables/#a","title":"a","text":"<ul> <li>actor_ (endstone::ActorEvent)</li> <li>Aqua (endstone::ColorFormat)</li> <li>aliases_ (endstone::Command)</li> <li>async_ (endstone::Event)</li> <li>attachment_ (endstone::PermissionAttachmentInfo)</li> <li>api_version_ (endstone::PluginDescription)</li> <li>authors_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#b","title":"b","text":"<ul> <li>Black (endstone::ColorFormat)</li> <li>Blue (endstone::ColorFormat)</li> <li>Bold (endstone::ColorFormat)</li> <li>baked_handlers_ (endstone::HandlerList)</li> <li>BroadcastChannelAdmin (endstone::Server)</li> <li>BroadcastChannelUser (endstone::Server)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#c","title":"c","text":"<ul> <li>command_map_ (endstone::Command)</li> <li>cancelled_ (endstone::Event)</li> <li>children_ (endstone::Permission)</li> <li>command_ (endstone::PlayerCommandEvent, endstone::ServerCommandEvent)</li> <li>commands_ (endstone::PluginDescription)</li> <li>contributors_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#d","title":"d","text":"<ul> <li>DarkAqua (endstone::ColorFormat)</li> <li>DarkBlue (endstone::ColorFormat)</li> <li>DarkGray (endstone::ColorFormat)</li> <li>DarkGreen (endstone::ColorFormat)</li> <li>DarkPurple (endstone::ColorFormat)</li> <li>DarkRed (endstone::ColorFormat)</li> <li>description_ (endstone::Command, endstone::Permission, endstone::PluginDescription)</li> <li>DefaultPermission (endstone::Permission)</li> <li>default_value_ (endstone::Permission)</li> <li>death_message_ (endstone::PlayerDeathEvent)</li> <li>data_folder_ (endstone::Plugin)</li> <li>default_permission_ (endstone::PluginDescription)</li> <li>depend_ (endstone::PluginDescription)</li> <li>dimension_ (endstone::Position)</li> <li>data (endstone::UUID)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#e","title":"e","text":"<ul> <li>Escape (endstone::ColorFormat)</li> <li>event_ (endstone::EventHandler, endstone::HandlerList)</li> <li>executor_ (endstone::EventHandler, endstone::PluginCommand)</li> <li>enabled_ (endstone::Plugin)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#f","title":"f","text":"<ul> <li>full_name_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#g","title":"g","text":"<ul> <li>Gold (endstone::ColorFormat)</li> <li>Gray (endstone::ColorFormat)</li> <li>Green (endstone::ColorFormat)</li> <li>game_mode_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#h","title":"h","text":"<ul> <li>handlers_ (endstone::HandlerList)</li> <li>hostname_ (endstone::SocketAddress)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#i","title":"i","text":"<ul> <li>Italic (endstone::ColorFormat)</li> <li>ignore_cancelled_ (endstone::EventHandler)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#l","title":"l","text":"<ul> <li>LightPurple (endstone::ColorFormat)</li> <li>loader_ (endstone::Plugin)</li> <li>logger_ (endstone::Plugin)</li> <li>load_ (endstone::PluginDescription)</li> <li>load_before_ (endstone::PluginDescription)</li> <li>level_name_ (endstone::ServerListPingEvent)</li> <li>local_port_ (endstone::ServerListPingEvent)</li> <li>local_port_v6_ (endstone::ServerListPingEvent)</li> <li>level_ (endstone::WeatherEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#m","title":"m","text":"<ul> <li>message_ (endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::PlayerLoginEvent)</li> <li>MaterialAmethyst (endstone::ColorFormat)</li> <li>MaterialCopper (endstone::ColorFormat)</li> <li>MaterialDiamond (endstone::ColorFormat)</li> <li>MaterialEmerald (endstone::ColorFormat)</li> <li>MaterialGold (endstone::ColorFormat)</li> <li>MaterialIron (endstone::ColorFormat)</li> <li>MaterialLapis (endstone::ColorFormat)</li> <li>MaterialNetherite (endstone::ColorFormat)</li> <li>MaterialQuartz (endstone::ColorFormat)</li> <li>MaterialRedstone (endstone::ColorFormat)</li> <li>MinecoinGold (endstone::ColorFormat)</li> <li>mtx_ (endstone::HandlerList)</li> <li>max_players_ (endstone::ServerListPingEvent)</li> <li>minecraft_version_network_ (endstone::ServerListPingEvent)</li> <li>motd_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#n","title":"n","text":"<ul> <li>NAME (endstone::ActorDeathEvent, endstone::ActorRemoveEvent, endstone::ActorSpawnEvent, endstone::BroadcastMessageEvent, endstone::PlayerChatEvent, endstone::PlayerCommandEvent, endstone::PlayerDeathEvent, endstone::PlayerJoinEvent, endstone::PlayerLoginEvent, endstone::PlayerQuitEvent, endstone::PluginDisableEvent, endstone::PluginEnableEvent, endstone::ServerCommandEvent, endstone::ServerListPingEvent, endstone::ServerLoadEvent, endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>name_ (endstone::Command, endstone::Permission, endstone::PluginDescription)</li> <li>network_protocol_version_ (endstone::ServerListPingEvent)</li> <li>num_players_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#o","title":"o","text":"<ul> <li>Obfuscated (endstone::ColorFormat)</li> <li>owner_ (endstone::PluginCommand)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#p","title":"p","text":"<ul> <li>permissions_ (endstone::Command, endstone::PermissionAttachment, endstone::PluginDescription)</li> <li>plugin_ (endstone::EventHandler, endstone::PermissionAttachment, endstone::PluginDisableEvent, endstone::PluginEnableEvent)</li> <li>priority_ (endstone::EventHandler)</li> <li>pitch_ (endstone::Location)</li> <li>plugin_manager_ (endstone::Permission)</li> <li>permissible_ (endstone::PermissionAttachment, endstone::PermissionAttachmentInfo)</li> <li>permission_ (endstone::PermissionAttachmentInfo)</li> <li>player_ (endstone::PlayerEvent)</li> <li>prefix_ (endstone::PluginDescription)</li> <li>provides_ (endstone::PluginDescription)</li> <li>ping_response_ (endstone::ServerListPingEvent)</li> <li>port_ (endstone::SocketAddress)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#r","title":"r","text":"<ul> <li>recipients_ (endstone::BroadcastMessageEvent)</li> <li>Red (endstone::ColorFormat)</li> <li>Reset (endstone::ColorFormat)</li> <li>removed_ (endstone::PermissionAttachment)</li> <li>remote_host_ (endstone::ServerListPingEvent)</li> <li>remote_port_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#s","title":"s","text":"<ul> <li>server_ (endstone::Plugin, endstone::PluginLoader)</li> <li>soft_depend_ (endstone::PluginDescription)</li> <li>sender_ (endstone::ServerCommandEvent)</li> <li>server_guid_ (endstone::ServerListPingEvent)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#t","title":"t","text":"<ul> <li>type_ (endstone::ServerLoadEvent)</li> <li>to_ (endstone::ThunderChangeEvent, endstone::WeatherChangeEvent)</li> <li>translate_ (endstone::Translatable)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#u","title":"u","text":"<ul> <li>usages_ (endstone::Command)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#v","title":"v","text":"<ul> <li>valid_ (endstone::HandlerList)</li> <li>value_ (endstone::PermissionAttachmentInfo)</li> <li>version_ (endstone::PluginDescription)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#w","title":"w","text":"<ul> <li>White (endstone::ColorFormat)</li> <li>website_ (endstone::PluginDescription)</li> <li>with_ (endstone::Translatable)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#x","title":"x","text":"<ul> <li>x_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#y","title":"y","text":"<ul> <li>Yellow (endstone::ColorFormat)</li> <li>yaw_ (endstone::Location)</li> <li>y_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_variables/#z","title":"z","text":"<ul> <li>z_ (endstone::Vector)</li> </ul>"},{"location":"reference/cpp/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"reference/cpp/class_member_enums/","title":"Class Member Enums","text":""},{"location":"reference/cpp/class_member_enums/#l","title":"l","text":"<ul> <li>Level (endstone::Logger)</li> <li>LoadType (endstone::ServerLoadEvent)</li> </ul>"},{"location":"reference/cpp/class_member_enums/#t","title":"t","text":"<ul> <li>Type (endstone::Dimension)</li> </ul>"},{"location":"reference/cpp/namespace_members/","title":"Namespace Members","text":""},{"location":"reference/cpp/namespace_members/#e","title":"e","text":"<ul> <li>EventPriority (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#g","title":"g","text":"<ul> <li>GameMode (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#h","title":"h","text":"<ul> <li>hash_value (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#o","title":"o","text":"<ul> <li>operator!= (endstone)</li> <li>operator&lt; (endstone)</li> <li>operator&lt;= (endstone)</li> <li>operator== (endstone)</li> <li>operator&gt; (endstone)</li> <li>operator&gt;= (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#p","title":"p","text":"<ul> <li>PermissionDefault (endstone)</li> <li>PermissionRemovedExecutor (endstone)</li> <li>PluginLoadOrder (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#s","title":"s","text":"<ul> <li>swap (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_members/#t","title":"t","text":"<ul> <li>TaskId (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"reference/cpp/namespace_member_functions/#h","title":"h","text":"<ul> <li>hash_value (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_functions/#o","title":"o","text":"<ul> <li>operator!= (endstone)</li> <li>operator&lt; (endstone)</li> <li>operator&lt;= (endstone)</li> <li>operator== (endstone)</li> <li>operator&gt; (endstone)</li> <li>operator&gt;= (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_functions/#s","title":"s","text":"<ul> <li>swap (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"reference/cpp/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":""},{"location":"reference/cpp/namespace_member_typedefs/#p","title":"p","text":"<ul> <li>PermissionRemovedExecutor (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_typedefs/#t","title":"t","text":"<ul> <li>TaskId (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/","title":"Namespace Member Enums","text":""},{"location":"reference/cpp/namespace_member_enums/#e","title":"e","text":"<ul> <li>EventPriority (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#g","title":"g","text":"<ul> <li>GameMode (endstone)</li> </ul>"},{"location":"reference/cpp/namespace_member_enums/#p","title":"p","text":"<ul> <li>PermissionDefault (endstone)</li> <li>PluginLoadOrder (endstone)</li> </ul>"},{"location":"reference/cpp/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"reference/cpp/macros/","title":"Macros","text":""},{"location":"reference/cpp/macros/#e","title":"e","text":"<ul> <li>ENDSTONE_API_VERSION (endstone.h)</li> <li>ENDSTONE_EXPORT (endstone.h)</li> <li>ENDSTONE_MAX_PLAYERS (endstone.h)</li> <li>ENDSTONE_NOINLINE (endstone.h)</li> <li>ENDSTONE_STRINGIFY (endstone.h)</li> <li>ENDSTONE_TOSTRING (endstone.h)</li> <li>ENDSTONE_VERSION_MAJOR (endstone.h)</li> <li>ENDSTONE_VERSION_MINOR (endstone.h)</li> <li>ENDSTONE_VERSION_PATCH (endstone.h)</li> <li>ENDSTONE_PLUGIN (plugin.h)</li> </ul>"},{"location":"reference/cpp/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"reference/cpp/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}